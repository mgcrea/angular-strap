{"version":3,"sources":["collapse/collapse.js"],"names":[],"mappings":"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","file":"collapse.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function(element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function(element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function(element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function(element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function(value) {\n        if(angular.isArray(value)) {\n          self.$targets.$active = angular.copy(value);\n        }\n        else if(!self.$options.disallowToggle) {\n          // toogle element active status\n          isActive(value) ? deactivateItem(value) : activateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function() {\n        return self.$options.allowMultiple ? self.$targets.$active :\n          self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes(index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for(var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive(value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) === -1 ? false : true;\n      }\n\n      function deactivateItem(value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem(value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function() {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function($window, $animate, $collapse) {\n\n    var defaults = $collapse.defaults;\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if(ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function() {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function(modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            }\n            else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              }\n              else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function() {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function() {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function() {\n          var index = attrs.bsCollapseToggle || bsCollapseCtrl.$toggles.indexOf(element);\n          bsCollapseCtrl.$setActive(index * 1);\n          scope.$apply();\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if(bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function() {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render() {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          }\n          else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function() {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}