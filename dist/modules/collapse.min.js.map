{"version":3,"sources":["modules/collapse.js"],"names":["angular","module","provider","controller","this","animation","self","forEach","startCollapsed","isDefined","allowMultiple","$scope","$element","$attrs","activeIndexes","$targets","$active","i","length","index","value","indexOf","activeItems","splice","activateItem","$options","$get","defaults","$collapse","key","$viewChangeListeners","$registerToggle","element","$toggles","push","$unregisterToggle","$unregisterTarget","deactivateItem","fn","fixActiveItemIndexes","$setActive","disallowToggle","isActive","$activeIndexes","require","link","postLink","ngModelCtrl","directive","$window","$animate","$setViewValue","$formatters","attrs","modelValue","isArray","bsCollapseCtrl","$on","scope","controllers","disabled","bsCollapseToggle","$apply","on","$registerTarget","render","active","action","activeClass","addClass"],"mappings":"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","file":"modules/collapse.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes(index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive(value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) === -1 ? false : true;\n      }\n\n      function deactivateItem(value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem(value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink(scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render() {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}