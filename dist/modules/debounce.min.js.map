{"version":3,"sources":["helpers/debounce.js"],"names":[],"mappings":"qBASI,OAAA,+CAIE,WAAA,SAAA,EAAA,EAAA,MACA,GAAA,EAAA,EAAA,EAAA,QACE,cACF,OACE,YACA,GAAA,SACF,GAAA,WACF,GAAA,GAAA,GAAA,MAAA,CACA,GAAA,EACA,EAAA,WAAA,EAAA,EAAA,IAEA,EAAA,KACA,IAAA,EAAA,EAAA,MAAA,EAAA,MAGJ,EAAA,IAAA,CAKA,+BADA,IAAA,EAAA,EAAA,MAAA,EAAA,IACA,cAOI,WAAA,SAAA,EAAA,EAAA,MACA,GAAA,EAAA,EACF,EAAA,KACA,EAAA,MACE,SACA,GAAA,WACA,EAAA,EAAA,WAAA,EAAA,EAAA,GAAA,MACA,EAAA,KACA,EAAA,EAAA,MAAA,EAAA,UAEE,eACA,GAAA,GAAA,KACA,IAAA,EAAA,WAAA,IAAA,EAAA,MACA,GAAA,GAAA,EAAA,SACF,GAAA,OACE,UACF,GAAA,GACA,aAAA,GACF,EAAA,KACF,EAAA","file":"debounce.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\r\n.constant('debounce', function(func, wait, immediate) {\r\n  var timeout, args, context, timestamp, result;\r\n  return function() {\r\n    context = this;\r\n    args = arguments;\r\n    timestamp = new Date();\r\n    var later = function() {\r\n      var last = (new Date()) - timestamp;\r\n      if (last < wait) {\r\n        timeout = setTimeout(later, wait - last);\r\n      } else {\r\n        timeout = null;\r\n        if (!immediate) result = func.apply(context, args);\r\n      }\r\n    };\r\n    var callNow = immediate && !timeout;\r\n    if (!timeout) {\r\n      timeout = setTimeout(later, wait);\r\n    }\r\n    if (callNow) result = func.apply(context, args);\r\n    return result;\r\n  };\r\n})\r\n\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\r\n.constant('throttle', function(func, wait, options) {\r\n  var context, args, result;\r\n  var timeout = null;\r\n  var previous = 0;\r\n  options || (options = {});\r\n  var later = function() {\r\n    previous = options.leading === false ? 0 : new Date();\r\n    timeout = null;\r\n    result = func.apply(context, args);\r\n  };\r\n  return function() {\r\n    var now = new Date();\r\n    if (!previous && options.leading === false) previous = now;\r\n    var remaining = wait - (now - previous);\r\n    context = this;\r\n    args = arguments;\r\n    if (remaining <= 0) {\r\n      clearTimeout(timeout);\r\n      timeout = null;\r\n      previous = now;\r\n      result = func.apply(context, args);\r\n    } else if (!timeout && options.trailing !== false) {\r\n      timeout = setTimeout(later, remaining);\r\n    }\r\n    return result;\r\n  };\r\n});\r\n\r\n"],"sourceRoot":"/source/"}