{"version":3,"file":"debounce.min.js","sources":["helpers/debounce.js"],"names":[],"mappings":"qBASI,OAAA,+CAIE,WAAA,SAAA,EAAA,EAAA,MACA,GAAA,EAAA,EAAA,EAAA,QACE,cACF,OACE,YACA,GAAA,SACF,GAAA,WACF,GAAA,GAAA,GAAA,MAAA,CACA,GAAA,EACA,EAAA,WAAA,EAAA,EAAA,IAEA,EAAA,KACA,IAAA,EAAA,EAAA,MAAA,EAAA,MAGJ,EAAA,IAAA,CAKA,+BADA,IAAA,EAAA,EAAA,MAAA,EAAA,IACA,cAOI,WAAA,SAAA,EAAA,EAAA,MACA,GAAA,EAAA,EACF,EAAA,KACA,EAAA,MACE,SACA,GAAA,WACA,EAAA,EAAA,WAAA,EAAA,EAAA,GAAA,MACA,EAAA,KACA,EAAA,EAAA,MAAA,EAAA,UAEE,eACA,GAAA,GAAA,KACA,IAAA,EAAA,WAAA,IAAA,EAAA,MACA,GAAA,GAAA,EAAA,SACF,GAAA,OACE,UACF,GAAA,GACA,aAAA,GACF,EAAA,KACF,EAAA","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.constant('debounce', function(func, wait, immediate) {\n  var timeout, args, context, timestamp, result;\n  return function() {\n    context = this;\n    args = arguments;\n    timestamp = new Date();\n    var later = function() {\n      var last = (new Date()) - timestamp;\n      if (last < wait) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) result = func.apply(context, args);\n      }\n    };\n    var callNow = immediate && !timeout;\n    if (!timeout) {\n      timeout = setTimeout(later, wait);\n    }\n    if (callNow) result = func.apply(context, args);\n    return result;\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.constant('throttle', function(func, wait, options) {\n  var context, args, result;\n  var timeout = null;\n  var previous = 0;\n  options || (options = {});\n  var later = function() {\n    previous = options.leading === false ? 0 : new Date();\n    timeout = null;\n    result = func.apply(context, args);\n  };\n  return function() {\n    var now = new Date();\n    if (!previous && options.leading === false) previous = now;\n    var remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(context, args);\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n    return result;\n  };\n});\n\n"],"sourceRoot":"/source/"}