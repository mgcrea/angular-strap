{"version":3,"sources":["button/button.js"],"names":[],"mappings":"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","file":"button.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function() {\n\n    var defaults = this.defaults = {\n      activeClass:'active',\n      toggleEvent:'click'\n    };\n\n    this.$get = function() {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function() {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink(element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function(child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if(constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if(constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if(hasExoticValues) {\n          controller.$parsers.push(function(viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function(modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n             return angular.equals(modelValue, trueValue);\n          });\n          // Fix rendering for exotic values\n          scope.$watch(attr.ngModel, function(newValue, oldValue) {\n            controller.$render();\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, trueValue);\n          $$rAF(function() {\n            if(isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function() {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if(!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            if(!hasExoticValues) {\n              controller.$render();\n            }\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function() {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink(element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function(child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function(v) {\n          value = constantValueRegExp.test(v) ? scope.$eval(v) : v;\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, value);\n          $$rAF(function() {\n            if(isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function() {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n"],"sourceRoot":"/source/"}