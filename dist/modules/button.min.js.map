{"version":3,"sources":["modules/button.js"],"names":["angular","defaults","this","activeClass","directive","restrict","require","compile","children","querySelectorAll","childEl","element","ngModel","attr","removeAttr","forEach","child","$button","constantValueRegExp","options","isInput","trueValue","link","scope","controller","falseValue","test","isDefined","hasExoticValues","viewValue","$formatters","push","$render","isActive","$viewValue","checked","activeElement","toggleClass","bind","toggleEvent","$$rAF","$setViewValue","$apply","hasClass","$observe","value","$eval","v","parent","equals"],"mappings":"AAOA,YAEAA,SAGcC,OAAAA,4BAAUA,SAAAA,UAAAA,WAFtB,GAAIA,GAAWC,KAAKD,UAClBE,YAAa,SAMdC,YAAU,QAHXF,MAMIG,KAAU,WACVC,OACAC,SAASN,MAHZG,UAMSI,kBAAsBC,WALhC,OACEJ,SAMUK,IALVJ,QAMMI,UALNH,QAMMG,SAAaC,EAAiBC,GALlCD,EAAQE,KAAK,cAAe,WAC5BF,EAAQG,WAAW,WACnB,IAAIN,GAAWG,EAAQ,GAAGF,iBAAiB,yBAW9CL,SAAUW,QAAAP,EAAA,SAAAQ,GAELf,GAAAA,GAAWgB,QAAQhB,QAAAA,EACnBiB,GAAAA,KAAAA,cAAsB,IAE1BR,EAAAG,KAAA,WAAAA,EAAAD,QAAA,IAAAF,EAAAG,KAAA,gBARDT,UAaSe,cAAUlB,UAAAA,QAAAA,SAAAA,EAAAA,GAZpB,GAeMA,GAAImB,EAAUT,SACdO,EAAoBE,oBAd1B,QACEf,SAgBQa,IAfRZ,QAgBMe,UAfNC,KAAM,SAAkBC,EAAOZ,EAASE,EAAMW,GAiB1C,GAAIC,GAAAA,EACAP,EAA8BO,UAA9BP,EAAAA,GAAoBQ,SACtBD,EAAaF,EAAYV,EAAKY,SAAAA,EAf9BJ,EAAYrB,QAAQ2B,UAAUd,EAAKQ,WAAaR,EAAKQ,WAAY,CAmB/DO,GAAAA,KAAyBP,EAAAA,aAC7BA,EAAIO,EAAAA,MAAiBf,EAAAQ,WAhBvB,IAmBMI,GAAOI,QAAYR,UAAYI,EAAAA,YAAAA,EAAAA,YAAAA,CAlBjCP,GAAoBQ,KAAKb,EAAKY,cAqB9BD,EAAWM,EAAAA,MAAYC,EAAKN,YAlBhC,IAAIG,GAAuC,iBAAdP,IAAiD,iBAAfI,EAC3DG,KAwBFJ,EAAWQ,SAAUD,KAAA,SAAAF,GAEnB,MAAII,GAAaT,EAAWU,IAtB9BV,EAwBQJ,YAAiBW,KAAGI,SAAUF,GAClCG,MAAAA,SAAcC,OAAAA,EAAoBlC,MAKtCQ,EAAQ2B,QAAaC,WACnBhB,GAAAA,KAAaC,EAAAU,UAzBfM,GA2BI,WACEhB,IAAWiB,EAAAA,GAAAA,QAAeL,GA1B9BA,EAAcC,YAAYlB,EAAQhB,YAAa8B,MAGnDtB,EAAQ2B,KAAKnB,EAAQoB,YAAa,WAChChB,EAAMmB,OAAO,WACNtB,GAiCZhB,EAAUqC,eAAgBL,EAAAO,SAAA,WAGvBtC,EAAU2B,mBA5BX5B,UAiCOI,eAAmB,WAhC7B,OACEH,SAiCML,IAhCNM,QAiCMN,UAhCNO,QAAS,SAAkBI,EAASE,GAClCF,EAAQE,KAAK,cAAe,WAC5BF,EAAQG,WAAW,WAsCtBV,IAAAA,GAAUO,EAAA,GAAAF,iBAAW,sBAEhBR,SAAAA,QAAWgB,EAAQhB,SAAAA,GACnBiB,QAAAA,QAAAA,GAAsBL,KAAA,WAAA,IAE1Bb,QAAAW,QAAAK,GAAAH,KAAA,WAAAA,EAAAD,eAnCDR,UAwCSe,WAAUlB,UAAAA,QAAAA,SAAAA,EAAAA,GAvCpB,GA0CMA,GAAImB,EAAUT,SACdO,EAAoBE,oBAzC1B,QACEf,SA2CSuC,IA1CTtC,QA2CM,UA1CNgB,KA2CQuB,SAAcC,EAAMC,EAAAA,EAAAA,GA1C1B,GA8CIvB,GA9CAL,EA2COlB,EACL4C,EAAQE,UAAAA,EAAAA,GAAAA,SA1CVX,EAAgBhB,EAAUT,EAAQqC,SAAWrC,CAEjDE,GAAK+B,SAAS,QAAS,SAASG,GAgD5BF,EAFSb,iBAAAA,IAAUd,EAAAQ,KAAAqB,GAEfd,EAAWjC,MAAAA,GAEToB,EA5CRI,EAAWQ,YAkDXrB,EAAQ2B,QAAaC,WACnBhB,GAAAA,GAAavB,QAAAiD,OAAAzB,EAAAU,WAAAW,EA/CfL,GAiDIhB,WACAA,IAAWQ,EAAAA,GAAAA,QAAAA,GAhDbI,EAAcC,YAAYlB,EAAQhB,YAAa8B,MAGnDtB,EAAQ2B,KAAKnB,EAAQoB,YAAa,WAChChB,EAAMmB,OAAO,WACXlB,EAAWiB,cAAcI,GACzBrB,EAAWQ","file":"modules/button.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n"],"sourceRoot":"/source/"}