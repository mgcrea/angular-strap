{"version":3,"sources":["button/button.js"],"names":["angular","module","provider","defaults","this","activeClass","toggleEvent","$get","directive","restrict","require","compile","element","attr","removeAttr","children","querySelectorAll","forEach","child","childEl","ngModel","$button","$$rAF","constantValueRegExp","link","scope","controller","options","isInput","nodeName","activeElement","parent","trueValue","isDefined","test","$eval","falseValue","hasExoticValues","$parsers","push","viewValue","$watch","$render","isActive","equals","$modelValue","checked","toggleClass","bind","$apply","$setViewValue","hasClass","value"],"mappings":"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","file":"button.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function() {\n\n    var defaults = this.defaults = {\n      activeClass:'active',\n      toggleEvent:'click'\n    };\n\n    this.$get = function() {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function() {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink(element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function(child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if(constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if(constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if(hasExoticValues) {\n          controller.$parsers.push(function(viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // Fix rendering for exotic values\n          scope.$watch(attr.ngModel, function(newValue, oldValue) {\n            controller.$render();\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, trueValue);\n          $$rAF(function() {\n            if(isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function() {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if(!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            if(!hasExoticValues) {\n              controller.$render();\n            }\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function() {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink(element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function(child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value = constantValueRegExp.test(attr.value) ? scope.$eval(attr.value) : attr.value;\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, value);\n          $$rAF(function() {\n            if(isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function() {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n"],"sourceRoot":"/source/"}