{"version":3,"sources":["helpers/date-parser.js"],"names":[],"mappings":"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","file":"date-parser.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate() {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function(value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function(value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function(value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function(value) { this.hours = value; };\n  ParseDate.prototype.getHours = function() { return this.hours; };\n  ParseDate.prototype.setDate = function(value) { this.day = value; };\n  ParseDate.prototype.setMonth = function(value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function(value) { this.year = value; };\n  ParseDate.prototype.fromDate = function(value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function() {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop() {\n  }\n\n  function isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive(array, value) {\n    var len = array.length, str=value.toString().toLowerCase();\n    for (var i=0; i<len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function($locale, dateFilter) {\n\n    var DateParserFactory = function(config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}',\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function(value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function(value) { return this.setMonth(1 * value - 1); },\n        'M'     : function(value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function(value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : proto.setFullYear\n      };\n\n      var regex, setMap;\n\n      $dateParser.init = function() {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function(date) {\n        if(angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function(value, baseDate, format, timezone) {\n        // check for date format special names\n        if(format) format = $locale.DATETIME_FORMATS[format] || format;\n        if(angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if(!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for(var i = 0; i < matches.length - 1; i++) {\n          formatSetMap[i] && formatSetMap[i].call(date, matches[i+1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function(key, value) {\n        var date;\n\n        if(value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if(angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if(isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && 0 === value.length) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function(key, value) {\n        var time;\n\n        if(value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if(angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if(isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && 0 === value.length) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function(date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function(date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo?-1:1)*date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function setMapForFormat(format) {\n        var keys = Object.keys(setFnMap), i;\n        var map = [], sortedMap = [];\n        // Map to setFn\n        var clonedFormat = format;\n        for(i = 0; i < keys.length; i++) {\n          if(format.split(keys[i]).length > 1) {\n            var index = clonedFormat.search(keys[i]);\n            format = format.split(keys[i]).join('');\n            if(setFnMap[keys[i]]) {\n              map[index] = setFnMap[keys[i]];\n            }\n          }\n        }\n        // Sort result map\n        angular.forEach(map, function(v) {\n          // conditional required since angular.forEach broke around v1.2.21\n          // related pr: https://github.com/angular/angular.js/pull/8525\n          if(v) sortedMap.push(v);\n        });\n        return sortedMap;\n      }\n\n      function escapeReservedSymbols(text) {\n        return text.replace(/\\//g, '[\\\\/]').replace('/-/g', '[-]').replace(/\\./g, '[.]').replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function regExpForFormat(format) {\n        var keys = Object.keys(regExpMap), i;\n\n        var re = format;\n        // Abstract replaces to avoid collisions\n        for(i = 0; i < keys.length; i++) {\n          re = re.split(keys[i]).join('${' + i + '}');\n        }\n        // Replace abstracted values\n        for(i = 0; i < keys.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[keys[i]] + ')');\n        }\n        format = escapeReservedSymbols(format);\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n"],"sourceRoot":"/source/"}