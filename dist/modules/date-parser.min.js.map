{"version":3,"sources":["helpers/date-parser.js"],"names":[],"mappings":"qBASE,OAAA,iDAEA,eAAA,kBAAA,WAIA,QAAA,MAFA,GAAA,GAAA,KAAA,UASE,EAAA,KAAA,qCAEE,sDAKE,GAAA,SAAA,WAkFI,GAAA,MACA,GAAA,EAAA,OAAA,KAAA,GACA,KAAA,KAEA,EAAA,MACF,EAAA,EAAA,EAAA,EAAA,OAAA,IACF,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,EAAA,CACA,GAAA,GAAA,EAAA,OAAA,EAAA,GACA,GAAA,EAAA,MAAA,EAAA,IAAA,KAAA,IACE,EAAA,EAAA,MACA,EAAA,GAAA,EAAA,EAAA,KAUJ,qCAFA,GAAA,EAAA,KAAA,KAEA,UAGE,GAAA,GACA,MAAA,GAAA,QAAA,MAAA,SAAA,QAAA,OAAA,OAAA,QAAA,MAAA,OAAA,QAAA,OAAA,iBAGA,GAAA,GACA,GAAA,GAAA,EAAA,OAAA,KAAA,GAEE,EAAA,CAEF,KAAA,EAAA,EAAA,EAAA,EAAA,OAAA,4DAKF,EAAA,EAAA,MAAA,KAAA,EAAA,KAAA,KAAA,IAAA,EAAA,EAAA,IAAA,uDArHE,EAAA,QAAA,UAAA,EAAA,GAEA,KAEA,GACA,IAAA,WACA,GAAA,aACA,EAAA,EAAA,OAAA,cAAA,mBACA,GAAA,aACA,EAAA,EAAA,OAAA,cAAA,mBACA,GAAA,mBACA,EAAA,EAAA,OAAA,iBAAA,oBACA,GAAA,oBACA,EAAA,EAAA,OAAA,eAAA,iBACA,EAAA,QACA,KAAA,EAAA,iBAAA,IAAA,KAAA,KACA,IAAA,EAAA,iBAAA,SAAA,KAAA,KACA,GAAA,yBACA,EAAA,EAAA,OAAA,yBAAA,2BACF,KAAA,EAAA,iBAAA,MAAA,KAAA,iDAEA,GAAA,gBACE,EAAA,EAAA,OAAA,eAAA,iBACA,KAAA,gCACA,GAAA,WACA,EAAA,EAAA,OAAA,wBAAA,kBAGA,GACA,IAAA,EAAA,gBACA,GAAA,EAAA,WACA,EAAA,EAAA,WACA,GAAA,EAAA,WACA,EAAA,EAAA,WACA,GAAA,EAAA,SACA,EAAA,EAAA,SACA,GAAA,EAAA,SACA,EAAA,EAAA,SACA,KAAA,EACA,IAAA,EACA,GAAA,EAAA,QACA,EAAA,EAAA,QACA,EAAA,SAAA,GAAA,GAAA,GAAA,KAAA,WAAA,EAAA,OAAA,MAAA,SAAA,EAAA,MAAA,OAAA,EAAA,GAAA,IACF,KAAA,SAAA,GAAA,MAAA,MAAA,SAAA,EAAA,iBAAA,MAAA,QAAA,qFAEA,GAAA,SAAA,GAAA,MAAA,MAAA,SAAA,EAAA,EAAA,+CAEA,KAAA,EAAA,YACE,GAAA,SAAA,GAAA,MAAA,MAAA,YAAA,IAAA,EAAA,IACA,EAAA,EAAA,sBAKA,KAAA,WACA,EAAA,QAAA,EAAA,iBAAA,EAAA,SAAA,EAAA,OACF,EAAA,EAAA,EAAA,2BAIE,QAAA,SAAA,GACA,MAAA,SAAA,OAAA,IAAA,MAAA,EAAA,WACA,EAAA,KAAA,MAGA,MAAA,SAAA,EAAA,EAAA,GACE,QAAA,OAAA,KAAA,EAAA,EAAA,EAAA,GAAA,EAAA,SACF,IAAA,GAAA,EAAA,EAAA,GAAA,EACA,EAAA,EAAA,EAAA,GAAA,EACF,EAAA,EAAA,KAAA,yBAEA,GAAA,GAAA,GAAA,MAAA,EAAA,EAAA,wBAEA,EAAA,IAAA,EAAA,GAAA,KAAA,EAAA,EAAA,EAAA,GAEE,OAAA,IAiDL,EAAA,SAKH,OAAA,gBAaE,aAAA,UAAA,aAAA,cAAA,SAAA,EAAA,EAAA,iBAoBA,MAAA,4BAAA,KAAA,GAAA,MAAA,QAfE,iBAAA,WACF,MAAA,GAAA,uCAMA,MAAA,GAAA,iBAAA,IAAA,iCAIA,MAAA,GAAA,iBAAA,uCAQA,MAAA,GAAA,GAAA,mCAIA,MAAA,GAAA,GAAA,mCAIA,MAAA,GAAA,GAAA,4BAIA,QAAA,EAAA,GAAA,kCAID,MAAA,GAAA,EAAA","file":"date-parser.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\r\n\r\n.provider('$dateParser', function($localeProvider) {\r\n\r\n  var proto = Date.prototype;\r\n\r\n  function noop() {\r\n  }\r\n\r\n  function isNumeric(n) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n  }\r\n\r\n  var defaults = this.defaults = {\r\n    format: 'shortDate',\r\n    strict: false\r\n  };\r\n\r\n  this.$get = function($locale, dateFilter) {\r\n\r\n    var DateParserFactory = function(config) {\r\n\r\n      var options = angular.extend({}, defaults, config);\r\n\r\n      var $dateParser = {};\r\n\r\n      var regExpMap = {\r\n        'sss'   : '[0-9]{3}',\r\n        'ss'    : '[0-5][0-9]',\r\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'mm'    : '[0-5][0-9]',\r\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'HH'    : '[01][0-9]|2[0-3]',\r\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\r\n        'hh'    : '[0][1-9]|[1][012]',\r\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'a'     : 'AM|PM',\r\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\r\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\r\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\r\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\r\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\r\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\r\n        'MM'    : '0[1-9]|1[012]',\r\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\r\n        'yy'    : '[0-9]{2}',\r\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}',\r\n      };\r\n\r\n      var setFnMap = {\r\n        'sss'   : proto.setMilliseconds,\r\n        'ss'    : proto.setSeconds,\r\n        's'     : proto.setSeconds,\r\n        'mm'    : proto.setMinutes,\r\n        'm'     : proto.setMinutes,\r\n        'HH'    : proto.setHours,\r\n        'H'     : proto.setHours,\r\n        'hh'    : proto.setHours,\r\n        'h'     : proto.setHours,\r\n        'EEEE'  : noop,\r\n        'EEE'   : noop,\r\n        'dd'    : proto.setDate,\r\n        'd'     : proto.setDate,\r\n        'a'     : function(value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\r\n        'MMMM'  : function(value) { return this.setMonth($locale.DATETIME_FORMATS.MONTH.indexOf(value)); },\r\n        'MMM'   : function(value) { return this.setMonth($locale.DATETIME_FORMATS.SHORTMONTH.indexOf(value)); },\r\n        'MM'    : function(value) { return this.setMonth(1 * value - 1); },\r\n        'M'     : function(value) { return this.setMonth(1 * value - 1); },\r\n        'yyyy'  : proto.setFullYear,\r\n        'yy'    : function(value) { return this.setFullYear(2000 + 1 * value); },\r\n        'y'     : proto.setFullYear\r\n      };\r\n\r\n      var regex, setMap;\r\n\r\n      $dateParser.init = function() {\r\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\r\n        regex = regExpForFormat($dateParser.$format);\r\n        setMap = setMapForFormat($dateParser.$format);\r\n      };\r\n\r\n      $dateParser.isValid = function(date) {\r\n        if(angular.isDate(date)) return !isNaN(date.getTime());\r\n        return regex.test(date);\r\n      };\r\n\r\n      $dateParser.parse = function(value, baseDate, format) {\r\n        if(angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format);\r\n        var formatRegex = format ? regExpForFormat(format) : regex;\r\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\r\n        var matches = formatRegex.exec(value);\r\n        if(!matches) return false;\r\n        var date = baseDate || new Date(0, 0, 1);\r\n        for(var i = 0; i < matches.length - 1; i++) {\r\n          formatSetMap[i] && formatSetMap[i].call(date, matches[i+1]);\r\n        }\r\n        return date;\r\n      };\r\n\r\n      // Private functions\r\n\r\n      function setMapForFormat(format) {\r\n        var keys = Object.keys(setFnMap), i;\r\n        var map = [], sortedMap = [];\r\n        // Map to setFn\r\n        var clonedFormat = format;\r\n        for(i = 0; i < keys.length; i++) {\r\n          if(format.split(keys[i]).length > 1) {\r\n            var index = clonedFormat.search(keys[i]);\r\n            format = format.split(keys[i]).join('');\r\n            if(setFnMap[keys[i]]) {\r\n              map[index] = setFnMap[keys[i]];\r\n            }\r\n          }\r\n        }\r\n        // Sort result map\r\n        angular.forEach(map, function(v) {\r\n          // conditional required since angular.forEach broke around v1.2.21\r\n          // related pr: https://github.com/angular/angular.js/pull/8525\r\n          if(v) sortedMap.push(v);\r\n        });\r\n        return sortedMap;\r\n      }\r\n\r\n      function escapeReservedSymbols(text) {\r\n        return text.replace(/\\//g, '[\\\\/]').replace('/-/g', '[-]').replace(/\\./g, '[.]').replace(/\\\\s/g, '[\\\\s]');\r\n      }\r\n\r\n      function regExpForFormat(format) {\r\n        var keys = Object.keys(regExpMap), i;\r\n\r\n        var re = format;\r\n        // Abstract replaces to avoid collisions\r\n        for(i = 0; i < keys.length; i++) {\r\n          re = re.split(keys[i]).join('${' + i + '}');\r\n        }\r\n        // Replace abstracted values\r\n        for(i = 0; i < keys.length; i++) {\r\n          re = re.split('${' + i + '}').join('(' + regExpMap[keys[i]] + ')');\r\n        }\r\n        format = escapeReservedSymbols(format);\r\n\r\n        return new RegExp('^' + re + '$', ['i']);\r\n      }\r\n\r\n      $dateParser.init();\r\n      return $dateParser;\r\n\r\n    };\r\n\r\n    return DateParserFactory;\r\n\r\n  };\r\n\r\n})\r\n\r\n\r\n// This service incorporates all the date-related functionality.\r\n// The service uses angular-strap's $dateParser to parse dates and angular's\r\n// dateFilter to format dates by default. We use a separate service to wrap this\r\n// functionality to allow the use of other implementations for date parsing and\r\n// formatting, e.g. moment\r\n\r\n.service('$dateUtil', function($locale, dateFilter, $dateParser) {\r\n\r\n  // The unused `lang` arguments are on purpose. The default implementation does not\r\n  // use them, but custom implementations may, so we put them here to make this clear.\r\n\r\n  this.getDefaultLocale = function() {\r\n    return $locale.id;\r\n  };\r\n\r\n  // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\r\n  // Return either the corresponding date format or the given date format.\r\n  this.getDatetimeFormat = function(format, lang) {\r\n    return $locale.DATETIME_FORMATS[format] || format;\r\n  };\r\n\r\n  this.weekdaysShort = function(lang) {\r\n    return $locale.DATETIME_FORMATS.SHORTDAY;\r\n  };\r\n\r\n  function splitTimeFormat(format) {\r\n    return /(h+)([:\\.])?(m+)[ ]?(a?)/i.exec(format).slice(1);\r\n  }\r\n\r\n  this.hoursFormat = function(timeFormat) {\r\n    return splitTimeFormat(timeFormat)[0];\r\n  };\r\n\r\n  this.minutesFormat = function(timeFormat) {\r\n    return splitTimeFormat(timeFormat)[2];\r\n  };\r\n\r\n  this.timeSeparator = function(timeFormat) {\r\n    return splitTimeFormat(timeFormat)[1];\r\n  };\r\n\r\n  this.showAM = function(timeFormat) {\r\n    return !!splitTimeFormat(timeFormat)[3];\r\n  };\r\n\r\n  this.formatDate = function(date, format, lang){\r\n    return dateFilter(date, format);\r\n  };\r\n\r\n  this.getDateParser = function(opts) {\r\n    return $dateParser(opts);\r\n  };\r\n\r\n});\r\n"],"sourceRoot":"/source/"}