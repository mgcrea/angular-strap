{"version":3,"sources":["helpers/date-parser.js"],"names":["angular","module","provider","proto","Date","prototype","defaults","this","format","strict","$get","$locale","dateFilter","DateParserFactory","config","setMapForFormat","i","keys","Object","setFnMap","map","sortedMap","clonedFormat","length","split","index","search","join","forEach","v","push","escapeReservedSymbols","text","replace","regExpForFormat","regExpMap","re","RegExp","regex","setMap","options","extend","$dateParser","sss","ss","s","mm","m","HH","H","hh","h","a","EEEE","DATETIME_FORMATS","DAY","EEE","SHORTDAY","dd","d","MMMM","MONTH","MMM","SHORTMONTH","MM","M","yyyy","yy","y","setMilliseconds","setSeconds","setMinutes","setHours","setDate","value","hours","getHours","match","setMonth","indexOf","setFullYear","init","$format","isValid","date","isDate","isNaN","getTime","test","parse","baseDate","formatRegex","formatSetMap","matches","exec","call"],"mappings":"AAOA,YACAA,SAAQC,OAAO,wCAAyCC,SAAS,eAC/D,kBACA,WACE,GAAIC,GAAQC,KAAKC,UAIbC,EAAWC,KAAKD,UAChBE,OAAQ,YACRC,QAAQ,EAEZF,MAAKG,MACH,UACA,aACA,SAAUC,EAASC,GACjB,GAAIC,GAAoB,SAAUC,GAsFhC,QAASC,GAAgBP,GACvB,GAAkCQ,GAA9BC,EAAOC,OAAOD,KAAKE,GACnBC,KAAUC,KAEVC,EAAed,CACnB,KAAKQ,EAAI,EAAGA,EAAIC,EAAKM,OAAQP,IAC3B,GAAIR,EAAOgB,MAAMP,EAAKD,IAAIO,OAAS,EAAG,CACpC,GAAIE,GAAQH,EAAaI,OAAOT,EAAKD,GACrCR,GAASA,EAAOgB,MAAMP,EAAKD,IAAIW,KAAK,IAChCR,EAASF,EAAKD,MAChBI,EAAIK,GAASN,EAASF,EAAKD,KAQjC,MAJAhB,SAAQ4B,QAAQR,EAAK,SAAUS,GACzBA,GACFR,EAAUS,KAAKD,KAEZR,EAET,QAASU,GAAsBC,GAC7B,MAAOA,GAAKC,QAAQ,MAAO,SAASA,QAAQ,OAAQ,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,OAAQ,SAEnG,QAASC,GAAgB1B,GACvB,GAAmCQ,GAA/BC,EAAOC,OAAOD,KAAKkB,GACnBC,EAAK5B,CAET,KAAKQ,EAAI,EAAGA,EAAIC,EAAKM,OAAQP,IAC3BoB,EAAKA,EAAGZ,MAAMP,EAAKD,IAAIW,KAAK,KAAOX,EAAI,IAGzC,KAAKA,EAAI,EAAGA,EAAIC,EAAKM,OAAQP,IAC3BoB,EAAKA,EAAGZ,MAAM,KAAOR,EAAI,KAAKW,KAAK,IAAMQ,EAAUlB,EAAKD,IAAM,IAGhE,OADAR,GAASuB,EAAsBvB,GACxB,GAAI6B,QAAO,IAAMD,EAAK,KAAM,MAxHrC,GA2DIE,GAAOC,EA3DPC,EAAUxC,QAAQyC,UAAWnC,EAAUQ,GACvC4B,KACAP,GACAQ,IAAO,WACPC,GAAM,aACNC,EAAKL,EAAQ/B,OAAS,cAAgB,mBACtCqC,GAAM,aACNC,EAAKP,EAAQ/B,OAAS,cAAgB,mBACtCuC,GAAM,mBACNC,EAAKT,EAAQ/B,OAAS,iBAAmB,oBACzCyC,GAAM,oBACNC,EAAKX,EAAQ/B,OAAS,eAAiB,iBACvC2C,EAAK,QACLC,KAAQ1C,EAAQ2C,iBAAiBC,IAAI5B,KAAK,KAC1C6B,IAAO7C,EAAQ2C,iBAAiBG,SAAS9B,KAAK,KAC9C+B,GAAM,yBACNC,EAAKnB,EAAQ/B,OAAS,yBAA2B,2BACjDmD,KAAQjD,EAAQ2C,iBAAiBO,MAAMlC,KAAK,KAC5CmC,IAAOnD,EAAQ2C,iBAAiBS,WAAWpC,KAAK,KAChDqC,GAAM,gBACNC,EAAKzB,EAAQ/B,OAAS,eAAiB,iBACvCyD,KAAQ,gCACRC,GAAM,WACNC,EAAK5B,EAAQ/B,OAAS,wBAA0B,kBAEhDU,GACAwB,IAAOxC,EAAMkE,gBACbzB,GAAMzC,EAAMmE,WACZzB,EAAK1C,EAAMmE,WACXxB,GAAM3C,EAAMoE,WACZxB,EAAK5C,EAAMoE,WACXvB,GAAM7C,EAAMqE,SACZvB,EAAK9C,EAAMqE,SACXtB,GAAM/C,EAAMqE,SACZrB,EAAKhD,EAAMqE,SACXd,GAAMvD,EAAMsE,QACZd,EAAKxD,EAAMsE,QACXrB,EAAK,SAAUsB,GACb,GAAIC,GAAQpE,KAAKqE,UACjB,OAAOrE,MAAKiE,SAASE,EAAMG,MAAM,OAASF,EAAQ,GAAKA,IAEzDf,KAAQ,SAAUc,GAChB,MAAOnE,MAAKuE,SAASnE,EAAQ2C,iBAAiBO,MAAMkB,QAAQL,KAE9DZ,IAAO,SAAUY,GACf,MAAOnE,MAAKuE,SAASnE,EAAQ2C,iBAAiBS,WAAWgB,QAAQL,KAEnEV,GAAM,SAAUU,GACd,MAAOnE,MAAKuE,SAAS,EAAIJ,EAAQ,IAEnCT,EAAK,SAAUS,GACb,MAAOnE,MAAKuE,SAAS,EAAIJ,EAAQ,IAEnCR,KAAQ/D,EAAM6E,YACdb,GAAM,SAAUO,GACd,MAAOnE,MAAKyE,YAAY,IAAO,EAAIN,IAErCN,EAAKjE,EAAM6E,YAkEf,OA/DAtC,GAAYuC,KAAO,WACjBvC,EAAYwC,QAAUvE,EAAQ2C,iBAAiBd,EAAQhC,SAAWgC,EAAQhC,OAC1E8B,EAAQJ,EAAgBQ,EAAYwC,SACpC3C,EAASxB,EAAgB2B,EAAYwC,UAEvCxC,EAAYyC,QAAU,SAAUC,GAC9B,MAAIpF,SAAQqF,OAAOD,IACTE,MAAMF,EAAKG,WACdjD,EAAMkD,KAAKJ,IAEpB1C,EAAY+C,MAAQ,SAAUf,EAAOgB,EAAUlF,GACzCR,QAAQqF,OAAOX,KACjBA,EAAQ9D,EAAW8D,EAAOlE,GAAUkC,EAAYwC,SAClD,IAAIS,GAAcnF,EAAS0B,EAAgB1B,GAAU8B,EACjDsD,EAAepF,EAASO,EAAgBP,GAAU+B,EAClDsD,EAAUF,EAAYG,KAAKpB,EAC/B,KAAKmB,EACH,OAAO,CAET,KAAK,GADDT,GAAOM,GAAY,GAAItF,MAAK,EAAG,EAAG,GAC7BY,EAAI,EAAGA,EAAI6E,EAAQtE,OAAS,EAAGP,IACtC4E,EAAa5E,IAAM4E,EAAa5E,GAAG+E,KAAKX,EAAMS,EAAQ7E,EAAI,GAE5D,OAAOoE,IAwCT1C,EAAYuC,OACLvC,EAET,OAAO7B","file":"date-parser.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function($localeProvider) {\n\n  var proto = Date.prototype;\n\n  function isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function($locale, dateFilter) {\n\n    var DateParserFactory = function(config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}',\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function(value) { var hours = this.getHours(); return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function(value) { return this.setMonth($locale.DATETIME_FORMATS.MONTH.indexOf(value)); },\n        'MMM'   : function(value) { return this.setMonth($locale.DATETIME_FORMATS.SHORTMONTH.indexOf(value)); },\n        'MM'    : function(value) { return this.setMonth(1 * value - 1); },\n        'M'     : function(value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function(value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : proto.setFullYear\n      };\n\n      var regex, setMap;\n\n      $dateParser.init = function() {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function(date) {\n        if(angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function(value, baseDate, format) {\n        if(angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if(!matches) return false;\n        var date = baseDate || new Date(0, 0, 1);\n        for(var i = 0; i < matches.length - 1; i++) {\n          formatSetMap[i] && formatSetMap[i].call(date, matches[i+1]);\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function setMapForFormat(format) {\n        var keys = Object.keys(setFnMap), i;\n        var map = [], sortedMap = [];\n        // Map to setFn\n        var clonedFormat = format;\n        for(i = 0; i < keys.length; i++) {\n          if(format.split(keys[i]).length > 1) {\n            var index = clonedFormat.search(keys[i]);\n            format = format.split(keys[i]).join('');\n            if(setFnMap[keys[i]]) map[index] = setFnMap[keys[i]];\n          }\n        }\n        // Sort result map\n        angular.forEach(map, function(v) {\n          if(v) sortedMap.push(v);\n        });\n        return sortedMap;\n      }\n\n      function escapeReservedSymbols(text) {\n        return text.replace(/\\//g, '[\\\\/]').replace('/-/g', '[-]').replace(/\\./g, '[.]').replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function regExpForFormat(format) {\n        var keys = Object.keys(regExpMap), i;\n\n        var re = format;\n        // Abstract replaces to avoid collisions\n        for(i = 0; i < keys.length; i++) {\n          re = re.split(keys[i]).join('${' + i + '}');\n        }\n        // Replace abstracted values\n        for(i = 0; i < keys.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[keys[i]] + ')');\n        }\n        format = escapeReservedSymbols(format);\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n"],"sourceRoot":"/source/"}