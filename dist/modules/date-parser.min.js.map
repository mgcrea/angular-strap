{"version":3,"sources":["modules/date-parser.js"],"names":["angular","this","seconds","provider","$localeProvider","milliseconds","year","ParseDate","prototype","hours","value","noop","array","toLowerCase","isNaN","i","indexOfCaseInsensitive","defaults","len","length","str","toString","format","strict","DateParserFactory","minutes","day","month","getFullYear","getHours","getMilliseconds","getMonth","Date","getMinutes","proto","isNumeric","toDate","$dateParser","regExpMap","sss","$get","options","$locale","dateFilter","mm","config","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","split","dateRegexParts","forEach","escapeReservedSymbols","text","join","replace","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","init","setFnMap","setMap","m","extend","HH","H","hh","h","a","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","ss","setSeconds","s","setMinutes","setHours","setDate","setMonth","match","setFullYear","regex","$format","regExpForFormat","test","baseDate","formatRegex","formatSetMap","matches","date","getTime","timezone","newDate","parseInt","fromDate","call","getDate","today","getDateForAttribute","key","isString","substr","getTimeForAttribute","time","daylightSavingAdjust","Infinity","parse","timezoneOffsetAdjust","undo","getTimezoneOffset"],"mappings":"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","file":"modules/date-parser.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n"],"sourceRoot":"/source/"}