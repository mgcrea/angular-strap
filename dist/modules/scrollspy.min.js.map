{"version":3,"sources":["modules/scrollspy.js"],"names":["angular","$get","$document","$rootScope","dimensions","spies","windowEl","defaults","debounce","bodyEl","throttle","nodeName","offset","this","ScrollSpyFactory","config","scrollEl","isWindowSpy","scrollId","element","options","id","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","scrollTop","link","checkPositionWithEventLoop","on","checkOffsets","$on","off","checkPosition","i","isUndefined","prop","docEl","target","$activateElement","length","offsetTop","setTimeout","activeElement","source","$getTrackedElement","addClass","removeClass","parent","filter","targetElement","document","querySelector","trackedElement","el","forEach","b","top","trackElement","push","toDelete","untrackElement","splice","activate","directive","restrict","init","extend","body","scope","key","scrollspy","destroy","compile","childEl","attr","children","querySelectorAll","child"],"mappings":"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","file":"modules/scrollspy.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName(element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory(config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements = trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink(scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink(element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n"],"sourceRoot":"/source/"}