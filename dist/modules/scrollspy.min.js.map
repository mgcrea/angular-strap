{"version":3,"sources":["scrollspy/scrollspy.js"],"names":[],"mappings":"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","file":"scrollspy.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function() {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName(element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory(config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if(!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if(spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded, unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        var viewportHeight;\n        var scrollTop;\n\n        $scrollspy.init = function() {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if(scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function() {\n\n          // Check internal ref counter\n          this.$$count--;\n          if(this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function() {\n\n          // Not ready yet\n          if(!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if(scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if(angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if(activeTarget === sortedElements[i].target) continue;\n            if(scrollTop < sortedElements[i].offsetTop) continue;\n            if(sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function() {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function(element) {\n          if(activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if(activeElement) {\n              activeElement.source.removeClass('active');\n              if(nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if(nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function(target) {\n          return trackedElements.filter(function(obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function() {\n\n          angular.forEach(trackedElements, function(trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if(options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function(el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function(a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function(target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function(target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if(trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements = trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function(i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink(scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function() {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink(element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function(child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n"],"sourceRoot":"/source/"}