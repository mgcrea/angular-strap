{"version":3,"sources":["modules/alert.js"],"names":["angular","container","provider","element","this","defaults","backdrop","keyboard","show","duration","type","dismissable","$get","AlertFactory","$alert","options","$scope","config","extend","$timeout","hide","scope","directive","restrict","link","isDefined","key","falseValueRegExp","forEach","bsKey","charAt","toUpperCase","slice","attr","test","title","$eval","hasOwnProperty","$watch","isObject","newValue","oldValue","bsAlert","alert","trigger","destroy","on","toggle","$on"],"mappings":"AAOA,YAEAA,SAOMC,OAAW,wBAAA,yBAAAC,SAAA,SAAA,WANf,GAOIC,GAASC,KAAAC,UACTC,UAAU,UACVC,YAAU,QACVC,YAAM,QAENC,UAAU,KACVC,YAAM,uBACNC,WAAAA,EAPFR,QAAS,KAUTC,UAAKQ,EAEHL,UAASM,EATXL,MAWQM,EAVRL,UAaQM,EAZRL,MAcII,EAbJH,aAgBWK,EAdbZ,MAAKQ,MAgBUI,SAAON,WAAeA,SAAAA,EAAAA,GAfnC,QAASG,GAAaI,GAmBlB,GAAIT,MACAO,EAAQN,QAAUS,UAAAb,EAAAY,EAjBxBH,GAkBWN,EAAOO,GAjBlBD,EAkBMN,OAAAA,cAAAA,EAAAA,YACAW,EAAAA,OAjBJL,EAkBMA,OAAOM,KAAAA,EAAAA,KAhBf,IAAIZ,GAAOM,EAAON,IAmClBa,OAlCIN,GAAQN,WAoBVK,EAAOA,KAAAA,WAlBLN,IAsBJW,EAAON,WApBDC,EAAOM,QA0BN,IAAAL,EAAAN,YAIAK,EAxBT,MA4BQC,OA1BTO,UA0BkCnB,WAASA,UAAAA,OAAAA,SAAAA,SAAAA,EAAAA,EAAAA,GAzB5C,OACEoB,SAAU,MACVF,OAwBIrB,EAvBJwB,KAwBM,SAAYC,EAAeC,EAAOX,EAAQW,GAvB9C,GAAIX,IA2BFM,MAAIM,EACJ3B,QAAQ4B,EACNpB,MAAIR,EAINA,SAAQ4B,SAAS,WAAA,cAA0B,aAAA,eAA2B,YAAUF,WAAAA,OAAAA,YAAAA,YAAAA,WAAAA,eAAAA,SAAAA,GAC1EG,QAAQJ,UAAOC,EAAII,MAAUC,EAAAA,GAAgBL,EAAIM,KA1BzD,IA4BMjB,GAAeM,eA3BrBrB,SAAQ4B,SAAU,WAAY,OAAQ,YAAa,eAAiB,SAASF,GACvE1B,QAAQyB,UAAUQ,EAAKP,KAASC,EAAiBO,KAAKD,EAAKP,MAAOX,EAAQW,IAAO,KAEvF1B,QA+BUmC,SAAQ,eAAA,SAAA,eAAA,UAAA,SAAAT,GA9BhB,GAAIG,GAAQ,KAAOH,EAAII,OAAO,GAAGC,cAAgBL,EAAIM,MAAM,EAkC3DhC,SAAQ4B,UAASK,EAASJ,MACxBd,EAASW,GAAML,EAAAe,MAAAH,EAAAJ,OA9BdR,EAAMgB,eAAe,WACxBhB,EAAMc,MAAQ,IAqCdnC,QAAIiC,SAAc,QAAA,UAAA,QAAA,SAAAP,GAChBL,EAAMiB,IACJL,EAAIjC,SAAQuC,EAAAA,SAASC,EAAWC,GAC9BzC,EAAAA,GAAQkB,EAAOG,YAAOmB,OA/B1BP,EAmCGS,SAlCLrB,EAAMiB,OAAOL,EAAKS,QAAS,SAASF,EAAUC,GAsC1CE,QAAQ7B,SAAOC,GAGnBZ,QAAW8B,OAAKW,EAAWJ,GAIrBG,EAAAA,QAAaE,IAEjBF,EAvCJ,IAAIA,GAAQ7B,EAAOC,EACnBZ,GAAQ2C,GAAGb,EAAKW,SAAW,QAASD,EAAMI,QAC1C1B,EAAM2B,IAAI,WAAY,WAChBL,GAAOA,EAAME,UACjB9B,EAAU,KACV4B,EAAQ","file":"modules/alert.min.js","sourcesContent":["'use strict';\n\n// @BUG: following snippet won't compile correctly\n// @TODO: submit issue to core\n// '<span ng-if=\"title\"><strong ng-bind=\"title\"></strong>&nbsp;</span><span ng-bind-html=\"content\"></span>' +\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}