{"version":3,"sources":["modal/modal.js"],"names":[],"mappings":"qBASM,OAAA,wBAAA,+CAEA,SAAA,cAEA,GAAA,KAAA,UACA,UAAA,UACA,kBAAA,UACA,YAAA,QACA,YAAA,QACA,UAAA,MACA,SAAA,uBACF,iBAAA,eAEA,QAAA,iBAEE,UAAA,EACA,MAAA,EACA,MAAA,4JAWE,GAAA,WAkJI,KACF,EAAA,MAAA,EAAA,YAAA,QAAA,gBA8BF,EAAA,MAAA,EAAA,YAAA,QAAA,wCAEE,EAAA,6DA4BJ,QAAA,GAAA,gCAEA,WAAA,EAAA,SAAA,EAAA,QAAA,EAAA,WA/MI,MAGF,EAAA,EAAA,SAAA,QAAA,UAAA,EAAA,EACA,GAAA,SAAA,EAAA,EAAA,aACE,GAAA,EAAA,OAAA,EAAA,OAAA,EAAA,MAAA,QAAA,EAAA,MACF,GAAA,SAAA,EAAA,mCAKI,QAAA,WAAA,SAAA,GACF,EAAA,KAAA,EAAA,GAAA,EAAA,YAAA,EAAA,SAIE,MAAA,WACF,EAAA,aAAA,WACF,EAAA,YAGI,MAAA,WACF,EAAA,aAAA,WACF,EAAA,UAGA,EAAA,QAAA,WACE,EAAA,aAAA,WACE,EAAA,cAKE,oBACA,SAAA,EAAA,SAAA,KAAA,SAAA,GACF,GAAA,GAAA,QAAA,QAAA,EACF,OAAA,GAAA,EAAA,iBACF,KAAA,SAAA,oEAIA,OADA,GAAA,UAAA,EAAA,OAAA,SACA,EAAA,GAAA,kBAME,GAAA,EACF,EAAA,QAAA,QAAA,eAAA,EAAA,YAAA,eAkKA,oCAhKA,QAAA,SAAA,KAAA,EAAA,EAAA,gDAEE,EAAA,EAAA,MAAA,GACA,EAAA,EAAA,KACE,WAGF,KAAA,mBAIF,EAAA,aAAA,yBAOE,QAAA,WAGA,eAEA,EAAA,UAGF,EAAA,mBAKI,cAIA,KAAA,eAEA,EAAA,MAAA,EAAA,YAAA,eAAA,GAAA,uBAKF,GADA,QAAA,UAAA,EAAA,WACA,EAAA,UAEA,EAAA,UAAA,EAAA,EAAA,WAAA,wCAKE,EAAA,SAAA,EAAA,EAAA,gBAGA,KAAA,QAAA,UAAA,SAAA,EAAA,WAGF,EAAA,YACE,EAAA,UACF,EAAA,SAAA,EAAA,mBAEA,EAAA,SAAA,EAAA,wBAIA,EAAA,MAAA,EAAA,EAAA,KAIA,IAAA,GAAA,EAAA,MAAA,EAAA,EAAA,EAAA,EACA,IAAA,EAAA,MAAA,EAAA,KAAA,GAEA,EAAA,UAAA,sDAIE,GAAA,EAAA,EACF,GAAA,yBAIE,SAAA,EAAA,YAAA,SACA,EAAA,WACF,EAAA,SAAA,EAAA,YAAA,SAAA,EAAA,WAIF,EAAA,2BAEA,EAAA,GAAA,QAAA,IAEA,EAAA,uCASE,KAAA,yEAKA,GAAA,GAAA,EAAA,MAAA,EAAA,wBAKA,EAAA,UACE,EAAA,MAAA,GAEF,EAAA,UAAA,EACA,EAAA,SAAA,EAAA,OAAA,EAAA,MAAA,SAAA,EAAA,UAGF,EAAA,4BAEA,EAAA,IAAA,QAAA,IAEE,EAAA,UACA,EAAA,IAAA,QAAA,EAAA,cAYA,OAAA,4DAOA,EAAA,GAAA,SAKF,EAAA,SAAA,SAAA,GAEA,KAAA,EAAA,OAAA,EAAA,oBAEA,EAAA,oBAYA,UAME,GAAA,EAAA,SACE,SAAA,SAAA,GAAA,UAAA,iBAAA,YAGF,GAAA,GACF,MAAA,GAAA,KAAA,EAAA,IAAA,IAAA,EAAA,IAAA,IACF,KAAA,SAAA,+BAEA,EAAA,IAAA,EAAA,EAAA,wCAvOE,EAAA,OAAA,UAAA,6CAEA,EAAA,QAAA,QAAA,EAAA,SAAA,MACA,EAAA,qCAiPA,WAAA,UAAA,OAAA,SAAA,SAAA,EAAA,EAAA,mBAGE,aACF,0BAIE,IAAA,MAAA,EAAA,QAAA,EAAA,MAAA,WACE,SAAA,WAAA,kBAAA,YAAA,WAAA,WAAA,OAAA,YAAA,aAAA,SAAA,GACF,QAAA,UAAA,EAAA,MAAA,EAAA,GAAA,EAAA,MAIF,QAAA,SAAA,QAAA,WAAA,SAAA,GACE,EAAA,IAAA,EAAA,SAAA,EAAA,SAAA,GACE,EAAA,GAAA,EAAA,YAAA,iDAMJ,QAAA,SAAA,GACA,QAAA,OAAA,EAAA,GAEA,EAAA,QAAA,UAKE,GAAA,EAAA,EAGF,GAAA,GAAA,EAAA,SAAA,QAAA,EAAA,QAGJ,EAAA,IAAA,WAAA,0BAED,EAAA","file":"modal.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$modal', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      backdropAnimation: 'am-fade',\r\n      prefixClass: 'modal',\r\n      prefixEvent: 'modal',\r\n      placement: 'top',\r\n      template: 'modal/modal.tpl.html',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = function($window, $rootScope, $compile, $q, $templateCache, $http, $animate, $timeout, $sce, dimensions) {\r\n\r\n      var forEach = angular.forEach;\r\n      var trim = String.prototype.trim;\r\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n      var bodyElement = angular.element($window.document.body);\r\n      var htmlReplaceRegExp = /ng-bind=\"/ig;\r\n\r\n      function ModalFactory(config) {\r\n\r\n        var $modal = {};\r\n\r\n        // Common vars\r\n        var options = $modal.$options = angular.extend({}, defaults, config);\r\n        $modal.$promise = fetchTemplate(options.template);\r\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n        if(!options.element && !options.container) {\r\n          options.container = 'body';\r\n        }\r\n\r\n        // Support scope as string options\r\n        forEach(['title', 'content'], function(key) {\r\n          if(options[key]) scope[key] = $sce.trustAsHtml(options[key]);\r\n        });\r\n\r\n        // Provide scope helpers\r\n        scope.$hide = function() {\r\n          scope.$$postDigest(function() {\r\n            $modal.hide();\r\n          });\r\n        };\r\n        scope.$show = function() {\r\n          scope.$$postDigest(function() {\r\n            $modal.show();\r\n          });\r\n        };\r\n        scope.$toggle = function() {\r\n          scope.$$postDigest(function() {\r\n            $modal.toggle();\r\n          });\r\n        };\r\n\r\n        // Support contentTemplate option\r\n        if(options.contentTemplate) {\r\n          $modal.$promise = $modal.$promise.then(function(template) {\r\n            var templateEl = angular.element(template);\r\n            return fetchTemplate(options.contentTemplate)\r\n            .then(function(contentTemplate) {\r\n              var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0]).removeAttr('ng-bind').html(contentTemplate);\r\n              // Drop the default footer as you probably don't want it if you use a custom contentTemplate\r\n              if(!config.template) contentEl.next().remove();\r\n              return templateEl[0].outerHTML;\r\n            });\r\n          });\r\n        }\r\n\r\n        // Fetch, compile then initialize modal\r\n        var modalLinker, modalElement;\r\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\r\n        $modal.$promise.then(function(template) {\r\n          if(angular.isObject(template)) template = template.data;\r\n          if(options.html) template = template.replace(htmlReplaceRegExp, 'ng-bind-html=\"');\r\n          template = trim.apply(template);\r\n          modalLinker = $compile(template);\r\n          $modal.init();\r\n        });\r\n\r\n        $modal.init = function() {\r\n\r\n          // Options: show\r\n          if(options.show) {\r\n            scope.$$postDigest(function() {\r\n              $modal.show();\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $modal.destroy = function() {\r\n\r\n          // Remove element\r\n          if(modalElement) {\r\n            modalElement.remove();\r\n            modalElement = null;\r\n          }\r\n          if(backdropElement) {\r\n            backdropElement.remove();\r\n            backdropElement = null;\r\n          }\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n\r\n        };\r\n\r\n        $modal.show = function() {\r\n\r\n          if(scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n          var parent;\r\n          if(angular.isElement(options.container)) {\r\n            parent = options.container;\r\n          } else {\r\n            parent = options.container ? findElement(options.container) : null;\r\n          }\r\n          var after = options.container ? null : options.element;\r\n\r\n          // Fetch a cloned element linked from template\r\n          modalElement = $modal.$element = modalLinker(scope, function(clonedElement, scope) {});\r\n\r\n          // Set the initial positioning.\r\n          modalElement.css({display: 'block'}).addClass(options.placement);\r\n\r\n          // Options: animation\r\n          if(options.animation) {\r\n            if(options.backdrop) {\r\n              backdropElement.addClass(options.backdropAnimation);\r\n            }\r\n            modalElement.addClass(options.animation);\r\n          }\r\n\r\n          if(options.backdrop) {\r\n            $animate.enter(backdropElement, bodyElement, null);\r\n          }\r\n          // Support v1.3+ $animate\r\n          // https://github.com/angular/angular.js/commit/bf0f5502b1bbfddc5cdd2f138efd9188b8c652a9\r\n          var promise = $animate.enter(modalElement, parent, after, enterAnimateCallback);\r\n          if(promise && promise.then) promise.then(enterAnimateCallback);\r\n\r\n          scope.$isShown = true;\r\n          scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n          // Focus once the enter-animation has started\r\n          // Weird PhantomJS bug hack\r\n          var el = modalElement[0];\r\n          requestAnimationFrame(function() {\r\n            el.focus();\r\n          });\r\n\r\n          bodyElement.addClass(options.prefixClass + '-open');\r\n          if(options.animation) {\r\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n\r\n          // Bind events\r\n          if(options.backdrop) {\r\n            modalElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('click', hideOnBackdropClick);\r\n          }\r\n          if(options.keyboard) {\r\n            modalElement.on('keyup', $modal.$onKeyUp);\r\n          }\r\n        };\r\n\r\n        function enterAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.show', $modal);\r\n        }\r\n\r\n        $modal.hide = function() {\r\n\r\n          if(scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n          var promise = $animate.leave(modalElement, leaveAnimateCallback);\r\n          // Support v1.3+ $animate\r\n          // https://github.com/angular/angular.js/commit/bf0f5502b1bbfddc5cdd2f138efd9188b8c652a9\r\n          if(promise && promise.then) promise.then(leaveAnimateCallback);\r\n\r\n          if(options.backdrop) {\r\n            $animate.leave(backdropElement);\r\n          }\r\n          scope.$isShown = false;\r\n          scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n\r\n          // Unbind events\r\n          if(options.backdrop) {\r\n            modalElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('click', hideOnBackdropClick);\r\n          }\r\n          if(options.keyboard) {\r\n            modalElement.off('keyup', $modal.$onKeyUp);\r\n          }\r\n        };\r\n\r\n        function leaveAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.hide', $modal);\r\n          bodyElement.removeClass(options.prefixClass + '-open');\r\n          if(options.animation) {\r\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n        }\r\n\r\n        $modal.toggle = function() {\r\n\r\n          scope.$isShown ? $modal.hide() : $modal.show();\r\n\r\n        };\r\n\r\n        $modal.focus = function() {\r\n          modalElement[0].focus();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $modal.$onKeyUp = function(evt) {\r\n\r\n          if (evt.which === 27 && scope.$isShown) {\r\n            $modal.hide();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function hideOnBackdropClick(evt) {\r\n          if(evt.target !== evt.currentTarget) return;\r\n          options.backdrop === 'static' ? $modal.focus() : $modal.hide();\r\n        }\r\n\r\n        return $modal;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function findElement(query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      function fetchTemplate(template) {\r\n        return $q.when($templateCache.get(template) || $http.get(template))\r\n        .then(function(res) {\r\n          if(angular.isObject(res)) {\r\n            $templateCache.put(template, res.data);\r\n            return res.data;\r\n          }\r\n          return res;\r\n        });\r\n      }\r\n\r\n      return ModalFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsModal', function($window, $sce, $modal) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function(key) {\r\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\r\n            scope[key] = $sce.trustAsHtml(newValue);\r\n          });\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsModal && scope.$watch(attr.bsModal, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.content = newValue;\r\n          }\r\n        }, true);\r\n\r\n        // Initialize modal\r\n        var modal = $modal(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', modal.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (modal) modal.destroy();\r\n          options = null;\r\n          modal = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}