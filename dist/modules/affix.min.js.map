{"version":3,"sources":["affix/affix.js"],"names":[],"mappings":"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","file":"affix.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function() {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true\n    };\n\n    this.$get = function($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory(element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom',\n            setWidth = false,\n            initialAffixTop = 0,\n            initialOffsetTop = 0,\n            offsetTop = 0,\n            offsetBottom = 0,\n            affixed = null,\n            unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          }\n          else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function() {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function() {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function() {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function() {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if(affixed === affix) return;\n          affixed = affix;\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n          if(affix === 'top') {\n            unpin = null;\n            if(setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if(affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            }\n            else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if(setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if(setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n        };\n\n        $affix.$onResize = function() {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function() {\n          var initialPosition = element.css('position');\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles){\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n          }\n\n          if(options.offsetTop) {\n            if(options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if(options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if(options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              }\n              else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            }\n            else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if(options.offsetBottom) {\n            if(options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            }\n            else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles){\n            element.css('position', initialPosition);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass(unpin, position, elementHeight) {\n\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if(scrollTop <= offsetTop) {\n            return 'top';\n          } else if(unpin !== null && (scrollTop + unpin <= position.top)) {\n            return 'middle';\n          } else if(offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          } else {\n            return 'middle';\n          }\n\n        }\n\n        function getScrollTop() {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight() {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function($affix, $window) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink(scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function(key) {\n          if(angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix = $affix(element, options);\n        scope.$on('$destroy', function() {\n          affix && affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function() {\n    return {\n      controller: function($element) {\n        this.$element = $element;\n      }\n    };\n  });\n"],"sourceRoot":"/source/"}