{"version":3,"sources":["modules/affix.js"],"names":["angular","bodyEl","document","body","defaults","windowEl","offsetTop","AffixFactory","inlineStyles","$affix","setWidth","options","this","$get","reset","$window","debounce","dimensions","initialOffsetTop","config","getRequiredAffixClass","_unpin","position","top","scrollTop","getScrollTop","scrollHeight","getScrollHeight","targetEl","pageYOffset","offsetBottom","elementHeight","initialAffixTop","directive","$timeout","extend","affixed","target","unpin","parent","element","offsetParent","i","match","init","$parseOffsets","on","checkPosition","require","checkPositionWithEventLoop","offset","destroy","style","width","off","affix","setTimeout","height","css","offsetUnpin","offsetHeight","removeClass","addClass","offsetWidth","$onResize","initialTop","$debouncedOnResize","initialPosition","restrict","affixTarget","$element","forEach","link","key","scope","option","attr","test","controller"],"mappings":"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","file":"modules/affix.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n"],"sourceRoot":"/source/"}