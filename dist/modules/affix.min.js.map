{"version":3,"file":"affix.min.js","sources":["affix\\affix.js"],"names":["angular","module","provider","defaults","this","offsetTop","$get","$window","debounce","dimensions","AffixFactory","element","config","getRequiredAffixClass","unpin","position","elementHeight","scrollTop","getScrollTop","scrollHeight","getScrollHeight","top","offsetBottom","initialAffixTop","targetEl","pageYOffset","document","body","$affix","options","extend","target","reset","initialOffsetTop","affixed","parent","offsetParent","match","i","init","$parseOffsets","offset","on","checkPosition","checkPositionWithEventLoop","windowEl","$debouncedOnResize","destroy","off","setTimeout","height","affix","removeClass","addClass","css","offsetUnpin","bodyEl","offsetHeight","$onResize","directive","restrict","require","link","scope","attr","affixTarget","$element","forEach","key","isDefined","$on","controller"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\r\n\r\n  .provider('$affix', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      offsetTop: 'auto'\r\n    };\r\n\r\n    this.$get = function($window, debounce, dimensions) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var windowEl = angular.element($window);\r\n\r\n      function AffixFactory(element, config) {\r\n\r\n        var $affix = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var targetEl = options.target;\r\n\r\n        // Initial private vars\r\n        var reset = 'affix affix-top affix-bottom',\r\n            initialAffixTop = 0,\r\n            initialOffsetTop = 0,\r\n            offsetTop = 0,\r\n            offsetBottom = 0,\r\n            affixed = null,\r\n            unpin = null;\r\n\r\n        var parent = element.parent();\r\n        // Options: custom parent\r\n        if (options.offsetParent) {\r\n          if (options.offsetParent.match(/^\\d+$/)) {\r\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\r\n              parent = parent.parent();\r\n            }\r\n          }\r\n          else {\r\n            parent = angular.element(options.offsetParent);\r\n          }\r\n        }\r\n\r\n        $affix.init = function() {\r\n\r\n          $affix.$parseOffsets();\r\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\r\n\r\n          // Bind events\r\n          targetEl.on('scroll', $affix.checkPosition);\r\n          targetEl.on('click', $affix.checkPositionWithEventLoop);\r\n          windowEl.on('resize', $affix.$debouncedOnResize);\r\n\r\n          // Both of these checkPosition() calls are necessary for the case where\r\n          // the user hits refresh after scrolling to the bottom of the page.\r\n          $affix.checkPosition();\r\n          $affix.checkPositionWithEventLoop();\r\n\r\n        };\r\n\r\n        $affix.destroy = function() {\r\n\r\n          // Unbind events\r\n          targetEl.off('scroll', $affix.checkPosition);\r\n          targetEl.off('click', $affix.checkPositionWithEventLoop);\r\n          windowEl.off('resize', $affix.$debouncedOnResize);\r\n\r\n        };\r\n\r\n        $affix.checkPositionWithEventLoop = function() {\r\n\r\n          setTimeout($affix.checkPosition, 1);\r\n\r\n        };\r\n\r\n        $affix.checkPosition = function() {\r\n          // if (!this.$element.is(':visible')) return\r\n\r\n          var scrollTop = getScrollTop();\r\n          var position = dimensions.offset(element[0]);\r\n          var elementHeight = dimensions.height(element[0]);\r\n\r\n          // Get required affix class according to position\r\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\r\n\r\n          // Did affix status changed this last check?\r\n          if(affixed === affix) return;\r\n          affixed = affix;\r\n\r\n          // Add proper affix class\r\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\r\n\r\n          if(affix === 'top') {\r\n            unpin = null;\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n            element.css('top', '');\r\n          } else if(affix === 'bottom') {\r\n            if (options.offsetUnpin) {\r\n              unpin = -(options.offsetUnpin * 1);\r\n            }\r\n            else {\r\n              // Calculate unpin threshold when affixed to bottom.\r\n              // Hopefully the browser scrolls pixel by pixel.\r\n              unpin = position.top - scrollTop;\r\n            }\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n            element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\r\n          } else { // affix === 'middle'\r\n            unpin = null;\r\n            element.css('position', 'fixed');\r\n            element.css('top', initialAffixTop + 'px');\r\n          }\r\n\r\n        };\r\n\r\n        $affix.$onResize = function() {\r\n          $affix.$parseOffsets();\r\n          $affix.checkPosition();\r\n        };\r\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\r\n\r\n        $affix.$parseOffsets = function() {\r\n\r\n          // Reset position to calculate correct offsetTop\r\n          element.css('position', (options.offsetParent) ? '' : 'relative');\r\n\r\n          if(options.offsetTop) {\r\n            if(options.offsetTop === 'auto') {\r\n              options.offsetTop = '+0';\r\n            }\r\n            if(options.offsetTop.match(/^[-+]\\d+$/)) {\r\n              initialAffixTop = - options.offsetTop * 1;\r\n              if(options.offsetParent) {\r\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\r\n              }\r\n              else {\r\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\r\n              }\r\n            }\r\n            else {\r\n              offsetTop = options.offsetTop * 1;\r\n            }\r\n          }\r\n\r\n          if(options.offsetBottom) {\r\n            if(options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\r\n              // add 1 pixel due to rounding problems...\r\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\r\n            }\r\n            else {\r\n              offsetBottom = options.offsetBottom * 1;\r\n            }\r\n          }\r\n\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function getRequiredAffixClass(unpin, position, elementHeight) {\r\n\r\n          var scrollTop = getScrollTop();\r\n          var scrollHeight = getScrollHeight();\r\n\r\n          if(scrollTop <= offsetTop) {\r\n            return 'top';\r\n          } else if(unpin !== null && (scrollTop + unpin <= position.top)) {\r\n            return 'middle';\r\n          } else if(offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\r\n            return 'bottom';\r\n          } else {\r\n            return 'middle';\r\n          }\r\n\r\n        }\r\n\r\n        function getScrollTop() {\r\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0] === $window;\r\n        }\r\n\r\n        function getScrollHeight() {\r\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\r\n        }\r\n\r\n        $affix.init();\r\n        return $affix;\r\n\r\n      }\r\n\r\n      return AffixFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffix', function($affix, $window) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: '^?bsAffixTarget',\r\n      link: function postLink(scope, element, attr, affixTarget) {\r\n\r\n        var options = {scope: scope, offsetTop: 'auto', target: affixTarget ? affixTarget.$element : angular.element($window)};\r\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        var affix = $affix(element, options);\r\n        scope.$on('$destroy', function() {\r\n          options = null;\r\n          affix = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffixTarget', function() {\r\n    return {\r\n      controller: function($element) {\r\n        this.$element = $element;\r\n      }\r\n    };\r\n  });\r\n"],"sourceRoot":"/source/"}