{"version":3,"sources":["modules/tooltip.js"],"names":["angular","target","provider","placement","this","defaults","templateUrl","template","contentTemplate","trigger","keyboard","html","show","title","type","delay","autoClose","bsEnabled","viewport","selector","padding","$get","isTouch","TooltipFactory","$tooltip","scope","$scope","options","$rootScope","$new","split","enterAnimateCallback","$emit","prefixEvent","leaveAnimateCallback","_tipToHide","$isShown","leave","element","triggers","nodeName","on","toggle","enter","unbindTriggerEvents","length","$onFocusElementMouseDown","off","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$timeout","$body","hide","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","$element","elRect","getBoundingClientRect","rect","p","width","height","top","left","extend","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","scrollTop","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","test","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","findElement","$arrow","clearTimeout","timeout","tipScope","$destroy","$$phase","$options","config","$promise","$bsCompiler","compile","toLowerCase","$id","attr","map","parseFloat","$sce","trustAsHtml","$setEnabled","$$postDigest","id","$hide","setEnabled","isEnabled","hoverState","compileData","promise","then","data","tipContainer","init","container","bindTriggerEvents","isElement","destroy","focus","destroyTipElement","parent","after","lastChild","display","visibility","link","clonedElement","animation","addClass","prefixClass","safeDigest","version","prepend","$$rAF","$applyPlacement","$animate","_blur","blur","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","replace","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","evt","stopPropagation","preventDefault","forEach","directive","$root","$digest","restrict","query","querySelectorAll","isString","tooltip","transclusion","falseValueRegExp","key","isDefined","dataTarget","hasOwnProperty","oldValue","$observe","newValue","bsTooltip","$watch","isObject","bsShow","match","setViewport","$on"],"mappings":"AAOA,YAEAA,SAGMC,OAAQ,0BAAA,sBAAA,sCAAAC,SAAA,WAAA,WAFZ,GAGIC,GAAWC,KAAAC,UACXC,UAAAA,UACAC,YAAU,GACVC,YAAAA,UACAC,YAAS,UACTC,WAAU,EACVC,QAAM,EACNC,UAAM,MACNC,YAAO,2BACPC,SAAM,GACNC,iBAAO,EACPC,QAAAA,cACAC,UAAAA,EACAC,MAAAA,EAFFN,MAGIO,EAFJN,MAGIO,GAFJN,KAAM,GACNC,MAAO,EAKPX,WAAKiB,EAEHJ,WAAIK,EACJJ,UAEAC,SAASI,OAEPH,QAAII,GAJVpB,MASMiB,MAAII,UAAiBC,aAASC,cAAiBA,KAAQF,iBAAgBG,QAAWC,WAAAA,OAAAA,aAAAA,QAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GANtF,QAUUC,GAAgBf,EAAMe,GA2I9B,QA0EMC,KAzEJN,EAAMO,MAAML,EAAQM,YAAc,QAAST,GAmC7C,QAASU,KAmGPV,GAlGAC,EAAMO,MAAML,EAAQM,YAAc,QAAST,GAkG3CA,IAAkBW,EAAA,CAChB,GAAIX,GAAmB,UAAVY,EAAU3B,QACrBe,MAASa,GAAAA,GAAAA,MAETb,MA1BN,QA+HQc,KA9HN,GA+HMC,GAAIC,EAAa/B,QAAAqB,MAAYrB,IA9HnCT,SA+HQsC,QAAQG,EAAGnB,SAAUb,GA9HX,UAAZA,EACF6B,EAAQG,GAAG,QAASjB,EAASkB,QACR,WAAZjC,IACT6B,EAAQG,GAAe,UAAZhC,EAAsB,aAAe,QAASe,EAASmB,OAiItEL,EAASM,GAAAA,UAAAA,EAAAA,aAAAA,OAAAA,EAAAA,OACQjB,WAAXY,GAAiC,UAANT,GAC1BQ,EAAQC,GAAAA,EAASM,aAAc,YAAArB,EAAAsB,6BA3HxC,QAgIQR,KA9HN,IAgIM,GADAA,GAAQS,EAAItC,QAAYqB,MAAA,KACpBU,EAAAA,EAAaK,OAAAG,KAAYvC,CA/HjC,GAgIM6B,GAAQS,EAAIzB,EA/HF,WAAZb,EACF6B,EAAQS,IAAI,QAASvB,EAASkB,QACT,WAAZjC,IACT6B,EAAQS,IAAgB,UAAZtC,EAAsB,aAAe,QAASe,EAASmB,OAkIvEL,EAASW,IAAAA,UAAAA,EAAAA,aAAAA,OAAAA,EAAAA,OACKxC,WAARkB,GAA6B,UAAAlB,GAC/ByC,EAAWT,IAAGnB,EAASE,aAAS2B,YAAAA,EAAAA,4BAMpC,QAASC,KACiB,UAApBzB,EAAQlB,QACVyC,EAAWH,GAAAA,QAAIvB,EAASA,UAExBc,EAAQS,GAAAA,QAAIvB,EAASA,eAIzB,QAAI6B,KACKC,UAAT3B,EAAS2B,QAGPC,EAASR,IAAA,QAAAvB,EAAA2B,UAKPK,EAAMf,IAAG,QAASjB,EAASiC,eAM/B,QAASC,KACPH,EAAIF,WACFH,EAAWH,GAAAA,QAAIY,GACfH,EAAMT,GAAAA,QAAIvB,EAASA,MACnB6B,GAAyB,GAzI1B,GAAG,GA6IN,QAASM,KACPC,IA1IAV,EAAWH,IAAI,QAASY,GA+I1BH,EAASK,IAAAA,QAAYC,EAAAA,MACnBA,GAAwBnC,GA3I5B,QAgJQoC,GAAYC,GAChBJ,EAAIK,kBA9IR,QAqJWC,GAAYA,GApJrBJ,EAAWA,GAAanC,EAAQ1B,QAAUqC,CAwJxC,IAAI2B,GAAKE,EAAAA,GAEPF,EAA0BA,SAAnBjE,EAAAA,QAA0BmE,EAAOJ,EAAAA,wBAA4BK,IArJxE,KAAK,GAAIF,KAAKH,GACZE,EAAKC,GAAKH,EAAOG,EAsJa,QAALG,EAAKF,QAAGG,EAAMtE,QAAAuE,UAAAN,GAAKO,MAAAA,EAAWC,MAAOC,EAAAA,KAC1DC,OAAAA,EAAAA,OAAAA,EAAAA,MACJ,IAAIC,GAAAA,GAAsBT,IAAAA,EAA6CC,KAAAA,GAA+BI,EAAAC,OAAAC,GAEtGC,GA7IAA,OAAQE,EAASC,SAASC,gBAAgBC,WAAaF,SAASG,KAAKD,UAAYlB,EAASoB,KAAK,cAAgB,GAiJ3GT,EAAAA,GACJN,MAAIrC,SAAQ3B,gBAAgBgF,YAE5Bf,OAAQtC,EAAMsD,aACZ,IA/IJ,OAgJMX,SAAAA,UAAAA,EAAAA,EAAAA,EAAAA,GA9IR,QAgJUH,GAAsBe,EAASlB,EAAAA,EAAAA,GA/IvC,GAAIM,GAiJE3C,EAAA3B,EAAA2B,MAAA,IA/IN,QAAQA,EAAM,IAgJV,IAAK,QACH2C,GACEJ,IAAKgB,EAAShB,IAAMgB,EAASjB,OAAAA,EAAAA,EAAAA,EAC7BE,KAAMe,EAASf,KAAOe,EAASlB,MAEjC,MACF,KAAK,SACHM,GACEJ,IAAKgB,EAAShB,IAAMgB,EAASjB,OAC7BE,KAAMe,EAASf,KAAOgB,EAAAA,MAAAA,EAAAA,EAAAA,EAExB,MACF,KAAA,OACEb,GACEJ,IAAKgB,EAAShB,IAAMkB,EAAAA,OAAAA,EAAAA,EAAAA,EACpBjB,KAAMe,EAASf,KAAOe,EAExB,MAGJ,SACEZ,GA7IAJ,IAAKgB,EAAShB,IAAMkB,EAiJlBzD,KAAMuD,EAAOf,KAASxC,EAAMqC,MAAO,EAAAmB,EAAU,GA5InD,IAgJQxD,EAAA,GA/IN,MAAO2C,EAET,IA+IeH,QAAPG,EAAAA,IAA8BY,WAAhBA,EAASf,GA9I7B,OA+IMxC,EAAA,IA9IL,IAAK,OA+IF2C,EAAAH,KAAAe,EAAAf,IACE,MA5IL,KA8IM,QACLG,EAAQ3C,KAAMuD,EAAAf,KAAAe,EAAAlB,MAAAmB,MAKVb,IAAaY,SAANhB,EAAMgB,IAAShB,UAAAA,EAAAA,GA5I5B,OA6IMvC,EAAA,IA5IL,IAAK,MA6IF2C,EAAAJ,IAAAgB,EAAAhB,IAAAkB,EAAAF,EAAAjB,MACE,MA1IL,KAAK,SA8INK,EAAOA,IAAAA,EAAAA,IAUP,MAAIe,GA9IR,QAkJQC,GAAMD,EAAaA,GAEvBf,GAAAA,GAAOJ,EAAaA,GACpBI,EAAOH,EAAOG,YAIdD,EAAWkB,EAAAA,aACTC,EAAOC,SAAUC,EAAAA,IAAAA,EAAAA,cAAAA,IACf3C,EAAW4C,SAAAA,EAAAA,IAAAA,EAAAA,eAAAA,GArJbL,OAsJIpB,KAAgBwB,EAAMxB,GArJ1BoB,MAsJInB,KAAiBuB,EAAMvB,GArJ/BG,EAsJQsB,IAAOtB,EAAAJ,IAAA2B,EArJfvB,EAAOH,KAAOG,EAAOH,KAAOkB,EAC5BhB,EAAWkB,UAAUO,EAAKjG,QAAQuE,QAChCoB,MAsJGlB,SAASoB,GAGRP,EAAAA,KACAC,IAAAA,KAAAA,MAAeU,EAAIC,KAAAA,KAEnB/F,KAAAA,KAAAA,MAAc0F,EAASN,MAAAA,KACzBd,MAAOJ,OAOTI,GAAY0B,EAEZ,IAAIC,GAAYH,EAAAI,YACd5B,EAAe2B,EAAM9B,YAKvBE,IAJO,QA9JLrE,GA8JKoF,IAAAnB,IACLK,EAAOJ,IAAAA,EAAaA,IAAAA,EAAAA,IAGtBG,8CAA0BC,KAAAA,GAA1BD,CAEA,GAAI4B,GAAAD,EAA6BhG,EAAYsE,EAAAa,EAAAC,EAU/C,IATIa,EAAIE,KACJ7B,EAAI8B,MAAAA,EAAaD,KAGjBE,EAAAA,KAAaD,EAAAA,IA/JjB/B,EAAWkB,UAAUO,EAAKxB,GAoK1B,wBAAS0B,KAAyBhG,GAAWkF,CAC3C,GAAIe,GAAAA,aAAAA,KAAAA,GAAS/B,EAAKiC,EAAA,EAAAF,EAAA9B,KAAAH,EAAAmB,EAAA,EAAAc,EAAA/B,IAAAD,EAAAmB,EAAGjB,EAAMgC,EAAA,cAAA,cAhK3BE,GAAaD,EAAYN,EAAIQ,GAAsBH,KAGvD,QAiKQI,GAAqB7C,EAAYrC,EAASmF,EAAAA,GAE9C,GAAIP,IACF/B,IAAIuC,EACJtC,KAAIuC,EAhKR,KAkKMT,EAAM/B,UAAMqC,MAAAA,EAjKlB,IAAII,GAkKWD,EAAAA,UAAmBH,EAAAA,SAAyBA,SAAAA,EACrDN,EAAYM,EAAmBrC,EAAMqC,UAjK3C,IAAI,aAAaK,KAAK5G,GAAY,CAChC,GAAIyG,GAkKGvB,EAAAhB,IAAAyC,EAAAJ,EAAA/B,OACDqC,EAAiB3B,EAASf,IAAOwC,EAAAA,EAAAA,OAAAA,CACjCG,GAAAA,EAAkCH,IACtCV,EAAIY,IAAAA,EAAiBN,IAAAA,EACbpC,EAAOoC,EAA0BM,IAAAA,EAAAA,SAjKzCZ,EAkKO/B,IAAI4C,EAAkBP,IAAAA,EAA0BtC,OAAAyC,OAhKpD,CACL,GAAIG,GAAiB3B,EAASf,KAAOwC,EAoKrCG,EAAOb,EAAAA,KAAAA,EAAAA,CAlKHY,GAAiBN,EAAmBpC,KAqK1C8B,EAASI,KAAAA,EAAoBU,KAAWC,EACzBC,EAAYV,EAAAX,QAEzBsB,EAAOvB,KAAIqB,EAAwB7C,KAAOoC,EAAkBQ,MAAAA,GAM5DI,MAAAA,GAtKJ,QAyKU3F,GAAQX,EAAWkG,EAAAC,GAxK3B,GAyKMzD,GAAAA,EAAAA,yBAAAA,EAAAA,GAxKN2D,GAAOvB,IAAIqB,EAAe,OAAS,MAAO,IAAM,EAAIf,EAAQc,GAAa,KAAKpB,IAAIqB,EAAe,MAAQ,OAAQ,IAEnH,QA0KQ/D,KAzKNkE,aAAaC,GACT/F,EAASY,UAA2B,OAAfc,IA4KnBsE,EAAUxG,WACZwG,IAzKE7F,EAAQjB,UA6KRwC,KAzKFsE,IACFA,EAASC,WA8KXD,EAAOhG,MAMT0B,IAEEzB,EAAMiG,SAjLJxE,EAAa1B,EAASsC,SAAW,MApfrC,GAUInC,MAAoCf,EAAMkB,EAAM6F,SAAA3H,QAAAuE,UAAAlE,EAAAuH,GAAInE,EAAM3B,EAAM+F,SAAAC,EAAAC,QAAApG,GAPhEF,EAO4ED,EAAAE,OAAAC,EAAAF,OAAAE,EAAAF,MAAAI,QAAAD,EAAAC,OAN5EW,EAAWF,EAAQ,GAAGE,SAASwF,aAYjCxG,IAAAA,EAASyG,OAAMtG,QAAcW,SAAQ4F,EAAKnH,OAAS,CAGnD,GAAIY,GAAQd,EAAOE,MAAAe,MAAA,KAAAqG,IAAAC,WACjB3G,GAAMZ,MAAQwH,EAAKC,OAAY3G,GAZ/Bf,KAAMkB,EAAM,GAgBdL,KAAM8G,EAAAA,IACJ9G,EAAM+G,GAbVhH,EAASyG,IAAMtG,EAAQ8G,IAAMnG,EAAQ4F,KAAK,OAAS,GAC/CvG,EAAQd,QAgBVY,EAAMiH,MAAQL,EAAAC,YAAA3G,EAAAd,QAbhBY,EAeMD,YAASiC,SAAAA,GAdbhC,EAAM+G,aAAa,WACjBhH,EAASmH,WAAWC,MAGxBnH,EAeMD,MAASZ,WAdba,EAAM+G,aAAa,WACjBhH,EAASiC,UAGbhC,EAeMD,MAASkB,WAdbjB,EAAM+G,aAAa,WACjBhH,EAASZ,UAqBXa,EAAIoH,QAAAA,WAGJpH,EAAIqH,aAAAA,WACA5F,EAAAA,YAGJ6F,EAAQC,SAAKvH,EAAUwH,UAAAA,CAnBzB,IAoBIH,GACAtH,EAnBAsH,EAsBFtH,EAGE0H,EACEvH,CAtBNoH,GAuBQnI,KAAMe,SAAQZ,GAtBpB+H,EAuBYnH,EAtBZH,EAAS2H,SAEX3H,EA8BQG,KAAQyH,WACVF,EAAAA,OAAe5G,QAAAA,SAAAA,EAAAA,SA7BjBX,EA8BOZ,OACLmI,KAAAA,EAAevH,MA7Bf8B,KA8BK9B,EAAIA,QAKX0H,SAAAA,EAAAA,UAGAH,EAAYjJ,EACFA,QAASD,UAAQsJ,EAAU3H,WAjCrCuH,EAAevH,EAAQyH,UAqCnBzH,EAAcyH,YAChB3H,EAAM+G,EAAa7G,EAAAyH,YAlCvBC,IACI1H,EAoCS1B,SAnCX0B,EAoCMH,OAASZ,QAAAA,UAAAA,EAAAA,QAAAA,EAAAA,OAAAA,EAAAA,EAAAA,SAlCbe,EAAQf,MACVa,EAAM+G,aAAa,WACO,UAApB7G,EAAQlB,QAuChBe,EAAS+H,GAAUC,QAMjBC,EAAAA,UArCJjI,EA+CIqH,QAAa,WACbjG,IA9CF6G,IACAhI,EAAMgG,YAERjG,EAgDUqH,MAAAA,WAKRrH,MApDA8F,cAgDavG,GA/Cb8H,EAAa,KAmDbrH,EAASZ,OAAOe,EAAAZ,MAAAH,UAId2G,EAAImC,WAAAA,WACAC,OAAAA,GAAAA,EAAAA,QACJhI,EAAIA,MAAQyH,OALPzH,EAAQV,QA5CjBO,EAmDU0H,KAAAA,WAlDR,GAmDMS,EAAQ3J,YAAQsC,EAAQ4G,SAnD9B,CACAzH,EAAMO,MAmDKL,EAAAM,YAAA,eAAAT,EAlDX,IAmDMmI,GAlDFA,CACAhI,GAmDKyH,WACLM,EAASR,EAjDTS,EAkDAA,EAAQrH,GAAAA,UAlDAtC,QAAQsC,QAAQ4G,EAAa,GAAGU,WAyD/BpI,OAKK6C,EAAK,KAAWC,EAAMhC,GAA0BuH,GAASJ,IArD3EjC,EAqDoFsC,EAAYpI,OAAAG,OApDhGqB,EAAa1B,EAASsC,SAAWgF,EAAYiB,KAAKvC,EAAU,SAASwC,EAAevI,MAuDlFyB,EAAIvB,KAEJ0C,IAAI1C,UAEJ2C,KAAI3C,UAKJoE,MAAI4D,OACFA,QAAMA,QA3DRG,WA4DO,WA1DLnI,EAAQsI,WAAW/G,EAAWgH,SAASvI,EAAQsI,WA8DjDzI,EAASY,MAAAA,EAAiBA,SAAWT,EAAAwI,YAAA,IAAAxI,EAAAb,MACrCsJ,EAAW3I,aAAAA,EAAAA,SAAAA,EAAAA,aAGXD,EAKAmI,EAAI3J,MAAQqK,GAjEZX,EAmEOY,QAAApH,GAjET1B,EAASY,SAAWX,EAAMW,UAAW,EAoEnCgI,EAAW3I,GAEX8I,EAAMC,kBAEJxK,QAAIkD,QAAYA,OAAW4C,EApE7B2E,EAoEkCX,MAAY5G,EAAAwG,EAAAC,EAAA5H,GAG5C0I,EAAI9I,MAAQjB,EAAUgJ,EAAAC,GAAAX,KAAAjH,GAnE1BqI,EAqEQ5I,GApER+I,EAAM,WAsEAtH,GAAAA,EAAAA,KApEF6G,WAAY,YAwEVnI,EAAQX,WACVsC,UAAAA,EAAAA,SArEE9B,EAASgI,QA0EfvG,OAIAzB,EAASa,WAEPiF,MApEJ9F,EA0EUqH,MAAAA,WAvER,MAFAvB,cA0Ee7D,GAzEfoF,EAAa,MA2ERlH,EAAQZ,OAAM0C,EAAAA,MAAAA,UAKnB8D,EAAIpF,WAAAA,WACY,QAAhBX,GAEEA,EAAKA,QAILkJ,EAAQC,MAAAA,OArFDnJ,EAASiC,OAQpB,IAqFIiH,GACED,CApFNjJ,GAqFWiC,KAAA,SAAAkH,GACLF,EAASpI,WApFbZ,EAAMO,MAAML,EAAQM,YAAc,eAAgBT,GAuFhDA,EAAAA,EACA4I,EAAW3I,EAGPE,QAAQjB,QAAAA,OAAYwC,EACtBE,EAAAA,MAAAA,EAAAA,GAGFqH,EAAI9I,MAAQX,GAAakC,KAAAA,GAvF3B1B,EAASY,SAAWX,EAAMW,UAAW,EACrCgI,EAAW3I,GA2FXE,EAASO,UAAAA,OAAAA,GACPT,IAMEE,EAAI+I,WAA6B,OAAZjK,GA7FvBiD,MA8GFlC,EAASgI,OAAQ,WACftG,EAAWd,SAjGXZ,EAASa,QAqGTV,EAAQV,SAhGZO,EAoGIG,MAAQT,WAnGVgC,EAAW,GAAGsG,SAEhBhI,EAuGS0B,WAAY,SAAA0F,GAGjBjH,EAAIxB,UAAYwB,GAvGpBH,EAyGQoJ,YAAYC,SAAU9D,GAE1BpF,EAAIiJ,SAAW1J,GAxGnBM,EAASgJ,gBAAkB,WA8GvBtH,GAAAA,EAAAA,CAIA,GAAI4H,GAAAA,EAAkBjH,UAClBkH,EAAW7H,eACX8H,EAAY9H,EAAAA,KAAWgC,EAG3B1D,KAGArB,EAAIyK,EAAWK,QAAAJ,EAAA,KAAAxK,EAAAF,WAlHjB+C,EAoHQgI,SAAAA,EAAmBrH,UAnH3B,IAqHIiH,GAAkBK,IAChBhL,EAAAA,EAAYgL,KAAAA,eApHdH,EAqHW9H,EAAWiI,KAAAA,eAnH1B,IADA3J,EAqHMrB,UAAYgL,EAAAA,UAAkBF,EAAetJ,EAAAT,SAAAC,UAAAQ,EAAAT,UApH/C0J,EAAW,CAuHX,GAAIO,GAAYA,EACdhL,EAAYA,EAAkBqB,EAAQmF,UArHtC,UAsHSI,KAAAoE,IAAaA,EAAsBL,OAAgB/E,EAAQgF,EAAWG,OAC/E/K,EAAYA,EAAkB8K,QAAA,SAAS,OArHhC,MAAMlE,KAAKoE,IAAsBL,EAAgBzG,IAAM2G,EAAYE,EAAiB7G,MAwH7FnB,EAAWkI,EAAYD,QAAAA,MAAmBjB,WAIxCmB,OAAAA,KAAcC,IAAoBnL,EAAW2K,KAAAA,EAAiBC,EAAUC,KAC5EO,EAAeF,EAAAA,QAAalL,OAAAA,SAxHjB,QAAQ4G,KAAKoE,IAAsBL,EAAgB/E,MAAQgF,EAAWG,EAAiB/G,QA2HpG3C,EAAS2B,EAAW8H,QAAUO,QAAAA,SAE1BhK,EAASiC,YAAAA,GAAAA,SAAAA,GAxHb,GAAI4H,GAAcC,EAAoBnL,EAAW2K,EAAiBC,EAAUC,EAC5EO,GAAeF,EAAalL,KAE9BqB,EA2HQgK,SAAc,SAAIA,GACTb,KAAXrI,EAAAA,OAAWqI,EAAAA,WACXa,EAAIC,OA1HND,EAAIC,oBAGRjK,EA4HQkK,cAAAA,SAAAA,GACAD,KAAAA,EAAAA,QAEJnJ,EAAId,GAASY,OACXE,EAAAA,oBA1HNd,EAASsB,yBAA2B,SAAS0I,GAC3CA,EAAIE,iBAgIJF,EAAAC,kBACMlJ,EAAAA,SACJvC,EAAQ2L,GAAAA,OA7HRrJ,EA+HIA,GAAQG,QAjFhB,IAAIY,IAAyB,CAuM7B,OAAO7B,GAET,QAAS4I,GAAW3I,GA0LrBmK,EAAAA,SAAUnK,EAAAoK,OAAApK,EAAAoK,MAAAnE,SAAAjG,EAAAqK,UAGPC,QAAAA,GAAUC,EAAA1J,GACVb,MAAOzB,SAAAsC,SAAAA,GAAAwC,UAAAmH,iBAAAD,IA1rBT,GAUI1K,GAAIkB,eAAsBA,GAASwF,SACnCxE,EAAI7B,QAAQZ,QAASf,EAAQkM,SAufjC,OA2LQC,OAzLTP,UA2LoBnK,aAAOA,UAAAA,YAAAA,OAAAA,WAAAA,QAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GA1L5B,OACEsK,SA0LYJ,MAzLZlK,OA0LM,EAzLNsI,KAAM,SAAkBtI,EAAOa,EAAS4F,EAAMkE,GA6L1C,GAAIC,GACJrM,GACEyB,MAAIzB,EA1LRA,SAAQ2L,SAAU,WAAY,cAAe,aAAc,eAAgB,kBAAmB,YAAa,YAAa,QAAS,UAAW,OAAQ,YAAa,oBAAqB,OAAQ,cAAe,MAAQ,SAASW,GACxNtM,QAAQuM,UAAUrE,EAAKoE,MAAO3K,EAAQ2K,GAAOpE,EAAKoE,KAgMtD,IAAItM,GAAkBwM,eA7LxBxM,SA8LQqM,SAAAA,OAAiBtF,aAAkB,SAAAuF,GACrC3K,QAAQ1B,UAASiI,EAAAoE,KAAAD,EAAAtF,KAAAmB,EAAAoE,MA7LnB3K,EA8LO2K,IAAA,IA3LX,IAAIE,GAAalK,EAAQ4F,KAAK,cAkM5BlI,SAAWyM,UAAAA,KACThL,EAAcsF,KAAAyF,GAhMd7K,EAAQ1B,QAAS,EAqMjB0B,EAAI3B,OAAQuM,GAGV9K,EAAIzB,eAAkB0M,WAlM1BjL,EAmMM8I,MAAM,IAjMdrC,EAAKyE,SAAS,QAAS,SAASC,GAC9B,GAAI5M,QAAQuM,UAAUK,KAAcnL,EAAMgL,eAAe,SAAU,CACjE,GAAIC,GAAWjL,EAAMZ,KACrBY,GAAMZ,MAAQwH,EAAKC,YAAYsE,GAsM7B1E,QAAK2E,UAAWH,IAClBjL,EAAMqL,WACA9M,GAAQ+M,EAASH,uBAKrB1E,EAAIlI,WApMRyB,EAqMM8I,OAAMrC,EAAA2E,UAAA,SAAAD,EAAAF,GACJ1M,QAAImM,SAASA,GApMjBnM,QAAQuE,OAAO9C,EAAOmL,GAuMrBnL,EAAAZ,MAAA+L,EAID1E,QAAK8E,UAAQN,IACfjL,EAAMqL,WACCX,GAAYnM,EAAQuM,sBApM1B,GAEDrE,EAuMIiE,QAtMN1K,EAAMqL,OAAO5E,EAAK8E,OAAQ,SAASJ,EAAUF,GACtCP,GAAYnM,QAAQuM,UAAUK,KAC/B5M,QAAQkM,SAASU,KAAWA,IAAaA,EAASK,MAAM,wBA0M1D/E,KAAgB,EAClBzG,EAAMqL,OAGJX,EAAInM,UAtMNkI,EA0MIiE,WAzMN1K,EAAMqL,OAAO5E,EAAKjH,UAAW,SAAS2L,EAAUF,GACzCP,GAAYnM,QAAQuM,UAAUK,KAC/B5M,QAAQkM,SAASU,KAAWA,IAAaA,EAASK,MAAM,0BA6M1D/E,KAAe,EACjBzG,EAAMqL,YAAY5L,GAEhBiL,EAAQe,YAAYN,MAQxBnL,EAAM0L,UACJ1L,EAAI0K,OAASA,EAAAA,SAAQ5C,SAAAA,GACrB5H,GAAU3B,QAAAuM,UAAAK,IACVT,EAAUe,YAAAN,KA7MdT,EAAU3K,EAASc,EAASX,GAC5BF,EAAM0L,IAAI,WAAY,WAChBhB,GAASA,EAAQ5C,UACrB5H,EAAU,KACVwK,EAAU","file":"modules/tooltip.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      contentTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isTouch = 'createTouch' in $window.document;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory(element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function () {\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents() {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click') {\n              element.on('click', $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents() {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click') {\n              element.off('click', $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents() {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents() {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents() {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents() {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation(event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) {\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset(placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement(offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta(placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow(delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement() {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement(query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}