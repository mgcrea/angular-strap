{"version":3,"sources":["modules/tooltip.js"],"names":["angular","target","provider","placement","this","defaults","templateUrl","template","titleTemplate","trigger","keyboard","html","show","title","type","delay","autoClose","bsEnabled","viewport","selector","padding","$get","isTouch","TooltipFactory","$tooltip","scope","$scope","options","$rootScope","$new","split","enterAnimateCallback","$emit","prefixEvent","leaveAnimateCallback","_tipToHide","evt","preventDefault","destroyTipElement","element","triggers","nodeName","on","toggle","enter","unbindTriggerEvents","length","$onFocusElementMouseDown","off","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$timeout","$body","hide","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","$element","elRect","getBoundingClientRect","rect","p","width","height","top","left","extend","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","scrollTop","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","test","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","findElement","$arrow","clearTimeout","timeout","$isShown","tipScope","$destroy","$$phase","$options","config","$promise","$bsCompiler","compile","toLowerCase","$id","attr","map","parseFloat","$sce","trustAsHtml","$setEnabled","$$postDigest","id","$hide","setEnabled","isEnabled","hoverState","compileData","promise","then","data","tipContainer","init","container","bindTriggerEvents","isElement","destroy","focus","parent","after","lastChild","display","visibility","link","clonedElement","animation","addClass","prefixClass","safeDigest","version","prepend","$$rAF","$applyPlacement","$animate","leave","_blur","blur","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","replace","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","stopPropagation","forEach","directive","$root","$digest","restrict","query","querySelectorAll","isString","tooltip","transclusion","falseValueRegExp","key","isDefined","dataTarget","hasOwnProperty","oldValue","$observe","newValue","bsTooltip","bsShow","$watch","match","setViewport","$on"],"mappings":"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","file":"modules/tooltip.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isTouch = 'createTouch' in $window.document;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) {\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}