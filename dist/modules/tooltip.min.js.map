{"version":3,"sources":["modules/tooltip.js"],"names":["angular","target","provider","placement","this","defaults","templateUrl","template","titleTemplate","trigger","keyboard","html","show","title","type","delay","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","$get","promise","$tooltip","$bsCompiler","compile","options","split","clearTimeout","hoverState","prefixEvent","hide","isFunction","onShow","leaveAnimateCallback","scope","$emit","destroyTipElement","onHide","_tipToHide","evt","preventDefault","element","triggers","nodeName","on","isTouch","toggle","enter","unbindTriggerEvents","length","$onFocusElementMouseDown","off","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","autoCloseEventTrigger","bindAutoCloseEvents","$onFocusKeyUp","$timeout","stopEventPropagation","$body","unbindAutoCloseEvents","event","stopPropagation","getPosition","$element","elRect","getBoundingClientRect","rect","p","width","height","top","left","extend","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","scrollTop","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","test","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","findElement","$arrow","timeout","$isShown","tipScope","$destroy","$$phase","$options","config","$promise","$scope","$new","$rootScope","toLowerCase","$id","attr","map","parseFloat","$sce","trustAsHtml","$setEnabled","$$postDigest","id","$hide","setEnabled","isEnabled","compileData","then","data","tipContainer","init","container","bindTriggerEvents","isElement","destroy","focus","isDefined","onBeforeShow","after","parent","lastChild","display","visibility","link","clonedElement","animation","addClass","prefixClass","safeDigest","version","prepend","$$rAF","$applyPlacement","$animate","enterAnimateCallback","_blur","onBeforeHide","blur","leave","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","replace","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","forEach","directive","$root","$digest","restrict","query","querySelectorAll","isNative","isString","tooltip","transclusion","falseValueRegExp","key","$eval","bsKey","dataTarget","slice","hasOwnProperty","oldValue","$observe","newValue","bsTooltip","bsShow","$watch","match","setViewport","$on"],"mappings":"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","file":"modules/tooltip.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (tipElement !== null) {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        var autoCloseEventTrigger = isTouch ? 'touchend' : 'click';\n        function bindAutoCloseEvents() {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            if (tipElement) {\n              // Stop propagation when clicking inside tooltip\n              tipElement.on(autoCloseEventTrigger, stopEventPropagation);\n            }\n            // Hide when clicking outside tooltip\n            $body.on(autoCloseEventTrigger, $tooltip.hide);\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents() {\n          if (_autoCloseEventsBinded) {\n            if (tipElement) {\n              tipElement.off(autoCloseEventTrigger, stopEventPropagation);\n            }\n            $body.off(autoCloseEventTrigger, $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}