{"version":3,"sources":["tooltip/tooltip.js"],"names":[],"mappings":"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","file":"tooltip.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$tooltip', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'tooltip',\r\n      prefixEvent: 'tooltip',\r\n      container: false,\r\n      target: false,\r\n      placement: 'top',\r\n      template: 'tooltip/tooltip.tpl.html',\r\n      contentTemplate: false,\r\n      trigger: 'hover focus',\r\n      keyboard: false,\r\n      html: false,\r\n      show: false,\r\n      title: '',\r\n      type: '',\r\n      delay: 0\r\n    };\r\n\r\n    this.$get = function($window, $rootScope, $compile, $q, $templateCache, $http, $animate, dimensions, $$rAF) {\r\n\r\n      var trim = String.prototype.trim;\r\n      var isTouch = 'createTouch' in $window.document;\r\n      var htmlReplaceRegExp = /ng-bind=\"/ig;\r\n\r\n      function TooltipFactory(element, config) {\r\n\r\n        var $tooltip = {};\r\n\r\n        // Common vars\r\n        var nodeName = element[0].nodeName.toLowerCase();\r\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\r\n        $tooltip.$promise = fetchTemplate(options.template);\r\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n        if(options.delay && angular.isString(options.delay)) {\r\n          var split = options.delay.split(',').map(parseFloat);\r\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\r\n        }\r\n\r\n        // Support scope as string options\r\n        if(options.title) {\r\n          $tooltip.$scope.title = options.title;\r\n        }\r\n\r\n        // Provide scope helpers\r\n        scope.$hide = function() {\r\n          scope.$$postDigest(function() {\r\n            $tooltip.hide();\r\n          });\r\n        };\r\n        scope.$show = function() {\r\n          scope.$$postDigest(function() {\r\n            $tooltip.show();\r\n          });\r\n        };\r\n        scope.$toggle = function() {\r\n          scope.$$postDigest(function() {\r\n            $tooltip.toggle();\r\n          });\r\n        };\r\n        $tooltip.$isShown = scope.$isShown = false;\r\n\r\n        // Private vars\r\n        var timeout, hoverState;\r\n\r\n        // Support contentTemplate option\r\n        if(options.contentTemplate) {\r\n          $tooltip.$promise = $tooltip.$promise.then(function(template) {\r\n            var templateEl = angular.element(template);\r\n            return fetchTemplate(options.contentTemplate)\r\n            .then(function(contentTemplate) {\r\n              var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0]);\r\n              if(!contentEl.length) contentEl = findElement('[ng-bind=\"title\"]', templateEl[0]);\r\n              contentEl.removeAttr('ng-bind').html(contentTemplate);\r\n              return templateEl[0].outerHTML;\r\n            });\r\n          });\r\n        }\r\n\r\n        // Fetch, compile then initialize tooltip\r\n        var tipLinker, tipElement, tipTemplate, tipContainer;\r\n        $tooltip.$promise.then(function(template) {\r\n          if(angular.isObject(template)) template = template.data;\r\n          if(options.html) template = template.replace(htmlReplaceRegExp, 'ng-bind-html=\"');\r\n          template = trim.apply(template);\r\n          tipTemplate = template;\r\n          tipLinker = $compile(template);\r\n          $tooltip.init();\r\n        });\r\n\r\n        $tooltip.init = function() {\r\n\r\n          // Options: delay\r\n          if (options.delay && angular.isNumber(options.delay)) {\r\n            options.delay = {\r\n              show: options.delay,\r\n              hide: options.delay\r\n            };\r\n          }\r\n\r\n          // Replace trigger on touch devices ?\r\n          // if(isTouch && options.trigger === defaults.trigger) {\r\n          //   options.trigger.replace(/hover/g, 'click');\r\n          // }\r\n\r\n          // Options : container\r\n          if(options.container === 'self') {\r\n            tipContainer = element;\r\n          } else if(angular.isElement(options.container)) {\r\n            tipContainer = options.container;\r\n          } else if(options.container) {\r\n            tipContainer = findElement(options.container);\r\n          }\r\n\r\n          // Options: trigger\r\n          var triggers = options.trigger.split(' ');\r\n          angular.forEach(triggers, function(trigger) {\r\n            if(trigger === 'click') {\r\n              element.on('click', $tooltip.toggle);\r\n            } else if(trigger !== 'manual') {\r\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              nodeName === 'button' && trigger !== 'hover' && element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n            }\r\n          });\r\n\r\n          // Options: target\r\n          if(options.target) {\r\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\r\n          }\r\n\r\n          // Options: show\r\n          if(options.show) {\r\n            scope.$$postDigest(function() {\r\n              options.trigger === 'focus' ? element[0].focus() : $tooltip.show();\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $tooltip.destroy = function() {\r\n\r\n          // Unbind events\r\n          var triggers = options.trigger.split(' ');\r\n          for (var i = triggers.length; i--;) {\r\n            var trigger = triggers[i];\r\n            if(trigger === 'click') {\r\n              element.off('click', $tooltip.toggle);\r\n            } else if(trigger !== 'manual') {\r\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              nodeName === 'button' && trigger !== 'hover' && element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n            }\r\n          }\r\n\r\n          // Remove element\r\n          if(tipElement) {\r\n            tipElement.remove();\r\n            tipElement = null;\r\n          }\r\n\r\n          // Cancel pending callbacks\r\n          clearTimeout(timeout);\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n\r\n        };\r\n\r\n        $tooltip.enter = function() {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'in';\r\n          if (!options.delay || !options.delay.show) {\r\n            return $tooltip.show();\r\n          }\r\n\r\n          timeout = setTimeout(function() {\r\n            if (hoverState ==='in') $tooltip.show();\r\n          }, options.delay.show);\r\n\r\n        };\r\n\r\n        $tooltip.show = function() {\r\n\r\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\r\n          var parent = options.container ? tipContainer : null;\r\n          var after = options.container ? null : element;\r\n\r\n          // Hide any existing tipElement\r\n          if(tipElement) tipElement.remove();\r\n          // Fetch a cloned element linked from template\r\n          tipElement = $tooltip.$element = tipLinker(scope, function(clonedElement, scope) {});\r\n\r\n          // Set the initial positioning.  Make the tooltip invisible\r\n          // so IE doesn't try to focus on it off screen.\r\n          tipElement.css({top: '-9999px', left: '-9999px', display: 'block', visibility: 'hidden'}).addClass(options.placement);\r\n\r\n          // Options: animation\r\n          if(options.animation) tipElement.addClass(options.animation);\r\n          // Options: type\r\n          if(options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\r\n          // Options: custom classes\r\n          if(options.customClass) tipElement.addClass(options.customClass);\r\n\r\n          // Support v1.3+ $animate\r\n          // https://github.com/angular/angular.js/commit/bf0f5502b1bbfddc5cdd2f138efd9188b8c652a9\r\n          var promise = $animate.enter(tipElement, parent, after, enterAnimateCallback);\r\n          if(promise && promise.then) promise.then(enterAnimateCallback);\r\n\r\n          $tooltip.$isShown = scope.$isShown = true;\r\n          scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n          $$rAF(function () {\r\n            $tooltip.$applyPlacement();\r\n\r\n            // Once placed, make the tooltip visible\r\n            tipElement.css({visibility: 'visible'});\r\n          }); // var a = bodyEl.offsetWidth + 1; ?\r\n\r\n          // Bind events\r\n          if(options.keyboard) {\r\n            if(options.trigger !== 'focus') {\r\n              $tooltip.focus();\r\n              tipElement.on('keyup', $tooltip.$onKeyUp);\r\n            } else {\r\n              element.on('keyup', $tooltip.$onFocusKeyUp);\r\n            }\r\n          }\r\n\r\n        };\r\n\r\n        function enterAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\r\n        }\r\n\r\n        $tooltip.leave = function() {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'out';\r\n          if (!options.delay || !options.delay.hide) {\r\n            return $tooltip.hide();\r\n          }\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'out') {\r\n              $tooltip.hide();\r\n            }\r\n          }, options.delay.hide);\r\n\r\n        };\r\n\r\n        $tooltip.hide = function(blur) {\r\n\r\n          if(!$tooltip.$isShown) return;\r\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\r\n\r\n          // Support v1.3+ $animate\r\n          // https://github.com/angular/angular.js/commit/bf0f5502b1bbfddc5cdd2f138efd9188b8c652a9\r\n          var promise = $animate.leave(tipElement, leaveAnimateCallback);\r\n          if(promise && promise.then) promise.then(leaveAnimateCallback);\r\n\r\n          $tooltip.$isShown = scope.$isShown = false;\r\n          scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n\r\n          // Unbind events\r\n          if(options.keyboard && tipElement !== null) {\r\n            tipElement.off('keyup', $tooltip.$onKeyUp);\r\n          }\r\n\r\n        };\r\n\r\n        function leaveAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\r\n          // Allow to blur the input when hidden, like when pressing enter key\r\n          if(blur && options.trigger === 'focus') {\r\n            return element[0].blur();\r\n          }\r\n        }\r\n\r\n        $tooltip.toggle = function() {\r\n          $tooltip.$isShown ? $tooltip.leave() : $tooltip.enter();\r\n        };\r\n\r\n        $tooltip.focus = function() {\r\n          tipElement[0].focus();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $tooltip.$applyPlacement = function() {\r\n          if(!tipElement) return;\r\n\r\n          // Get the position of the tooltip element.\r\n          var elementPosition = getPosition();\r\n\r\n          // Get the height and width of the tooltip so we can center it.\r\n          var tipWidth = tipElement.prop('offsetWidth'),\r\n              tipHeight = tipElement.prop('offsetHeight');\r\n\r\n          // Get the tooltip's top and left coordinates to center it with this directive.\r\n          var tipPosition = getCalculatedOffset(options.placement, elementPosition, tipWidth, tipHeight);\r\n\r\n          // Now set the calculated positioning.\r\n          tipPosition.top += 'px';\r\n          tipPosition.left += 'px';\r\n          tipElement.css(tipPosition);\r\n\r\n        };\r\n\r\n        $tooltip.$onKeyUp = function(evt) {\r\n          if (evt.which === 27 && $tooltip.$isShown) {\r\n            $tooltip.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusKeyUp = function(evt) {\r\n          if (evt.which === 27) {\r\n            element[0].blur();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusElementMouseDown = function(evt) {\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Some browsers do not auto-focus buttons (eg. Safari)\r\n          $tooltip.$isShown ? element[0].blur() : element[0].focus();\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function getPosition() {\r\n          if(options.container === 'body') {\r\n            return dimensions.offset(options.target[0] || element[0]);\r\n          } else {\r\n            return dimensions.position(options.target[0] || element[0]);\r\n          }\r\n        }\r\n\r\n        function getCalculatedOffset(placement, position, actualWidth, actualHeight) {\r\n          var offset;\r\n          var split = placement.split('-');\r\n\r\n          switch (split[0]) {\r\n          case 'right':\r\n            offset = {\r\n              top: position.top + position.height / 2 - actualHeight / 2,\r\n              left: position.left + position.width\r\n            };\r\n            break;\r\n          case 'bottom':\r\n            offset = {\r\n              top: position.top + position.height,\r\n              left: position.left + position.width / 2 - actualWidth / 2\r\n            };\r\n            break;\r\n          case 'left':\r\n            offset = {\r\n              top: position.top + position.height / 2 - actualHeight / 2,\r\n              left: position.left - actualWidth\r\n            };\r\n            break;\r\n          default:\r\n            offset = {\r\n              top: position.top - actualHeight,\r\n              left: position.left + position.width / 2 - actualWidth / 2\r\n            };\r\n            break;\r\n          }\r\n\r\n          if(!split[1]) {\r\n            return offset;\r\n          }\r\n\r\n          // Add support for corners @todo css\r\n          if(split[0] === 'top' || split[0] === 'bottom') {\r\n            switch (split[1]) {\r\n            case 'left':\r\n              offset.left = position.left;\r\n              break;\r\n            case 'right':\r\n              offset.left =  position.left + position.width - actualWidth;\r\n            }\r\n          } else if(split[0] === 'left' || split[0] === 'right') {\r\n            switch (split[1]) {\r\n            case 'top':\r\n              offset.top = position.top - actualHeight;\r\n              break;\r\n            case 'bottom':\r\n              offset.top = position.top + position.height;\r\n            }\r\n          }\r\n\r\n          return offset;\r\n        }\r\n\r\n        return $tooltip;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function findElement(query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      function fetchTemplate(template) {\r\n        return $q.when($templateCache.get(template) || $http.get(template))\r\n        .then(function(res) {\r\n          if(angular.isObject(res)) {\r\n            $templateCache.put(template, res.data);\r\n            return res.data;\r\n          }\r\n          return res;\r\n        });\r\n      }\r\n\r\n      return TooltipFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTooltip', function($window, $location, $sce, $tooltip, $$rAF) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'contentTemplate', 'placement', 'container', 'target', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'type', 'customClass'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Observe scope attributes for change\r\n        attr.$observe('title', function(newValue, oldValue) {\r\n          scope.title = $sce.trustAsHtml(newValue);\r\n          angular.isDefined(oldValue) && $$rAF(function() {\r\n            tooltip && tooltip.$applyPlacement();\r\n          });\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsTooltip && scope.$watch(attr.bsTooltip, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.title = newValue;\r\n          }\r\n          angular.isDefined(oldValue) && $$rAF(function() {\r\n            tooltip && tooltip.$applyPlacement();\r\n          });\r\n        }, true);\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!tooltip || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(',?(tooltip),?');\r\n          newValue === true ? tooltip.show() : tooltip.hide();\r\n        });\r\n\r\n        // Initialize popover\r\n        var tooltip = $tooltip(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if(tooltip) tooltip.destroy();\r\n          options = null;\r\n          tooltip = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}