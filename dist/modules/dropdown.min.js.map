{"version":3,"sources":["modules/dropdown.js"],"names":["angular","trigger","provider","container","this","defaults","keyboard","html","delay","placement","bodyEl","matchesSelector","DropdownFactory","$dropdown","options","element","evt","keyCode","onBodyClick","directive","target","hide","stopPropagation","items","$element","$new","querySelectorAll","parentEl","index","forEach","preventDefault","focus","length","show","el","i","$onKeyDown","on","hasClass","removeClass","destroy","scope","parent","prototype","tAttrs","nextSibling","nodeType","$window","$sce","restrict","compile","template","templateUrl","parentNode","removeChild","undefined","falseValueRegExp","attr","bsDropdown","key","$watch","newValue","oldValue","dropdown","isDefined","isString","bsShow","match","$on"],"mappings":"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","file":"modules/dropdown.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory(element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick(evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.classList.contains('dropdown-menu')) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink(scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}