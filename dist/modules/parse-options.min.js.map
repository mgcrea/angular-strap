{"version":3,"file":"parse-options.min.js","sources":["helpers/parse-options.js"],"names":[],"mappings":"sIAcQ,qLAGA,MAAA,SAAA,KAAA,SAAA,EAAA,2BAiCE,GAAA,EAAA,GACF,MAAA,GAAA,IAAA,SAAA,EAAA,eAKF,OAHE,GAAA,GAAA,EACA,EAAA,EAAA,EAAA,gBAEF,MAAA,EAAA,MAAA,KAnCE,GAAA,MAGE,EAAA,QAAA,UAAA,EAAA,KACA,cAGA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,WAEA,KAAA,WACF,EAAA,OAAA,EAAA,EAAA,MAAA,EAAA,wBAEA,EAAA,EAAA,IAAA,EAAA,GACE,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,IAAA,MACE,EAAA,EAAA,GAAA,EAAA,GAAA,KACA,EAAA,EAAA,8BAIJ,MAAA,GAAA,KAAA,EAAA,EAAA,qBAGE,MADF,GAAA,QAAA,EAAA,EAAA,EAAA,MACE,EAAA,WAgBL,EAAA","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function() {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function($parse, $q) {\n\n      function ParseOptionsFactory(attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match, displayFn, valueName, keyName, groupByFn, valueFn, valuesFn;\n\n        $parseOptions.init = function() {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]),\n          valueName = match[4] || match[6],\n          keyName = match[5],\n          groupByFn = $parse(match[3] || ''),\n          valueFn = $parse(match[2] ? match[1] : valueName),\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function(scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function(values) {\n            $parseOptions.$values = values ? parseValues(values, scope) : {};\n            return $parseOptions.$values;\n          });\n        };\n\n        // Private functions\n\n        function parseValues(values, scope) {\n          return values.map(function(match, index) {\n            var locals = {}, label, value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals) || index;\n            return {label: label, value: value};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n"],"sourceRoot":"/source/"}