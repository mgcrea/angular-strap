{"version":3,"sources":["helpers/parse-options.js"],"names":[],"mappings":"AAAA;;AAEA,QAAQ,OAAO,uCAAuC;;GAEnD,SAAS,iBAAiB,WAAW;;IAEpC,IAAI,WAAW,KAAK,WAAW;MAC7B,QAAQ;;;IAGV,KAAK,wBAAO,SAAS,QAAQ,IAAI;;MAE/B,SAAS,oBAAoB,MAAM,QAAQ;;QAEzC,IAAI,gBAAgB;;;QAGpB,IAAI,UAAU,QAAQ,OAAO,IAAI,UAAU;QAC3C,cAAc,UAAU;;;QAGxB,IAAI,OAAO,WAAW,WAAW,SAAS,WAAW,SAAS;;QAE9D,cAAc,OAAO,WAAW;UAC9B,cAAc,SAAS,QAAQ,KAAK,MAAM,QAAQ;UAClD,YAAY,OAAO,MAAM,MAAM,MAAM;UACrC,YAAY,MAAM,MAAM,MAAM;UAC9B,UAAU,MAAM;UAChB,YAAY,OAAO,MAAM,MAAM;UAC/B,UAAU,OAAO,MAAM,KAAK,MAAM,KAAK;UACvC,WAAW,OAAO,MAAM;;;QAG1B,cAAc,WAAW,SAAS,OAAO,YAAY;UACnD,OAAO,GAAG,KAAK,SAAS,OAAO;WAC9B,KAAK,SAAS,QAAQ;YACrB,cAAc,UAAU,SAAS,YAAY,QAAQ,SAAS;YAC9D,OAAO,cAAc;;;;QAIzB,cAAc,eAAe,SAAS,YAAY;UAChD,IAAI,QAAQ;UACZ,MAAM,aAAa;UACnB,OAAO,UAAU;;;;;QAKnB,SAAS,YAAY,QAAQ,OAAO;UAClC,OAAO,OAAO,IAAI,SAAS,OAAO,OAAO;YACvC,IAAI,SAAS,IAAI,OAAO;YACxB,OAAO,aAAa;YACpB,QAAQ,UAAU,OAAO;YACzB,QAAQ,QAAQ,OAAO;YACvB,OAAO,CAAC,OAAO,OAAO,OAAO,OAAO,OAAO;;;;QAI/C,cAAc;QACd,OAAO;;;;MAIT,OAAO;;;;;AAKb","file":"parse-options.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function() {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function($parse, $q) {\n\n      function ParseOptionsFactory(attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match, displayFn, valueName, keyName, groupByFn, valueFn, valuesFn;\n\n        $parseOptions.init = function() {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]),\n          valueName = match[4] || match[6],\n          keyName = match[5],\n          groupByFn = $parse(match[3] || ''),\n          valueFn = $parse(match[2] ? match[1] : valueName),\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function(scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function(values) {\n            $parseOptions.$values = values ? parseValues(values, scope) : {};\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function(modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues(values, scope) {\n          return values.map(function(match, index) {\n            var locals = {}, label, value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n"],"sourceRoot":"/source/"}