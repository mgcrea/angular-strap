{"version":3,"sources":["helpers/parse-options.js"],"names":[],"mappings":"sIAcQ,qLAGA,MAAA,SAAA,KAAA,SAAA,EAAA,2BAiCE,GAAA,EAAA,GACF,MAAA,GAAA,IAAA,SAAA,EAAA,eAKF,OAHE,GAAA,GAAA,EACA,EAAA,EAAA,EAAA,gBAEF,MAAA,EAAA,MAAA,KAnCE,GAAA,MAGE,EAAA,QAAA,UAAA,EAAA,KACA,cAGA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,WAEA,KAAA,WACF,EAAA,OAAA,EAAA,EAAA,MAAA,EAAA,wBAEA,EAAA,EAAA,IAAA,EAAA,GACE,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,IAAA,MACE,EAAA,EAAA,GAAA,EAAA,GAAA,KACA,EAAA,EAAA,8BAIJ,MAAA,GAAA,KAAA,EAAA,EAAA,qBAGE,MADF,GAAA,QAAA,EAAA,EAAA,EAAA,MACE,EAAA,WAgBL,EAAA","file":"parse-options.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\r\n\r\n  .provider('$parseOptions', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\r\n    };\r\n\r\n    this.$get = function($parse, $q) {\r\n\r\n      function ParseOptionsFactory(attr, config) {\r\n\r\n        var $parseOptions = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        $parseOptions.$values = [];\r\n\r\n        // Private vars\r\n        var match, displayFn, valueName, keyName, groupByFn, valueFn, valuesFn;\r\n\r\n        $parseOptions.init = function() {\r\n          $parseOptions.$match = match = attr.match(options.regexp);\r\n          displayFn = $parse(match[2] || match[1]),\r\n          valueName = match[4] || match[6],\r\n          keyName = match[5],\r\n          groupByFn = $parse(match[3] || ''),\r\n          valueFn = $parse(match[2] ? match[1] : valueName),\r\n          valuesFn = $parse(match[7]);\r\n        };\r\n\r\n        $parseOptions.valuesFn = function(scope, controller) {\r\n          return $q.when(valuesFn(scope, controller))\r\n          .then(function(values) {\r\n            $parseOptions.$values = values ? parseValues(values, scope) : {};\r\n            return $parseOptions.$values;\r\n          });\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function parseValues(values, scope) {\r\n          return values.map(function(match, index) {\r\n            var locals = {}, label, value;\r\n            locals[valueName] = match;\r\n            label = displayFn(scope, locals);\r\n            value = valueFn(scope, locals) || index;\r\n            return {label: label, value: value};\r\n          });\r\n        }\r\n\r\n        $parseOptions.init();\r\n        return $parseOptions;\r\n\r\n      }\r\n\r\n      return ParseOptionsFactory;\r\n\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}