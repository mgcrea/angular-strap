{"version":3,"sources":["helpers/parse-options.js"],"names":["angular","module","provider","defaults","this","regexp","$get","$parse","$q","ParseOptionsFactory","attr","config","parseValues","values","scope","map","match","index","label","value","locals","valueName","displayFn","valueFn","$parseOptions","options","extend","$values","keyName","groupByFn","valuesFn","init","$match","controller","when","then"],"mappings":"AAOA,YACAA,SAAQC,OAAO,0CAA2CC,SAAS,gBAAiB,WAClF,GAAIC,GAAWC,KAAKD,UAAaE,OAAQ,+KACzCD,MAAKE,MACH,SACA,KACA,SAAUC,EAAQC,GAChB,QAASC,GAAoBC,EAAMC,GAkBjC,QAASC,GAAYC,EAAQC,GAC3B,MAAOD,GAAOE,IAAI,SAAUC,EAAOC,GACjC,GAAiBC,GAAOC,EAApBC,IAIJ,OAHAA,GAAOC,GAAaL,EACpBE,EAAQI,EAAUR,EAAOM,GACzBD,EAAQI,EAAQT,EAAOM,IAAWH,GAEhCC,MAAOA,EACPC,MAAOA,KAzBb,GAAIK,MAEAC,EAAUzB,QAAQ0B,UAAWvB,EAAUQ,EAC3Ca,GAAcG,UAEd,IAAIX,GAAOM,EAAWD,EAAWO,EAASC,EAAWN,EAASO,CAyB9D,OAxBAN,GAAcO,KAAO,WACnBP,EAAcQ,OAAShB,EAAQN,EAAKM,MAAMS,EAAQpB,QAClDiB,EAAYf,EAAOS,EAAM,IAAMA,EAAM,IAAKK,EAAYL,EAAM,IAAMA,EAAM,GAAIY,EAAUZ,EAAM,GAAIa,EAAYtB,EAAOS,EAAM,IAAM,IAAKO,EAAUhB,EAAOS,EAAM,GAAKA,EAAM,GAAKK,GAAYS,EAAWvB,EAAOS,EAAM,KAEjNQ,EAAcM,SAAW,SAAUhB,EAAOmB,GACxC,MAAOzB,GAAG0B,KAAKJ,EAAShB,EAAOmB,IAAaE,KAAK,SAAUtB,GAEzD,MADAW,GAAcG,QAAUd,EAASD,EAAYC,EAAQC,MAC9CU,EAAcG,WAgBzBH,EAAcO,OACPP,EAET,MAAOf","file":"parse-options.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function() {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function($parse, $q) {\n\n      function ParseOptionsFactory(attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match, displayFn, valueName, keyName, groupByFn, valueFn, valuesFn;\n\n        $parseOptions.init = function() {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]),\n          valueName = match[4] || match[6],\n          keyName = match[5],\n          groupByFn = $parse(match[3] || ''),\n          valueFn = $parse(match[2] ? match[1] : valueName),\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function(scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function(values) {\n            $parseOptions.$values = values ? parseValues(values, scope) : {};\n            return $parseOptions.$values;\n          });\n        };\n\n        // Private functions\n\n        function parseValues(values, scope) {\n          return values.map(function(match, index) {\n            var locals = {}, label, value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals) || index;\n            return {label: label, value: value};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n"],"sourceRoot":"/source/"}