{"version":3,"sources":["timepicker/timepicker.js"],"names":[],"mappings":"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","file":"timepicker.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      template: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if(!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function timepickerFactory(element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function(date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes(time)\n        {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {hour: startDate.getHours(), meridian: startDate.getHours() < 12, minute: startDate.getMinutes(), second: startDate.getSeconds(), millisecond: startDate.getMilliseconds()};\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format),\n          timeSeparator = $dateFormatter.timeSeparator(format),\n          minutesFormat = $dateFormatter.minutesFormat(format),\n          showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function(date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function(value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function(date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function(date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if(angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {hour: date.getHours(), minute: date.getMinutes(), second: date.getSeconds(), millisecond: date.getMilliseconds()});\n            $timepicker.$build();\n          } else if(!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function(date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if(!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\n          if(!angular.isDate(date)) date = new Date(date);\n          if(index === 0) controller.$dateValue.setHours(date.getHours());\n          else if(index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if(options.autoclose && !keep) {\n            $timeout(function() { $timepicker.hide(true); });\n          }\n        };\n\n        $timepicker.switchMeridian = function(date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function() {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i, midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [], hour;\n          for(i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({date: hour, label: formatDate(hour, hoursFormat), selected: $timepicker.$date && $timepicker.$isSelected(hour, 0), disabled: $timepicker.$isDisabled(hour, 0)});\n          }\n          var minutes = [], minute;\n          for(i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({date: minute, label: formatDate(minute, minutesFormat), selected: $timepicker.$date && $timepicker.$isSelected(minute, 1), disabled: $timepicker.$isDisabled(minute, 1)});\n          }\n\n          var rows = [];\n          for(i = 0; i < options.length; i++) {\n            rows.push([hours[i], minutes[i]]);\n          }\n          scope.rows = rows;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function(date, index) {\n          if(!$timepicker.$date) return false;\n          else if(index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if(index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          }\n        };\n\n        $timepicker.$isDisabled = function(date, index) {\n          var selectedTime;\n          if(index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4;\n          } else if(index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value,index);\n          } else {\n            $timepicker.$moveIndex(value,index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function(value, index) {\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours(), hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes(), minutesLength = formatDate(newDate, minutesFormat).length;\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          }\n          else {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function(value, index) {\n          var targetDate;\n          if(index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute);\n            angular.extend(viewDate, {hour: targetDate.getHours()});\n          } else if(index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep));\n            angular.extend(viewDate, {minute: targetDate.getMinutes()});\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if(evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if(isTouch) {\n            var targetEl = angular.element(evt.target);\n            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function(evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if(evt.keyCode === 13) return $timepicker.hide(true);\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours(), hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes(), minutesLength = formatDate(newDate, minutesFormat).length;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if(evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if(evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          if(selectedIndex === 0) {\n            if(evt.keyCode === 38) newDate.setHours(hours - parseInt(options.hourStep, 10));\n            else if(evt.keyCode === 40) newDate.setHours(hours + parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if(selectedIndex === 1) {\n            if(evt.keyCode === 38) newDate.setMinutes(minutes - parseInt(options.minuteStep, 10));\n            else if(evt.keyCode === 40) newDate.setMinutes(minutes + parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + 1, hoursLength + 1 + minutesLength];\n          } else if(selectedIndex === 2) {\n            if(!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + 1 + minutesLength + 1, hoursLength + 1 + minutesLength + 3];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection(start, end) {\n          if(element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if(element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if(angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function() {\n          if(isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if(isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function() {\n          if(isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function() {\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if(options.keyboard) {\n              element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function(blur) {\n          if(!$timepicker.$isShown) return;\n          $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if(options.keyboard) {\n            element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, controller: controller};\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'id'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match for boolean values\n        var falseValueRegExp = /^(false|0|)$/;\n        angular.forEach(['roundDisplay'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = !falseValueRegExp.test(attr[key]);\n        });\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!timepicker || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n          newValue === true ? timepicker.show() : timepicker.hide();\n        });\n\n        // Initialize timepicker\n        if(isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function(date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Initialize parser\n        var dateParser = $dateParser({format: options.timeFormat, lang: lang});\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function(key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\n            timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n            !isNaN(timepicker.$options[key]) && timepicker.$build();\n            validateAgainstMinMaxTime(controller.$dateValue);\n          });\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime(parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if(!isValid) {\n              return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function(viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if(!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if(!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          } else {\n            validateAgainstMinMaxTime(parsedTime);\n          }\n\n          if(options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if(options.timeType === 'number') {\n            return date.getTime();\n          } else if(options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if(options.timeType === 'iso') {\n            return date.toISOString();\n          } else {\n            return new Date(date);\n          }\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if(angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if(angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if(options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if(options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function() {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}