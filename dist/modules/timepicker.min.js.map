{"version":3,"sources":["timepicker/timepicker.js"],"names":[],"mappings":"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","file":"timepicker.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.timepicker', [\r\n  'mgcrea.ngStrap.helpers.dateParser',\r\n  'mgcrea.ngStrap.helpers.dateFormatter',\r\n  'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$timepicker', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'timepicker',\r\n      placement: 'bottom-left',\r\n      template: 'timepicker/timepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: true,\r\n      timeType: 'date',\r\n      timeFormat: 'shortTime',\r\n      modelTimeFormat: null,\r\n      autoclose: false,\r\n      minTime: -Infinity,\r\n      maxTime: +Infinity,\r\n      length: 5,\r\n      hourStep: 1,\r\n      minuteStep: 5,\r\n      iconUp: 'glyphicon glyphicon-chevron-up',\r\n      iconDown: 'glyphicon glyphicon-chevron-down',\r\n      arrowBehavior: 'pager'\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if(!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\r\n\r\n      function timepickerFactory(element, controller, config) {\r\n\r\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $timepicker.$options;\r\n        var scope = $timepicker.$scope;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function(date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        // View vars\r\n\r\n        var selectedIndex = 0;\r\n        var startDate = controller.$dateValue || new Date();\r\n        var viewDate = {hour: startDate.getHours(), meridian: startDate.getHours() < 12, minute: startDate.getMinutes(), second: startDate.getSeconds(), millisecond: startDate.getMilliseconds()};\r\n\r\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\r\n\r\n        var hoursFormat = $dateFormatter.hoursFormat(format),\r\n          timeSeparator = $dateFormatter.timeSeparator(format),\r\n          minutesFormat = $dateFormatter.minutesFormat(format),\r\n          showAM = $dateFormatter.showAM(format);\r\n\r\n        scope.$iconUp = options.iconUp;\r\n        scope.$iconDown = options.iconDown;\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function(date, index) {\r\n          $timepicker.select(date, index);\r\n        };\r\n        scope.$moveIndex = function(value, index) {\r\n          $timepicker.$moveIndex(value, index);\r\n        };\r\n        scope.$switchMeridian = function(date) {\r\n          $timepicker.switchMeridian(date);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $timepicker.update = function(date) {\r\n          // console.warn('$timepicker.update() newValue=%o', date);\r\n          if(angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $timepicker.$date = date;\r\n            angular.extend(viewDate, {hour: date.getHours(), minute: date.getMinutes(), second: date.getSeconds(), millisecond: date.getMilliseconds()});\r\n            $timepicker.$build();\r\n          } else if(!$timepicker.$isBuilt) {\r\n            $timepicker.$build();\r\n          }\r\n        };\r\n\r\n        $timepicker.select = function(date, index, keep) {\r\n          // console.warn('$timepicker.select', date, scope.$mode);\r\n          if(!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\r\n          if(!angular.isDate(date)) date = new Date(date);\r\n          if(index === 0) controller.$dateValue.setHours(date.getHours());\r\n          else if(index === 1) controller.$dateValue.setMinutes(date.getMinutes());\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n          if(options.autoclose && !keep) {\r\n            $timeout(function() { $timepicker.hide(true); });\r\n          }\r\n        };\r\n\r\n        $timepicker.switchMeridian = function(date) {\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            return;\r\n          }\r\n          var hours = (date || controller.$dateValue).getHours();\r\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $timepicker.$build = function() {\r\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\r\n          var i, midIndex = scope.midIndex = parseInt(options.length / 2, 10);\r\n          var hours = [], hour;\r\n          for(i = 0; i < options.length; i++) {\r\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\r\n            hours.push({date: hour, label: formatDate(hour, hoursFormat), selected: $timepicker.$date && $timepicker.$isSelected(hour, 0), disabled: $timepicker.$isDisabled(hour, 0)});\r\n          }\r\n          var minutes = [], minute;\r\n          for(i = 0; i < options.length; i++) {\r\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\r\n            minutes.push({date: minute, label: formatDate(minute, minutesFormat), selected: $timepicker.$date && $timepicker.$isSelected(minute, 1), disabled: $timepicker.$isDisabled(minute, 1)});\r\n          }\r\n\r\n          var rows = [];\r\n          for(i = 0; i < options.length; i++) {\r\n            rows.push([hours[i], minutes[i]]);\r\n          }\r\n          scope.rows = rows;\r\n          scope.showAM = showAM;\r\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\r\n          scope.timeSeparator = timeSeparator;\r\n          $timepicker.$isBuilt = true;\r\n        };\r\n\r\n        $timepicker.$isSelected = function(date, index) {\r\n          if(!$timepicker.$date) return false;\r\n          else if(index === 0) {\r\n            return date.getHours() === $timepicker.$date.getHours();\r\n          } else if(index === 1) {\r\n            return date.getMinutes() === $timepicker.$date.getMinutes();\r\n          }\r\n        };\r\n\r\n        $timepicker.$isDisabled = function(date, index) {\r\n          var selectedTime;\r\n          if(index === 0) {\r\n            selectedTime = date.getTime() + viewDate.minute * 6e4;\r\n          } else if(index === 1) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5;\r\n          }\r\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\r\n        };\r\n\r\n        scope.$arrowAction = function (value, index) {\r\n          if (options.arrowBehavior === 'picker') {\r\n            $timepicker.$setTimeByStep(value,index);\r\n          } else {\r\n            $timepicker.$moveIndex(value,index);\r\n          }\r\n        };\r\n\r\n        $timepicker.$setTimeByStep = function(value, index) {\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours(), hoursLength = formatDate(newDate, hoursFormat).length;\r\n          var minutes = newDate.getMinutes(), minutesLength = formatDate(newDate, minutesFormat).length;\r\n          if (index === 0) {\r\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\r\n          }\r\n          else {\r\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\r\n          }\r\n          $timepicker.select(newDate, index, true);\r\n        };\r\n\r\n        $timepicker.$moveIndex = function(value, index) {\r\n          var targetDate;\r\n          if(index === 0) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute);\r\n            angular.extend(viewDate, {hour: targetDate.getHours()});\r\n          } else if(index === 1) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep));\r\n            angular.extend(viewDate, {minute: targetDate.getMinutes()});\r\n          }\r\n          $timepicker.$build();\r\n        };\r\n\r\n        $timepicker.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          if(evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if(isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $timepicker.$onKeyDown = function(evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Close on enter\r\n          if(evt.keyCode === 13) return $timepicker.hide(true);\r\n\r\n          // Navigate with keyboard\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours(), hoursLength = formatDate(newDate, hoursFormat).length;\r\n          var minutes = newDate.getMinutes(), minutesLength = formatDate(newDate, minutesFormat).length;\r\n          var lateralMove = /(37|39)/.test(evt.keyCode);\r\n          var count = 2 + showAM * 1;\r\n\r\n          // Navigate indexes (left, right)\r\n          if (lateralMove) {\r\n            if(evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\r\n            else if(evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\r\n          }\r\n\r\n          // Update values (up, down)\r\n          var selectRange = [0, hoursLength];\r\n          if(selectedIndex === 0) {\r\n            if(evt.keyCode === 38) newDate.setHours(hours - parseInt(options.hourStep, 10));\r\n            else if(evt.keyCode === 40) newDate.setHours(hours + parseInt(options.hourStep, 10));\r\n            // re-calculate hours length because we have changed hours value\r\n            hoursLength = formatDate(newDate, hoursFormat).length;\r\n            selectRange = [0, hoursLength];\r\n          } else if(selectedIndex === 1) {\r\n            if(evt.keyCode === 38) newDate.setMinutes(minutes - parseInt(options.minuteStep, 10));\r\n            else if(evt.keyCode === 40) newDate.setMinutes(minutes + parseInt(options.minuteStep, 10));\r\n            // re-calculate minutes length because we have changes minutes value\r\n            minutesLength = formatDate(newDate, minutesFormat).length;\r\n            selectRange = [hoursLength + 1, hoursLength + 1 + minutesLength];\r\n          } else if(selectedIndex === 2) {\r\n            if(!lateralMove) $timepicker.switchMeridian();\r\n            selectRange = [hoursLength + 1 + minutesLength + 1, hoursLength + 1 + minutesLength + 3];\r\n          }\r\n          $timepicker.select(newDate, selectedIndex, true);\r\n          createSelection(selectRange[0], selectRange[1]);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function createSelection(start, end) {\r\n          if(element[0].createTextRange) {\r\n            var selRange = element[0].createTextRange();\r\n            selRange.collapse(true);\r\n            selRange.moveStart('character', start);\r\n            selRange.moveEnd('character', end);\r\n            selRange.select();\r\n          } else if(element[0].setSelectionRange) {\r\n            element[0].setSelectionRange(start, end);\r\n          } else if(angular.isUndefined(element[0].selectionStart)) {\r\n            element[0].selectionStart = start;\r\n            element[0].selectionEnd = end;\r\n          }\r\n        }\r\n\r\n        function focusElement() {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $timepicker.init;\r\n        $timepicker.init = function() {\r\n          if(isNative && options.useNative) {\r\n            element.prop('type', 'time');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if(isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $timepicker.destroy;\r\n        $timepicker.destroy = function() {\r\n          if(isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $timepicker.show;\r\n        $timepicker.show = function() {\r\n          _show();\r\n          // use timeout to hookup the events to prevent \r\n          // event bubbling from being processed imediately. \r\n          $timeout(function() {\r\n            $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n            if(options.keyboard) {\r\n              element.on('keydown', $timepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $timepicker.hide;\r\n        $timepicker.hide = function(blur) {\r\n          if(!$timepicker.$isShown) return;\r\n          $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n          if(options.keyboard) {\r\n            element.off('keydown', $timepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $timepicker;\r\n\r\n      }\r\n\r\n      timepickerFactory.defaults = defaults;\r\n      return timepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsTimepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\r\n\r\n    var defaults = $timepicker.defaults;\r\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, controller: controller};\r\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'autoclose', 'timeType', 'timeFormat', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!timepicker || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\r\n          newValue === true ? timepicker.show() : timepicker.hide();\r\n        });\r\n\r\n        // Initialize timepicker\r\n        if(isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\r\n        var timepicker = $timepicker(element, controller, options);\r\n        options = timepicker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function(date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        // Initialize parser\r\n        var dateParser = $dateParser({format: options.timeFormat, lang: lang});\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minTime', 'maxTime'], function(key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\r\n            timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\r\n            !isNaN(timepicker.$options[key]) && timepicker.$build();\r\n            validateAgainstMinMaxTime(controller.$dateValue);\r\n          });\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\r\n          timepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        function validateAgainstMinMaxTime(parsedTime) {\r\n          if (!angular.isDate(parsedTime)) return;\r\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\r\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if(!isValid) {\r\n              return;\r\n          }\r\n          controller.$dateValue = parsedTime;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function(viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          // Null values should correctly reset the model value & validity\r\n          if(!viewValue) {\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3 \r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            controller.$setValidity('date', true);\r\n            return null;\r\n          }\r\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\r\n          if(!parsedTime || isNaN(parsedTime.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to \r\n            // invalidate model value \r\n            return;\r\n          } else {\r\n            validateAgainstMinMaxTime(parsedTime);\r\n          }\r\n          if(options.timeType === 'string') {\r\n            return formatDate(parsedTime, options.modelTimeFormat || options.timeFormat);\r\n          } else if(options.timeType === 'number') {\r\n            return controller.$dateValue.getTime();\r\n          } else if(options.timeType === 'iso') {\r\n            return controller.$dateValue.toISOString();\r\n          } else {\r\n            return new Date(controller.$dateValue);\r\n          }\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function(modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if(angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if(angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if(options.timeType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\r\n          controller.$dateValue = date;\r\n          return getTimeFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function() {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getTimeFormattedString());\r\n        };\r\n\r\n        function getTimeFormattedString() {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (timepicker) timepicker.destroy();\r\n          options = null;\r\n          timepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}