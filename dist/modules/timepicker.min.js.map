{"version":3,"sources":["modules/timepicker.js"],"names":["angular","container","provider","keyboard","this","defaults","html","delay","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","length","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","isNative","$get","$timepicker","$tooltip","element","extend","config","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","select","end","start","setSelectionRange","isUndefined","collapse","selectionStart","moveStart","selectionEnd","moveEnd","focusElement","focus","_init","init","parentScope","floorMinutes","time","options","scope","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","controller","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","index","$moveIndex","value","$switchMeridian","switchMeridian","isDate","isNaN","getMinutes","getTime","$build","$setViewValue","$timeout","keep","hide","Date","setHours","setMinutes","setSeconds","copy","$render","midIndex","parseInt","hours","push","disabled","label","selected","i","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","$onMouseDown","evt","target","nodeName","stopPropagation","targetEl","triggerHandler","preventDefault","isTouch","$onKeyDown","test","keyCode","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","$digest","createTextRange","prop","attr","_destroy","destroy","off","_show","show","_hide","$element","blur","directive","$options","require","restrict","$window","navigator","userAgent","link","falseValueRegExp","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","forEach","key","isDefined","timepicker","newValue","oldValue","isString","$watch","bsShow","match","dateParser","$dateParser","validateAgainstMinMaxTime","ngModel","update","timezoneOffsetAdjust","$formatters","modelValue","NaN","parse","$on"],"mappings":"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","file":"modules/timepicker.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}