{"version":3,"file":"timepicker.min.js","sources":["timepicker/timepicker.js"],"names":[],"mappings":"qBASM,OAAA,6BAAA,oCAAA,oCAEA,cAAA,cAEA,GAAA,KAAA,UACA,UAAA,UACA,YAAA,aACA,UAAA,cACA,SAAA,iCACA,QAAA,QACA,WAAA,EACA,UAAA,EACA,MAAA,EACA,MAAA,EAEA,WAAA,EACA,SAAA,OACA,WAAA,YACA,gBAAA,KACA,WAAA,EACA,SAAA,IACF,SAAA,aAEA,SAAY,eAEV,OAAA,iCACA,SAAA,mCACA,cAAA,cAGA,MAAA,UAAA,YAAA,aAAA,OAAA,UAAA,aAAA,WAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,WAOE,GAAA,EAAA,EAAA,WAuME,GAAA,EAAA,MACE,EAAA,GAAA,gBAAA,CACF,GAAA,GAAA,EAAA,GAAA,iBACE,GAAA,UAAA,GACA,EAAA,UAAA,YAAA,GACF,EAAA,QAAA,YAAA,GACF,EAAA,qCAEA,EAAA,GAAA,kBAAA,EAAA,GACE,QAAA,YAAA,EAAA,GAAA,kBACF,EAAA,GAAA,eAAA,uBAKA,QAAA,KACE,EAAA,GAAA,QArNF,GAAA,GAAA,EAAA,EAAA,QAAA,UAAA,EAAA,IACA,EAAA,EAAA,MACA,EAAA,EAAA,oBAKA,EAAA,2BAEA,GAAA,KAAA,EAAA,WAAA,SAAA,EAAA,WAAA,GAAA,OAAA,EAAA,aAAA,OAAA,EAAA,aAAA,YAAA,EAAA,mBAEA,EAAA,EAAA,iBAAA,EAAA,aAAA,EAAA,WACE,EAAA,4BAAA,KAAA,GAAA,MAAA,EACF,GAAA,QAAA,EAAA,OACA,EAAA,UAAA,EAAA,WAIE,QAAA,SAAA,EAAA,GACF,EAAA,OAAA,EAAA,IAEA,EAAA,WAAA,SAAA,EAAA,wBAGE,gBAAA,SAAA,GACA,EAAA,eAAA,MAKE,OAAA,SAAA,GAEJ,QAAA,OAAA,KAAA,MAAA,EAAA,sBAEA,QAAA,OAAA,GAAA,KAAA,EAAA,WAAA,OAAA,EAAA,aAAA,OAAA,EAAA,aAAA,YAAA,EAAA,oBACE,EAAA,UACA,EAAA,UACA,EAAA,YAIA,OAAA,SAAA,EAAA,EAAA,KAEE,EAAA,YAAA,MAAA,EAAA,WAAA,cAAA,EAAA,WAAA,GAAA,MAAA,KAAA,EAAA,IACF,QAAA,OAAA,KAAA,EAAA,GAAA,MAAA,IACF,IAAA,EAAA,EAAA,WAAA,SAAA,EAAA,2DAEA,EAAA,cAAA,EAAA,YACE,EAAA,UACA,EAAA,YAAA,GACA,EAAA,MAAA,IAIF,EAAA,eAAA,SAAA,qCAEA,GAAA,WAAA,SAAA,GAAA,EAAA,EAAA,GAAA,EAAA,IACE,EAAA,cAAA,EAAA,YACA,EAAA,aAKA,OAAA,WAEA,GAAA,GACE,EADF,EAAA,EAAA,SAAA,SAAA,EAAA,OAAA,EAAA,IACE,SACA,EAAA,EAAA,EAAA,EAAA,OAAA,IACF,EAAA,GAAA,MAAA,KAAA,EAAA,EAAA,EAAA,MAAA,EAAA,GAAA,EAAA,2GAGA,IAAA,GAAA,SACE,EAAA,EAAA,EAAA,EAAA,OAAA,IACF,EAAA,GAAA,MAAA,KAAA,EAAA,EAAA,EAAA,EAAA,QAAA,EAAA,GAAA,EAAA,YACA,EAAA,MAAA,KAAA,EAAA,MAAA,EAAA,EAAA,EAAA,IAAA,SAAA,EAAA,OAAA,EAAA,YAAA,EAAA,GAAA,SAAA,EAAA,YAAA,EAAA,IAGA,IAAA,KACA,KAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IACF,EAAA,MAAA,EAAA,GAAA,EAAA,IAEA,GAAA,KAAA,EACE,EAAA,SAAA,EAAA,GACA,EAAA,MAAA,EAAA,OAAA,EAAA,GAAA,MAAA,WAAA,KACE,cAAA,EAAA,GACF,EAAA,UAAA,GAGF,EAAA,YAAA,SAAA,EAAA,kBAEA,IAAA,EACE,EAAA,aAAA,EAAA,MAAA,WACA,IAAA,EACE,EAAA,eAAA,EAAA,MAAA,aADF,aAKA,YAAA,SAAA,EAAA,GACF,GAAA,gBAEA,EAAA,EAAA,UAAA,IAAA,EAAA,OACE,IAAA,IACE,EAAA,EAAA,UAAA,KAAA,EAAA,MAEA,EAAA,EAAA,EAAA,SAAA,EAAA,EAAA,EAAA,sCAIJ,WAAA,EAAA,cACE,EAAA,eAAA,EAAA,GAEA,EAAA,WAAA,EAAA,MAIA,eAAA,SAAA,EAAA,OACE,GAAA,GAAA,MAAA,EAAA,OACF,EAAA,EAAA,WACA,GADA,EAAA,EAAA,KAAA,OACA,EAAA,aAAA,GAAA,EAAA,MAAA,OACA,IAAA,EACF,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,IAAA,GAGE,EAAA,WAAA,EAAA,SAAA,EAAA,WAAA,IAAA,KAEE,OAAA,EAAA,GAAA,KACA,aAGA,WAAA,SAAA,EAAA,GACF,GAAA,EACA,KAAA,GACF,EAAA,GAAA,MAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,OAAA,EAAA,+CAEA,IAAA,IACE,EAAA,GAAA,MAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,OAAA,EAAA,EAAA,OAAA,EAAA,YACA,QAAA,OAAA,GAAA,OAAA,EAAA,gBAEA,EAAA,YAGE,aAAA,SAAA,GAKJ,GAHI,UAAA,EAAA,OAAA,SAAA,eAAA,EAAA,mBACA,kBAEJ,EAAA,gCAEA,YAAA,EAAA,GAAA,SAAA,gBACE,EAAA,EAAA,UAEA,EAAA,eAAA,oCAKA,GAAA,mBAAA,KAAA,EAAA,WAAA,EAAA,WAAA,EAAA,OAAA,CAKA,GAJA,EAAA,iBACA,EAAA,kBAGA,KAAA,EAAA,QAAA,MAAA,GAAA,MAAA,EAGA,IAAA,GAAA,GAAA,MAAA,EAAA,OACE,EAAA,EAAA,WAAA,EAAA,EAAA,EAAA,KAAA,OACA,EAAA,EAAA,aAAA,EAAA,EAAA,EAAA,MAAA,OACF,EAAA,UAAA,KAAA,EAAA,qBAIA,KACE,KAAA,EAAA,QAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,KAAA,EAAA,UAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAIA,IAAA,EAAA,EACA,KAAA,GACF,KAAA,EAAA,QAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,KACE,KAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,KACA,GAAA,EAAA,IACF,IAAA,GACA,KAAA,EAAA,QAAA,EAAA,WAAA,EAAA,SAAA,EAAA,WAAA,KACA,KAAA,EAAA,SAAA,EAAA,WAAA,EAAA,SAAA,EAAA,WAAA,KACA,GAAA,EAAA,EAAA,EAAA,EAAA,IACF,IAAA,0BAEA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,EAAA,OAAA,EAAA,GAAA,GACE,EAAA,EAAA,GAAA,EAAA,MACE,eA0BA,GAAA,EAAA,OACA,KAAA,iBACA,IAAA,EAAA,WACF,EAAA,KAAA,OAAA,YACA,GAAA,IAAA,qBAAA,mBAGF,EAAA,KAAA,OAAA,QACA,EAAA,KAAA,WAAA,QACE,EAAA,GAAA,QAAA,QAEA,sBAIF,GAAA,QAAA,WACA,GAAA,EAAA,WACE,EAAA,IAAA,QAAA,WAKE,GAAA,EAAA,OACF,KAAA,WACF,0BAEA,EAAA,SAAA,GAAA,EAAA,aAAA,YAAA,EAAA,cACA,EAAA,UACE,EAAA,GAAA,UAAA,EAAA,cAKF,IAAA,GAAA,EAAA,IASH,2BAPG,EAAA,SAAA,IAAA,EAAA,aAAA,YAAA,EAAA,0BAEF,EAAA,IAAA,UAAA,EAAA,YAEA,EAAA,IAGD,KA1QG,IADA,QAAA,QAAA,EAAA,SAAA,MACA,8BAAA,KAAA,EAAA,UAAA,YACA,EAAA,eAAA,GAAA,UAAA,CA8QN,OA7QM,GAAA,OAAA,EAAA,KAAA,EAAA,iBA6QN,gBAOI,gBAAA,UAAA,SAAA,KAAA,UAAA,aAAA,cAAA,cAAA,WAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAEA,GAAA,EAAA,oEAEE,GAAA,uBAAA,EAAA,2BAGE,cACF,oCAIE,IAAA,MAAA,EAAA,WAAA,WACA,SAAA,YAAA,YAAA,QAAA,UAAA,WAAA,OAAA,YAAA,WAAA,YAAA,WAAA,aAAA,kBAAA,YAAA,WAAA,aAAA,SAAA,iBAAA,SAAA,GACA,QAAA,UAAA,EAAA,MAAA,EAAA,GAAA,EAAA,MAIF,EAAA,QAAA,EAAA,OAAA,EAAA,OAAA,SAAA,GACA,GAAA,QAAA,UAAA,KACA,QAAA,SAAA,KAAA,IAAA,EAAA,MAAA,iDAKA,IAAA,EAAA,WAAA,EAAA,aAAA,EAAA,WAAA,QACA,IAAA,GAAA,EAAA,EAAA,EAAA,KACE,EAAA,eAGI,GAAA,OAAA,EAAA,WAAA,KAAA,EAAA,eAGF,SAAA,UAAA,WAAA,SAAA,WAEA,UAAA,EAAA,KAAA,EAAA,SAAA,EAAA,SAAA,GAEF,EAAA,SAAA,GADE,QAAA,GACF,GAAA,OAAA,YAAA,KAAA,EAAA,GACF,QAAA,SAAA,IAAA,EAAA,MAAA,4CAGA,EAAA,MAAA,EAAA,GAAA,MAAA,KAAA,EAAA,EAAA,KAEE,MAAA,EAAA,SAAA,KAAA,EAAA,eAKA,OAAA,EAAA,QAAA,WAEA,EAAA,OAAA,EAAA,mBAIA,SAAA,QAAA,SAAA,GAGA,IAAA,EAEE,WADA,GAAA,aAAA,QAAA,MAGA,GAAA,QAAA,OAAA,GAAA,EAAA,EAAA,MAAA,EAAA,EAAA,WACF,KAAA,GAAA,MAAA,EAAA,WACA,EAAA,aAAA,QAAA,OACE,CACF,GAAA,GAAA,EAAA,WAAA,EAAA,SAAA,EAAA,WAAA,EAAA,OACE,GAAA,aAAA,OAAA,GAEA,IAAA,EAAA,WAAA,SAEA,WAAA,EAAA,SACF,EAAA,EAAA,EAAA,iBAAA,EAAA,YACF,WAAA,EAAA,gCAEA,QAAA,EAAA,SACA,EAAA,WAAA,cAEE,GAAA,MAAA,EAAA,gBAKA,YAAA,KAAA,SAAA,GAEA,GAAA,EAaF,OAXE,GADE,QAAA,YAAA,IAAA,OAAA,EACF,IACA,QAAA,OAAA,GACA,EACA,WAAA,EAAA,SACA,EAAA,MAAA,EAAA,KAAA,EAAA,6BAMA,EAAA,WAAA,EACF,EAAA,eAIE,QAAA,WAEA,EAAA,KAAA,EAAA,YAAA,MAAA,EAAA,WAAA,WAAA,GAAA,EAAA,EAAA,WAAA,EAAA,cAIN,EAAA,IAAA,WAAA,0BAED,EAAA","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      template: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function($window, $document, $rootScope, $sce, $locale, dateFilter, $tooltip) {\n\n      var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if(!defaults.lang) defaults.lang = $locale.id;\n\n      function timepickerFactory(element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        // View vars\n\n        var selectedIndex = 0;\n        var startDate = controller.$dateValue || new Date();\n        var viewDate = {hour: startDate.getHours(), meridian: startDate.getHours() < 12, minute: startDate.getMinutes(), second: startDate.getSeconds(), millisecond: startDate.getMilliseconds()};\n\n        var format = $locale.DATETIME_FORMATS[options.timeFormat] || options.timeFormat;\n        var formats = /(h+)([:\\.])?(m+)[ ]?(a?)/i.exec(format).slice(1);\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function(date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function(value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function(date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function(date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if(angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {hour: date.getHours(), minute: date.getMinutes(), second: date.getSeconds(), millisecond: date.getMilliseconds()});\n            $timepicker.$build();\n          } else if(!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function(date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if(!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\n          if(!angular.isDate(date)) date = new Date(date);\n          if(index === 0) controller.$dateValue.setHours(date.getHours());\n          else if(index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          controller.$setViewValue(controller.$dateValue);\n          controller.$render();\n          if(options.autoclose && !keep) {\n            $timepicker.hide(true);\n          }\n        };\n\n        $timepicker.switchMeridian = function(date) {\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(controller.$dateValue);\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function() {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i, midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [], hour;\n          for(i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({date: hour, label: dateFilter(hour, formats[0]), selected: $timepicker.$date && $timepicker.$isSelected(hour, 0), disabled: $timepicker.$isDisabled(hour, 0)});\n          }\n          var minutes = [], minute;\n          for(i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({date: minute, label: dateFilter(minute, formats[2]), selected: $timepicker.$date && $timepicker.$isSelected(minute, 1), disabled: $timepicker.$isDisabled(minute, 1)});\n          }\n\n          var rows = [];\n          for(i = 0; i < options.length; i++) {\n            rows.push([hours[i], minutes[i]]);\n          }\n          scope.rows = rows;\n          scope.showAM = !!formats[3];\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = formats[1];\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function(date, index) {\n          if(!$timepicker.$date) return false;\n          else if(index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if(index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          }\n        };\n\n        $timepicker.$isDisabled = function(date, index) {\n          var selectedTime;\n          if(index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4;\n          } else if(index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value,index);\n          } else {\n            $timepicker.$moveIndex(value,index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function(value, index) {\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours(), hoursLength = dateFilter(newDate, 'h').length;\n          var minutes = newDate.getMinutes(), minutesLength = dateFilter(newDate, 'mm').length;\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          }\n          else {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n          parentScope.$digest();\n        };\n\n        $timepicker.$moveIndex = function(value, index) {\n          var targetDate;\n          if(index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute);\n            angular.extend(viewDate, {hour: targetDate.getHours()});\n          } else if(index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep));\n            angular.extend(viewDate, {minute: targetDate.getMinutes()});\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if(evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if(isTouch) {\n            var targetEl = angular.element(evt.target);\n            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function(evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if(evt.keyCode === 13) return $timepicker.hide(true);\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours(), hoursLength = dateFilter(newDate, 'h').length;\n          var minutes = newDate.getMinutes(), minutesLength = dateFilter(newDate, 'mm').length;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + !!formats[3] * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if(evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if(evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          if(selectedIndex === 0) {\n            if(evt.keyCode === 38) newDate.setHours(hours - parseInt(options.hourStep, 10));\n            else if(evt.keyCode === 40) newDate.setHours(hours + parseInt(options.hourStep, 10));\n            selectRange = [0, hoursLength];\n          } else if(selectedIndex === 1) {\n            if(evt.keyCode === 38) newDate.setMinutes(minutes - parseInt(options.minuteStep, 10));\n            else if(evt.keyCode === 40) newDate.setMinutes(minutes + parseInt(options.minuteStep, 10));\n            selectRange = [hoursLength + 1, hoursLength + 1 + minutesLength];\n          } else if(selectedIndex === 2) {\n            if(!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + 1 + minutesLength + 1, hoursLength + 1 + minutesLength + 3];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection(start, end) {\n          if(element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if(element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if(angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function() {\n          if(isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if(isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function() {\n          if(isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function() {\n          _show();\n          setTimeout(function() {\n            $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if(options.keyboard) {\n              element.on('keydown', $timepicker.$onKeyDown);\n            }\n          });\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function(blur) {\n          $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if(options.keyboard) {\n            element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function($window, $parse, $q, $locale, dateFilter, $timepicker, $dateParser, $timeout) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, controller: controller};\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'autoclose', 'timeType', 'timeFormat', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'length', 'arrowBehavior'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!timepicker || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(',?(timepicker),?');\n          newValue === true ? timepicker.show() : timepicker.hide();\n        });\n\n        // Initialize timepicker\n        if(isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        // Initialize parser\n        var dateParser = $dateParser({format: options.timeFormat, lang: options.lang});\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function(key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\n            if(newValue === 'now') {\n              timepicker.$options[key] = new Date().setFullYear(1970, 0, 1);\n            } else if(angular.isString(newValue) && newValue.match(/^\".+\"$/)) {\n              timepicker.$options[key] = +new Date(newValue.substr(1, newValue.length - 2));\n            } else {\n              timepicker.$options[key] = dateParser.parse(newValue, new Date(1970, 0, 1, 0));\n            }\n            !isNaN(timepicker.$options[key]) && timepicker.$build();\n          });\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function(viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          // Null values should correctly reset the model value & validity\n          if(!viewValue) {\n            controller.$setValidity('date', true);\n            return;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if(!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n          } else {\n            var isValid = parsedTime.getTime() >= options.minTime && parsedTime.getTime() <= options.maxTime;\n            controller.$setValidity('date', isValid);\n            // Only update the model when we have a valid date\n            if(isValid) controller.$dateValue = parsedTime;\n          }\n          if(options.timeType === 'string') {\n            return dateFilter(parsedTime, options.modelTimeFormat || options.timeFormat);\n          } else if(options.timeType === 'number') {\n            return controller.$dateValue.getTime();\n          } else if(options.timeType === 'iso') {\n            return controller.$dateValue.toISOString();\n          } else {\n            return new Date(controller.$dateValue);\n          }\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if(angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if(angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if(options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = date;\n          return controller.$dateValue;\n        });\n\n        // viewValue -> element\n        controller.$render = function() {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(!controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : dateFilter(controller.$dateValue, options.timeFormat));\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}