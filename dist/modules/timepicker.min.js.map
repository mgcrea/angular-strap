{"version":3,"file":"timepicker.min.js","sources":["timepicker\\timepicker.js"],"names":["angular","module","provider","defaults","this","animation","prefixClass","placement","template","trigger","container","keyboard","html","delay","useNative","timeType","timeFormat","modelTimeFormat","autoclose","minTime","Infinity","maxTime","length","hourStep","minuteStep","iconUp","iconDown","$get","$window","$document","$rootScope","$sce","$locale","dateFilter","$tooltip","timepickerFactory","element","controller","config","createSelection","start","end","createTextRange","selRange","collapse","moveStart","moveEnd","select","setSelectionRange","isUndefined","selectionStart","selectionEnd","focusElement","focus","$timepicker","extend","parentScope","scope","options","$options","$scope","selectedIndex","startDate","$dateValue","Date","viewDate","hour","getHours","meridian","minute","getMinutes","second","getSeconds","millisecond","getMilliseconds","format","DATETIME_FORMATS","formats","exec","slice","$iconUp","$iconDown","$select","date","index","$moveIndex","value","$switchMeridian","switchMeridian","update","isDate","isNaN","getTime","$date","$build","$isBuilt","keep","setHours","setMinutes","$setViewValue","$render","hide","hours","i","midIndex","parseInt","push","label","selected","$isSelected","disabled","$isDisabled","minutes","rows","showAM","isAM","timeSeparator","selectedTime","targetDate","$onMouseDown","evt","target","nodeName","toLowerCase","preventDefault","stopPropagation","isTouch","targetEl","parent","triggerHandler","$onKeyDown","test","keyCode","shiftKey","altKey","newDate","hoursLength","minutesLength","lateralMove","count","selectRange","$digest","_init","init","isNative","prop","css","attr","on","_destroy","destroy","off","_show","show","setTimeout","$element","_hide","blur","document","body","navigator","userAgent","lang","id","directive","$parse","$q","$dateParser","requestAnimationFrame","restrict","require","link","forEach","key","isDefined","bsShow","$watch","newValue","timepicker","isString","match","dateParser","$observe","setFullYear","substr","parse","ngModel","$parsers","unshift","viewValue","$setValidity","parsedTime","isValid","toISOString","$formatters","modelValue","NaN","val","$on"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$timepicker', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'timepicker',\r\n      placement: 'bottom-left',\r\n      template: 'timepicker/timepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: true,\r\n      timeType: 'date',\r\n      timeFormat: 'shortTime',\r\n      modelTimeFormat: null,\r\n      autoclose: false,\r\n      minTime: -Infinity,\r\n      maxTime: +Infinity,\r\n      length: 5,\r\n      hourStep: 1,\r\n      minuteStep: 5,\r\n      iconUp: 'glyphicon glyphicon-chevron-up',\r\n      iconDown: 'glyphicon glyphicon-chevron-down'\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, $sce, $locale, dateFilter, $tooltip) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var isTouch = 'createTouch' in $window.document;\r\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      if(!defaults.lang) defaults.lang = $locale.id;\r\n\r\n      function timepickerFactory(element, controller, config) {\r\n\r\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $timepicker.$options;\r\n        var scope = $timepicker.$scope;\r\n\r\n        // View vars\r\n\r\n        var selectedIndex = 0;\r\n        var startDate = controller.$dateValue || new Date();\r\n        var viewDate = {hour: startDate.getHours(), meridian: startDate.getHours() < 12, minute: startDate.getMinutes(), second: startDate.getSeconds(), millisecond: startDate.getMilliseconds()};\r\n\r\n        var format = $locale.DATETIME_FORMATS[options.timeFormat] || options.timeFormat;\r\n        var formats = /(h+)([:\\.])?(m+)[ ]?(a?)/i.exec(format).slice(1);\r\n        scope.$iconUp = options.iconUp;\r\n        scope.$iconDown = options.iconDown;\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function(date, index) {\r\n          $timepicker.select(date, index);\r\n        };\r\n        scope.$moveIndex = function(value, index) {\r\n          $timepicker.$moveIndex(value, index);\r\n        };\r\n        scope.$switchMeridian = function(date) {\r\n          $timepicker.switchMeridian(date);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $timepicker.update = function(date) {\r\n          // console.warn('$timepicker.update() newValue=%o', date);\r\n          if(angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $timepicker.$date = date;\r\n            angular.extend(viewDate, {hour: date.getHours(), minute: date.getMinutes(), second: date.getSeconds(), millisecond: date.getMilliseconds()});\r\n            $timepicker.$build();\r\n          } else if(!$timepicker.$isBuilt) {\r\n            $timepicker.$build();\r\n          }\r\n        };\r\n\r\n        $timepicker.select = function(date, index, keep) {\r\n          // console.warn('$timepicker.select', date, scope.$mode);\r\n          if(!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\r\n          if(!angular.isDate(date)) date = new Date(date);\r\n          if(index === 0) controller.$dateValue.setHours(date.getHours());\r\n          else if(index === 1) controller.$dateValue.setMinutes(date.getMinutes());\r\n          controller.$setViewValue(controller.$dateValue);\r\n          controller.$render();\r\n          if(options.autoclose && !keep) {\r\n            $timepicker.hide(true);\r\n          }\r\n        };\r\n\r\n        $timepicker.switchMeridian = function(date) {\r\n          var hours = (date || controller.$dateValue).getHours();\r\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\r\n          controller.$setViewValue(controller.$dateValue);\r\n          controller.$render();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $timepicker.$build = function() {\r\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\r\n          var i, midIndex = scope.midIndex = parseInt(options.length / 2, 10);\r\n          var hours = [], hour;\r\n          for(i = 0; i < options.length; i++) {\r\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\r\n            hours.push({date: hour, label: dateFilter(hour, formats[0]), selected: $timepicker.$date && $timepicker.$isSelected(hour, 0), disabled: $timepicker.$isDisabled(hour, 0)});\r\n          }\r\n          var minutes = [], minute;\r\n          for(i = 0; i < options.length; i++) {\r\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\r\n            minutes.push({date: minute, label: dateFilter(minute, formats[2]), selected: $timepicker.$date && $timepicker.$isSelected(minute, 1), disabled: $timepicker.$isDisabled(minute, 1)});\r\n          }\r\n\r\n          var rows = [];\r\n          for(i = 0; i < options.length; i++) {\r\n            rows.push([hours[i], minutes[i]]);\r\n          }\r\n          scope.rows = rows;\r\n          scope.showAM = !!formats[3];\r\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\r\n          scope.timeSeparator = formats[1];\r\n          $timepicker.$isBuilt = true;\r\n        };\r\n\r\n        $timepicker.$isSelected = function(date, index) {\r\n          if(!$timepicker.$date) return false;\r\n          else if(index === 0) {\r\n            return date.getHours() === $timepicker.$date.getHours();\r\n          } else if(index === 1) {\r\n            return date.getMinutes() === $timepicker.$date.getMinutes();\r\n          }\r\n        };\r\n\r\n        $timepicker.$isDisabled = function(date, index) {\r\n          var selectedTime;\r\n          if(index === 0) {\r\n            selectedTime = date.getTime() + viewDate.minute * 6e4;\r\n          } else if(index === 1) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5;\r\n          }\r\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\r\n        };\r\n\r\n        $timepicker.$moveIndex = function(value, index) {\r\n          var targetDate;\r\n          if(index === 0) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute);\r\n            angular.extend(viewDate, {hour: targetDate.getHours()});\r\n          } else if(index === 1) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep));\r\n            angular.extend(viewDate, {minute: targetDate.getMinutes()});\r\n          }\r\n          $timepicker.$build();\r\n        };\r\n\r\n        $timepicker.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          if(evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if(isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $timepicker.$onKeyDown = function(evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Close on enter\r\n          if(evt.keyCode === 13) return $timepicker.hide(true);\r\n\r\n          // Navigate with keyboard\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours(), hoursLength = dateFilter(newDate, 'h').length;\r\n          var minutes = newDate.getMinutes(), minutesLength = dateFilter(newDate, 'mm').length;\r\n          var lateralMove = /(37|39)/.test(evt.keyCode);\r\n          var count = 2 + !!formats[3] * 1;\r\n\r\n          // Navigate indexes (left, right)\r\n          if (lateralMove) {\r\n            if(evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\r\n            else if(evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\r\n          }\r\n\r\n          // Update values (up, down)\r\n          var selectRange = [0, hoursLength];\r\n          if(selectedIndex === 0) {\r\n            if(evt.keyCode === 38) newDate.setHours(hours - parseInt(options.hourStep, 10));\r\n            else if(evt.keyCode === 40) newDate.setHours(hours + parseInt(options.hourStep, 10));\r\n            selectRange = [0, hoursLength];\r\n          } else if(selectedIndex === 1) {\r\n            if(evt.keyCode === 38) newDate.setMinutes(minutes - parseInt(options.minuteStep, 10));\r\n            else if(evt.keyCode === 40) newDate.setMinutes(minutes + parseInt(options.minuteStep, 10));\r\n            selectRange = [hoursLength + 1, hoursLength + 1 + minutesLength];\r\n          } else if(selectedIndex === 2) {\r\n            if(!lateralMove) $timepicker.switchMeridian();\r\n            selectRange = [hoursLength + 1 + minutesLength + 1, hoursLength + 1 + minutesLength + 3];\r\n          }\r\n          $timepicker.select(newDate, selectedIndex, true);\r\n          createSelection(selectRange[0], selectRange[1]);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function createSelection(start, end) {\r\n          if(element[0].createTextRange) {\r\n            var selRange = element[0].createTextRange();\r\n            selRange.collapse(true);\r\n            selRange.moveStart('character', start);\r\n            selRange.moveEnd('character', end);\r\n            selRange.select();\r\n          } else if(element[0].setSelectionRange) {\r\n            element[0].setSelectionRange(start, end);\r\n          } else if(angular.isUndefined(element[0].selectionStart)) {\r\n            element[0].selectionStart = start;\r\n            element[0].selectionEnd = end;\r\n          }\r\n        }\r\n\r\n        function focusElement() {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $timepicker.init;\r\n        $timepicker.init = function() {\r\n          if(isNative && options.useNative) {\r\n            element.prop('type', 'time');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if(isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $timepicker.destroy;\r\n        $timepicker.destroy = function() {\r\n          if(isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $timepicker.show;\r\n        $timepicker.show = function() {\r\n          _show();\r\n          setTimeout(function() {\r\n            $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n            if(options.keyboard) {\r\n              element.on('keydown', $timepicker.$onKeyDown);\r\n            }\r\n          });\r\n        };\r\n\r\n        var _hide = $timepicker.hide;\r\n        $timepicker.hide = function(blur) {\r\n          $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n          if(options.keyboard) {\r\n            element.off('keydown', $timepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $timepicker;\r\n\r\n      }\r\n\r\n      timepickerFactory.defaults = defaults;\r\n      return timepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsTimepicker', function($window, $parse, $q, $locale, dateFilter, $timepicker, $dateParser, $timeout) {\r\n\r\n    var defaults = $timepicker.defaults;\r\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, controller: controller};\r\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'autoclose', 'timeType', 'timeFormat', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'length'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!timepicker || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = newValue.match(',?(timepicker),?');\r\n          newValue === true ? timepicker.show() : timepicker.hide();\r\n        });\r\n\r\n        // Initialize timepicker\r\n        if(isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\r\n        var timepicker = $timepicker(element, controller, options);\r\n        options = timepicker.$options;\r\n\r\n        // Initialize parser\r\n        var dateParser = $dateParser({format: options.timeFormat, lang: options.lang});\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minTime', 'maxTime'], function(key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\r\n            if(newValue === 'now') {\r\n              timepicker.$options[key] = new Date().setFullYear(1970, 0, 1);\r\n            } else if(angular.isString(newValue) && newValue.match(/^\".+\"$/)) {\r\n              timepicker.$options[key] = +new Date(newValue.substr(1, newValue.length - 2));\r\n            } else {\r\n              timepicker.$options[key] = dateParser.parse(newValue, new Date(1970, 0, 1, 0));\r\n            }\r\n            !isNaN(timepicker.$options[key]) && timepicker.$build();\r\n          });\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\r\n          timepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function(viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          // Null values should correctly reset the model value & validity\r\n          if(!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            return;\r\n          }\r\n          var parsedTime = dateParser.parse(viewValue, controller.$dateValue);\r\n          if(!parsedTime || isNaN(parsedTime.getTime())) {\r\n            controller.$setValidity('date', false);\r\n          } else {\r\n            var isValid = parsedTime.getTime() >= options.minTime && parsedTime.getTime() <= options.maxTime;\r\n            controller.$setValidity('date', isValid);\r\n            // Only update the model when we have a valid date\r\n            if(isValid) controller.$dateValue = parsedTime;\r\n          }\r\n          if(options.timeType === 'string') {\r\n            return dateFilter(parsedTime, options.modelTimeFormat || options.timeFormat);\r\n          } else if(options.timeType === 'number') {\r\n            return controller.$dateValue.getTime();\r\n          } else if(options.timeType === 'iso') {\r\n            return controller.$dateValue.toISOString();\r\n          } else {\r\n            return new Date(controller.$dateValue);\r\n          }\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function(modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if(angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if(angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if(options.timeType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\r\n          controller.$dateValue = date;\r\n          return controller.$dateValue;\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function() {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(!controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : dateFilter(controller.$dateValue, options.timeFormat));\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          timepicker.destroy();\r\n          options = null;\r\n          timepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}