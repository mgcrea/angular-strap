{"version":3,"sources":["modules/timepicker.js"],"names":["angular","container","provider","keyboard","this","defaults","html","delay","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","length","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","isNative","$get","$timepicker","$tooltip","element","extend","config","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","select","end","start","setSelectionRange","isUndefined","collapse","selectionStart","moveStart","selectionEnd","moveEnd","focusElement","focus","_init","init","parentScope","floorMinutes","time","options","scope","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","controller","$dateValue","hoursFormat","$dateFormatter","$iconUp","$iconDown","$select","$moveIndex","value","index","$switchMeridian","switchMeridian","isDate","isNaN","getMinutes","getTime","$build","minute","$setViewValue","$timeout","keep","hide","Date","setHours","setMinutes","setSeconds","copy","$render","hours","midIndex","push","label","selected","$isSelected","disabled","i","minutes","seconds","minutesFormat","rows","showSeconds","secondsFormat","$isDisabled","showAM","timeSeparator","$date","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","parseInt","targetDate","$onMouseDown","evt","target","nodeName","stopPropagation","targetEl","triggerHandler","preventDefault","isTouch","$onKeyDown","test","keyCode","sepLength","lateralMove","count","minutesLength","selectRange","hoursLength","incr","isSeconds","isMeridian","secondsLength","createSelection","$digest","createTextRange","prop","attr","_destroy","destroy","off","_show","show","_hide","blur","$element","directive","$options","require","restrict","$window","navigator","userAgent","link","falseValueRegExp","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","bsShow","newValue","oldValue","timepicker","isDefined","key","forEach","dateParser","$dateParser","$observe","validateAgainstMinMaxTime","$watch","ngModel","getTimeForAttribute","parse","timezoneOffsetAdjust","$formatters","modelValue","NaN","$on"],"mappings":"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","file":"modules/timepicker.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      //uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory(element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function(date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes(time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format),\n          timeSeparator = $dateFormatter.timeSeparator(format),\n          minutesFormat = $dateFormatter.minutesFormat(format),\n          secondsFormat = $dateFormatter.secondsFormat(format),\n          showSeconds = $dateFormatter.showSeconds(format),\n          showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function(date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function(value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function(date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function(date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function(date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function() {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function(date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function() {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i, midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [],\n            hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [],\n            minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [],\n            second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function(date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function(date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function(value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function(value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function(value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function(evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours(),\n            hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes(),\n            minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds(),\n            secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection(start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function() {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function() {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function() {\n          if((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            $timepicker.$element && $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              element && element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function(blur) {\n          if (!$timepicker.$isShown) return;\n          $timepicker.$element && $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            element && element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent'], function(key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function(key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if (!timepicker || !angular.isDefined(newValue)) return;\n          if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n          newValue === true ? timepicker.show() : timepicker.hide();\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function(date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function(key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\n            timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n            !isNaN(timepicker.$options[key]) && timepicker.$build();\n            validateAgainstMinMaxTime(controller.$dateValue);\n          });\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime(parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function(viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          } else {\n            validateAgainstMinMaxTime(parsedTime);\n          }\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          } else {\n            return new Date(date);\n          }\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function() {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}