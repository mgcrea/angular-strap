{"version":3,"file":"select.min.js","sources":["select/select.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      template: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok'\n    };\n\n    this.$get = function($window, $document, $rootScope, $tooltip) {\n\n      var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory(element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        scope.$activeIndex = 0;\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n\n        scope.$activate = function(index) {\n          scope.$$postDigest(function() {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function(index, evt) {\n          scope.$$postDigest(function() {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function() {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function(index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function(matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function(index) {\n          if(options.multiple) {\n            scope.$activeIndex.sort();\n            $select.$isActive(index) ? scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1) : scope.$activeIndex.push(index);\n            if(options.sort) scope.$activeIndex.sort();\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function(index) {\n          var value = scope.$matches[index].value;\n          scope.$apply(function() {\n            $select.activate(index);\n            if(options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function(index) {\n                return scope.$matches[index].value;\n              }));\n            } else {\n              controller.$setViewValue(value);\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index);\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function() {\n          if(controller.$modelValue && scope.$matches.length) {\n            if(options.multiple && angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function(value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            }\n          } else if(scope.$activeIndex >= scope.$matches.length) {\n            scope.$activeIndex = options.multiple ? [] : 0;\n          }\n        };\n\n        $select.$isVisible = function() {\n          if(!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function(index) {\n          if(options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          } else {\n            return scope.$activeIndex === index;\n          }\n        };\n\n        $select.$getIndex = function(value) {\n          var l = scope.$matches.length, i = l;\n          if(!l) return;\n          for(i = l; i--;) {\n            if(scope.$matches[i].value === value) break;\n          }\n          if(i < 0) return;\n          return i;\n        };\n\n        $select.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if(isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function(evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Select with enter\n          if(!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          // Navigate with keyboard\n          if(evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n          else if(evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n          else if(angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function() {\n          _show();\n          if(options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          setTimeout(function() {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if(options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          });\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function() {\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if(options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'placeholder', 'multiple', 'allNoneButtons', 'maxLength', 'maxLengthHtml'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Add support for select markup\n        if(element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper ngOptions\n        var parsedOptions = $parseOptions(attr.ngOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        // Watch ngOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function(values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected, index;\n          if(options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function(value) {\n              index = select.$getIndex(value);\n              return angular.isDefined(index) ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if(selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = angular.isDefined(index) ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected ? selected : attr.placeholder || defaults.placeholder) + defaults.caretHtml);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}