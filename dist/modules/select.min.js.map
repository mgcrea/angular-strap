{"version":3,"sources":["select/select.js"],"names":["angular","module","provider","defaults","this","animation","prefixClass","prefixEvent","placement","template","trigger","container","keyboard","html","delay","multiple","allNoneButtons","sort","caretHtml","placeholder","maxLength","maxLengthHtml","iconCheckmark","$get","$window","$document","$rootScope","$tooltip","SelectFactory","element","controller","config","$select","options","extend","scope","$scope","$matches","$activeIndex","$isMultiple","$showAllNoneButtons","$iconCheckmark","$activate","index","$$postDigest","activate","select","$isVisible","$isActive","$selectAll","i","length","$selectNone","update","matches","$updateActiveIndex","splice","indexOf","push","value","$apply","$setViewValue","map","hide","$emit","$modelValue","isArray","$getIndex","minLength","$viewValue","l","$onMouseDown","evt","preventDefault","stopPropagation","isTouch","targetEl","target","triggerHandler","$onKeyDown","test","keyCode","isUndefined","$digest","_show","show","$element","addClass","setTimeout","on","_hide","off","isNative","document","body","navigator","userAgent","directive","$parse","$q","$parseOptions","restrict","require","link","attr","forEach","key","isDefined","nodeName","toLowerCase","inputEl","css","after","parsedOptions","ngOptions","watchedOptions","$match","replace","trim","$watch","valuesFn","then","values","$render","ngModel","selected","label","filter","join","$on","destroy"],"mappings":"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","file":"select.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      template: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok'\n    };\n\n    this.$get = function($window, $document, $rootScope, $tooltip) {\n\n      var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory(element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        scope.$activeIndex = 0;\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n\n        scope.$activate = function(index) {\n          scope.$$postDigest(function() {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function(index, evt) {\n          scope.$$postDigest(function() {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function() {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function(index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function(matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function(index) {\n          if(options.multiple) {\n            scope.$activeIndex.sort();\n            $select.$isActive(index) ? scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1) : scope.$activeIndex.push(index);\n            if(options.sort) scope.$activeIndex.sort();\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function(index) {\n          var value = scope.$matches[index].value;\n          scope.$apply(function() {\n            $select.activate(index);\n            if(options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function(index) {\n                return scope.$matches[index].value;\n              }));\n            } else {\n              controller.$setViewValue(value);\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index);\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function() {\n          if(controller.$modelValue && scope.$matches.length) {\n            if(options.multiple && angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function(value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            }\n          } else if(scope.$activeIndex >= scope.$matches.length) {\n            scope.$activeIndex = options.multiple ? [] : 0;\n          }\n        };\n\n        $select.$isVisible = function() {\n          if(!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function(index) {\n          if(options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          } else {\n            return scope.$activeIndex === index;\n          }\n        };\n\n        $select.$getIndex = function(value) {\n          var l = scope.$matches.length, i = l;\n          if(!l) return;\n          for(i = l; i--;) {\n            if(scope.$matches[i].value === value) break;\n          }\n          if(i < 0) return;\n          return i;\n        };\n\n        $select.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if(isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function(evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Select with enter\n          if(!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          // Navigate with keyboard\n          if(evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n          else if(evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n          else if(angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function() {\n          _show();\n          if(options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          setTimeout(function() {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if(options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          });\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function() {\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if(options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'placeholder', 'multiple', 'allNoneButtons', 'maxLength', 'maxLengthHtml'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Add support for select markup\n        if(element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper ngOptions\n        var parsedOptions = $parseOptions(attr.ngOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        // Watch ngOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function(values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected, index;\n          if(options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function(value) {\n              index = select.$getIndex(value);\n              return angular.isDefined(index) ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if(selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = angular.isDefined(index) ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected ? selected : attr.placeholder || defaults.placeholder) + defaults.caretHtml);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}