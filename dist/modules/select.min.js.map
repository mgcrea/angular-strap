{"version":3,"sources":["select/select.js"],"names":[],"mappings":"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","file":"select.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$select', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'select',\r\n      prefixEvent: '$select',\r\n      placement: 'bottom-left',\r\n      template: 'select/select.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      multiple: false,\r\n      allNoneButtons: false,\r\n      sort: true,\r\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\r\n      placeholder: 'Choose among the following...',\r\n      maxLength: 3,\r\n      maxLengthHtml: 'selected',\r\n      iconCheckmark: 'glyphicon glyphicon-ok'\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n\r\n      function SelectFactory(element, controller, config) {\r\n\r\n        var $select = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $select = $tooltip(element, options);\r\n        var scope = $select.$scope;\r\n\r\n        scope.$matches = [];\r\n        scope.$activeIndex = 0;\r\n        scope.$isMultiple = options.multiple;\r\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\r\n        scope.$iconCheckmark = options.iconCheckmark;\r\n\r\n        scope.$activate = function(index) {\r\n          scope.$$postDigest(function() {\r\n            $select.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function(index, evt) {\r\n          scope.$$postDigest(function() {\r\n            $select.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function() {\r\n          return $select.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function(index) {\r\n          return $select.$isActive(index);\r\n        };\r\n\r\n        scope.$selectAll = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (!scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        scope.$selectNone = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $select.update = function(matches) {\r\n          scope.$matches = matches;\r\n          $select.$updateActiveIndex();\r\n        };\r\n\r\n        $select.activate = function(index) {\r\n          if(options.multiple) {\r\n            scope.$activeIndex.sort();\r\n            $select.$isActive(index) ? scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1) : scope.$activeIndex.push(index);\r\n            if(options.sort) scope.$activeIndex.sort();\r\n          } else {\r\n            scope.$activeIndex = index;\r\n          }\r\n          return scope.$activeIndex;\r\n        };\r\n\r\n        $select.select = function(index) {\r\n          var value = scope.$matches[index].value;\r\n          scope.$apply(function() {\r\n            $select.activate(index);\r\n            if(options.multiple) {\r\n              controller.$setViewValue(scope.$activeIndex.map(function(index) {\r\n                return scope.$matches[index].value;\r\n              }));\r\n            } else {\r\n              controller.$setViewValue(value);\r\n              // Hide if single select\r\n              $select.hide();\r\n            }\r\n          });\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $select.$updateActiveIndex = function() {\r\n          if(controller.$modelValue && scope.$matches.length) {\r\n            if(options.multiple && angular.isArray(controller.$modelValue)) {\r\n              scope.$activeIndex = controller.$modelValue.map(function(value) {\r\n                return $select.$getIndex(value);\r\n              });\r\n            } else {\r\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\r\n            }\r\n          } else if(scope.$activeIndex >= scope.$matches.length) {\r\n            scope.$activeIndex = options.multiple ? [] : 0;\r\n          }\r\n        };\r\n\r\n        $select.$isVisible = function() {\r\n          if(!options.minLength || !controller) {\r\n            return scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $select.$isActive = function(index) {\r\n          if(options.multiple) {\r\n            return scope.$activeIndex.indexOf(index) !== -1;\r\n          } else {\r\n            return scope.$activeIndex === index;\r\n          }\r\n        };\r\n\r\n        $select.$getIndex = function(value) {\r\n          var l = scope.$matches.length, i = l;\r\n          if(!l) return;\r\n          for(i = l; i--;) {\r\n            if(scope.$matches[i].value === value) break;\r\n          }\r\n          if(i < 0) return;\r\n          return i;\r\n        };\r\n\r\n        $select.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if(isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $select.$onKeyDown = function(evt) {\r\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Select with enter\r\n          if(!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\r\n            return $select.select(scope.$activeIndex);\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          if(evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n          else if(evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n          else if(angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n          scope.$digest();\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var _show = $select.show;\r\n        $select.show = function() {\r\n          _show();\r\n          if(options.multiple) {\r\n            $select.$element.addClass('select-multiple');\r\n          }\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n            if(options.keyboard) {\r\n              element.on('keydown', $select.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $select.hide;\r\n        $select.hide = function() {\r\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n          if(options.keyboard) {\r\n            element.off('keydown', $select.$onKeyDown);\r\n          }\r\n          _hide(true);\r\n        };\r\n\r\n        return $select;\r\n\r\n      }\r\n\r\n      SelectFactory.defaults = defaults;\r\n      return SelectFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsSelect', function($window, $parse, $q, $select, $parseOptions) {\r\n\r\n    var defaults = $select.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, placeholder: defaults.placeholder};\r\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'placeholder', 'multiple', 'allNoneButtons', 'maxLength', 'maxLengthHtml'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Add support for select markup\r\n        if(element[0].nodeName.toLowerCase() === 'select') {\r\n          var inputEl = element;\r\n          inputEl.css('display', 'none');\r\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\r\n          inputEl.after(element);\r\n        }\r\n\r\n        // Build proper ngOptions\r\n        var parsedOptions = $parseOptions(attr.ngOptions);\r\n\r\n        // Initialize select\r\n        var select = $select(element, controller, options);\r\n\r\n        // Watch ngOptions values before filtering for changes\r\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\r\n        scope.$watch(watchedOptions, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n          parsedOptions.valuesFn(scope, controller)\r\n          .then(function(values) {\r\n            select.update(values);\r\n            controller.$render();\r\n          });\r\n        }, true);\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\r\n          select.$updateActiveIndex();\r\n          controller.$render();\r\n        }, true);\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var selected, index;\r\n          if(options.multiple && angular.isArray(controller.$modelValue)) {\r\n            selected = controller.$modelValue.map(function(value) {\r\n              index = select.$getIndex(value);\r\n              return angular.isDefined(index) ? select.$scope.$matches[index].label : false;\r\n            }).filter(angular.isDefined);\r\n            if(selected.length > (options.maxLength || defaults.maxLength)) {\r\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\r\n            } else {\r\n              selected = selected.join(', ');\r\n            }\r\n          } else {\r\n            index = select.$getIndex(controller.$modelValue);\r\n            selected = angular.isDefined(index) ? select.$scope.$matches[index].label : false;\r\n          }\r\n          element.html((selected ? selected : options.placeholder) + defaults.caretHtml);\r\n        };\r\n\r\n        if(options.multiple){\r\n          controller.$isEmpty = function(value){\r\n            return !value || value.length === 0;\r\n          };\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (select) select.destroy();\r\n          options = null;\r\n          select = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}