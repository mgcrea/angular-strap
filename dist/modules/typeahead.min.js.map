{"version":3,"sources":["modules/typeahead.js"],"names":["angular","trigger","provider","container","this","defaults","keyboard","html","delay","asyncdelay","minLength","filter","limit","autoSelect","comparator","trimValue","$get","bodyEl","$typeahead","options","scope","$scope","$matches","extend","config","$resetMatches","$$postDigest","activate","$activeIndex","select","index","$select","evt","matches","$isVisible","safeDigest","update","$$rAF","value","controller","$render","$emit","prefixEvent","parentScope","length","l","isString","$viewValue","i","preventDefault","stopPropagation","keyCode","$digest","show","$timeout","$element","$onMouseDown","hide","on","$onKeyDown","element","TypeaheadFactory","array","isFunction","then","$$phase","$window","document","body","$filter","expression","directive","results","restrict","require","link","falseValueRegExp","attr","key","bsOptions","test","parsedOptions","$parseOptions","typeahead","watchOptions","watchedOptions","$watchCollection","values","$match","replace","trim","$watch","ngModel","newValue","oldValue","$modelValue","valuesTimer","clearTimeout","selectMode","$setViewValue","isVisible","$formatters","displayValue","modelValue","push","selected","val","destroy","isDefined","label","isObject","toString","$on"],"mappings":"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","file":"modules/typeahead.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      asyncdelay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n\n      function TypeaheadFactory(element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function() {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function(index) {\n          scope.$$postDigest(function() {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function(index, evt) {\n          scope.$$postDigest(function() {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function() {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function(matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function(index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function(index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function() {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function(value) {\n          var l = scope.$matches.length,\n            i = l;\n          if (!l) return;\n          for (i = l; i--;) {\n            if (scope.$matches[i].value === value) break;\n          }\n          if (i < 0) return;\n          return i;\n        };\n\n        $typeahead.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function(evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          }\n\n          // Navigate with keyboard\n          else if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n          else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n          else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function() {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function() {\n            $typeahead.$element && $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n            if (options.keyboard) {\n              element && element.on('keydown', $typeahead.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function() {\n          $typeahead.$element && $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            element && element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect)\n            $typeahead.activate(-1);\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function($filter) {\n    return function(array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function(results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      } else {\n        return $filter('filter')(array, expression, comparator);\n      }\n    };\n  })\n\n  .directive('bsTypeahead', function($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'asyncdelay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function(key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue'], function(key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'false');\n\n        // Build proper bsOptions\n        var filter = options.filter || defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) bsOptions += ' | ' + filter + ':$viewValue';\n        if (comparator) bsOptions += ':' + comparator;\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function(newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function(values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          if (scope.valuesTimer) {\n            clearTimeout(scope.valuesTimer);\n          }\n          scope.valuesTimer = setTimeout(function() {\n            parsedOptions.valuesFn(scope, controller)\n              .then(function(values) {\n                // Prevent input with no future prospect if selectMode is truthy\n                // @TODO test selectMode\n                if (options.selectMode && !values.length && newValue.length > 0) {\n                  controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                  return;\n                }\n                if (values.length > limit) values = values.slice(0, limit);\n                var isVisible = typeahead.$isVisible();\n                isVisible && typeahead.update(values);\n                // Do not re-queue an update if a correct value has been selected\n                if (values.length === 1 && values[0].value === newValue) return;\n                !isVisible && typeahead.update(values);\n                // Queue a new rendering that will leverage collection loading\n                controller.$render();\n              });\n          }, options.asyncdelay);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (modelValue && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function() {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = angular.isDefined(index) ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          element.val(options.trimValue === false ? value : value.trim());\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}