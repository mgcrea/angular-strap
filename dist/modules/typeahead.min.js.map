{"version":3,"sources":["typeahead/typeahead.js"],"names":["angular","module","provider","defaults","this","animation","prefixClass","prefixEvent","placement","template","trigger","container","keyboard","html","delay","minLength","filter","limit","$get","$window","$rootScope","$tooltip","TypeaheadFactory","element","controller","config","$typeahead","options","extend","parentScope","scope","$scope","$resetMatches","$matches","$activeIndex","$activate","index","$$postDigest","activate","$select","select","$isVisible","update","matches","length","value","$setViewValue","$render","$digest","$emit","isString","$viewValue","$getIndex","l","i","$onMouseDown","evt","preventDefault","stopPropagation","$onKeyDown","test","keyCode","isUndefined","show","setTimeout","$element","on","hide","off","document","body","directive","$parse","$q","$parseOptions","restrict","require","link","attr","forEach","key","isDefined","ngOptions","parsedOptions","typeahead","watchOptions","watchedOptions","$match","replace","trim","$watch","valuesFn","then","values","ngModel","newValue","$modelValue","selectMode","substring","slice","isVisible","$isEmpty","val","selected","label","isObject","$on","destroy"],"mappings":"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","file":"typeahead.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      template: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'filter',\n      limit: 6\n    };\n\n    this.$get = function($window, $rootScope, $tooltip) {\n\n      var bodyEl = angular.element($window.document.body);\n\n      function TypeaheadFactory(element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function(){\n          scope.$matches = [];\n          scope.$activeIndex = 0;\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function(index) {\n          scope.$$postDigest(function() {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function(index, evt) {\n          scope.$$postDigest(function() {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function() {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function(matches) {\n          scope.$matches = matches;\n          if(scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = 0;\n          }\n        };\n\n        $typeahead.activate = function(index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function(index) {\n          var value = scope.$matches[index].value;\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if(parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index);\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function() {\n          if(!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function(value) {\n          var l = scope.$matches.length, i = l;\n          if(!l) return;\n          for(i = l; i--;) {\n            if(scope.$matches[i].value === value) break;\n          }\n          if(i < 0) return;\n          return i;\n        };\n\n        $typeahead.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function(evt) {\n          if(!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden\n          if($typeahead.$isVisible()) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if(evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          }\n\n          // Navigate with keyboard\n          else if(evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n          else if(evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n          else if(angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function() {\n          show();\n          setTimeout(function() {\n            $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n            if(options.keyboard) {\n              element.on('keydown', $typeahead.$onKeyDown);\n            }\n          });\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function() {\n          $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if(options.keyboard) {\n            element.off('keydown', $typeahead.$onKeyDown);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .directive('bsTypeahead', function($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Build proper ngOptions\n        var filter = options.filter || defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var ngOptions = attr.ngOptions;\n        if(filter) ngOptions += ' | ' + filter + ':$viewValue';\n        if(limit) ngOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(ngOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if(options.watchOptions) {\n          // Watch ngOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watch(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          }, true);\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n          .then(function(values) {\n            // Prevent input with no future prospect if selectMode is truthy\n            // @TODO test selectMode\n            if(options.selectMode && !values.length && newValue.length > 0) {\n              controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n              return;\n            }\n            if(values.length > limit) values = values.slice(0, limit);\n            var isVisible = typeahead.$isVisible();\n            isVisible && typeahead.update(values);\n            // Do not re-queue an update if a correct value has been selected\n            if(values.length === 1 && values[0].value === newValue) return;\n            !isVisible && typeahead.update(values);\n            // Queue a new rendering that will leverage collection loading\n            controller.$render();\n          });\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if(controller.$isEmpty(controller.$viewValue)) return element.val('');\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = angular.isDefined(index) ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? selected.label : selected;\n          element.val(selected.replace(/<(?:.|\\n)*?>/gm, '').trim());\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}