{"version":3,"sources":["modules/typeahead.js"],"names":["angular","trigger","provider","container","this","defaults","keyboard","html","delay","minLength","filter","limit","autoSelect","comparator","trimValue","$get","$typeahead","options","parentScope","scope","$resetMatches","$window","$rootScope","$tooltip","$$rAF","$timeout","$matches","extend","config","$$postDigest","$scope","activate","$activeIndex","select","index","$select","evt","matches","$isVisible","safeDigest","update","value","controller","$render","$emit","prefixEvent","length","equals","$onMouseDown","preventDefault","stopPropagation","keyCode","$digest","show","isUndefined","element","$element","hide","$onKeyDown","$$phase","$root","TypeaheadFactory","array","isFunction","then","$filter","expression","directive","results","postLink","attr","restrict","require","link","falseValueRegExp","key","bsOptions","test","parsedOptions","$parseOptions","typeahead","watchOptions","watchedOptions","$watchCollection","values","$match","replace","trim","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","$setViewValue","$viewValue","substring","displayValue","slice","$formatters","push","modelValue","selected","val","destroy","label","isObject","toString","$on"],"mappings":"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","file":"modules/typeahead.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory(element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          }\n\n          // Navigate with keyboard\n          else if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n          else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n          else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = options.filter || defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) bsOptions += ' | ' + filter + ':$viewValue';\n        if (comparator) bsOptions += ':' + comparator;\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (modelValue && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          element.val(options.trimValue === false ? value : value.trim());\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}