{"version":3,"sources":["typeahead/typeahead.js"],"names":[],"mappings":"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","file":"typeahead.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      template: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'filter',\n      limit: 6,\n      autoSelect: false,\n      comparator: ''\n    };\n\n    this.$get = function($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n\n      function TypeaheadFactory(element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function(){\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function(index) {\n          scope.$$postDigest(function() {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function(index, evt) {\n          scope.$$postDigest(function() {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function() {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function(matches) {\n          scope.$matches = matches;\n          if(scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0: -1;\n          }\n          \n          // When the placement is not one of the bottom placements, re-calc the positioning\n          // so the results render correctly.\n          if (/^(bottom|bottom-left|bottom-right)$/.test(options.placement)) return;\n          \n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          $timeout($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function(index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function(index) {\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if(parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function() {\n          if(!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function(value) {\n          var l = scope.$matches.length, i = l;\n          if(!l) return;\n          for(i = l; i--;) {\n            if(scope.$matches[i].value === value) break;\n          }\n          if(i < 0) return;\n          return i;\n        };\n\n        $typeahead.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function(evt) {\n          if(!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden\n          if($typeahead.$isVisible()) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if(evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          }\n\n          // Navigate with keyboard\n          else if(evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n          else if(evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n          else if(angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function() {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n            if(options.keyboard) {\n              element.on('keydown', $typeahead.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function() {\n          $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if(options.keyboard) {\n            element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if(!options.autoSelect)\n            $typeahead.activate(-1);\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .directive('bsTypeahead', function($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Disable browser autocompletion\n        element.attr('autocomplete' ,'off');\n        \n        // Build proper bsOptions\n        var filter = options.filter || defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if(filter) bsOptions += ' | ' + filter + ':$viewValue';\n        if (comparator) bsOptions += ':' + comparator;\n        if(limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if(options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watch(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          }, true);\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n          .then(function(values) {\n            // Prevent input with no future prospect if selectMode is truthy\n            // @TODO test selectMode\n            if(options.selectMode && !values.length && newValue.length > 0) {\n              controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n              return;\n            }\n            if(values.length > limit) values = values.slice(0, limit);\n            var isVisible = typeahead.$isVisible();\n            isVisible && typeahead.update(values);\n            // Do not re-queue an update if a correct value has been selected\n            if(values.length === 1 && values[0].value === newValue) return;\n            !isVisible && typeahead.update(values);\n            // Queue a new rendering that will leverage collection loading\n            controller.$render();\n          });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n          return displayValue === undefined ? '' : displayValue;\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if(controller.$isEmpty(controller.$viewValue)) return element.val('');\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = angular.isDefined(index) ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          element.val(selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '').trim() : '');\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}