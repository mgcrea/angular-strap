{"version":3,"sources":["typeahead/typeahead.js"],"names":[],"mappings":"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","file":"typeahead.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$typeahead', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'typeahead',\r\n      prefixEvent: '$typeahead',\r\n      placement: 'bottom-left',\r\n      template: 'typeahead/typeahead.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      minLength: 1,\r\n      filter: 'filter',\r\n      limit: 6\r\n    };\r\n\r\n    this.$get = function($window, $rootScope, $tooltip) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      function TypeaheadFactory(element, controller, config) {\r\n\r\n        var $typeahead = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $typeahead = $tooltip(element, options);\r\n        var parentScope = config.scope;\r\n        var scope = $typeahead.$scope;\r\n\r\n        scope.$resetMatches = function(){\r\n          scope.$matches = [];\r\n          scope.$activeIndex = 0;\r\n        };\r\n        scope.$resetMatches();\r\n\r\n        scope.$activate = function(index) {\r\n          scope.$$postDigest(function() {\r\n            $typeahead.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function(index, evt) {\r\n          scope.$$postDigest(function() {\r\n            $typeahead.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function() {\r\n          return $typeahead.$isVisible();\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $typeahead.update = function(matches) {\r\n          scope.$matches = matches;\r\n          if(scope.$activeIndex >= matches.length) {\r\n            scope.$activeIndex = 0;\r\n          }\r\n        };\r\n\r\n        $typeahead.activate = function(index) {\r\n          scope.$activeIndex = index;\r\n        };\r\n\r\n        $typeahead.select = function(index) {\r\n          var value = scope.$matches[index].value;\r\n          controller.$setViewValue(value);\r\n          controller.$render();\r\n          scope.$resetMatches();\r\n          if(parentScope) parentScope.$digest();\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $typeahead.$isVisible = function() {\r\n          if(!options.minLength || !controller) {\r\n            return !!scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $typeahead.$getIndex = function(value) {\r\n          var l = scope.$matches.length, i = l;\r\n          if(!l) return;\r\n          for(i = l; i--;) {\r\n            if(scope.$matches[i].value === value) break;\r\n          }\r\n          if(i < 0) return;\r\n          return i;\r\n        };\r\n\r\n        $typeahead.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n        };\r\n\r\n        $typeahead.$onKeyDown = function(evt) {\r\n          if(!/(38|40|13)/.test(evt.keyCode)) return;\r\n\r\n          // Let ngSubmit pass if the typeahead tip is hidden\r\n          if($typeahead.$isVisible()) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // Select with enter\r\n          if(evt.keyCode === 13 && scope.$matches.length) {\r\n            $typeahead.select(scope.$activeIndex);\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          else if(evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n          else if(evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n          else if(angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n          scope.$digest();\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $typeahead.show;\r\n        $typeahead.show = function() {\r\n          show();\r\n          setTimeout(function() {\r\n            $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\r\n            if(options.keyboard) {\r\n              element.on('keydown', $typeahead.$onKeyDown);\r\n            }\r\n          });\r\n        };\r\n\r\n        var hide = $typeahead.hide;\r\n        $typeahead.hide = function() {\r\n          $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\r\n          if(options.keyboard) {\r\n            element.off('keydown', $typeahead.$onKeyDown);\r\n          }\r\n          hide();\r\n        };\r\n\r\n        return $typeahead;\r\n\r\n      }\r\n\r\n      TypeaheadFactory.defaults = defaults;\r\n      return TypeaheadFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTypeahead', function($window, $parse, $q, $typeahead, $parseOptions) {\r\n\r\n    var defaults = $typeahead.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Build proper ngOptions\r\n        var filter = options.filter || defaults.filter;\r\n        var limit = options.limit || defaults.limit;\r\n        var ngOptions = attr.ngOptions;\r\n        if(filter) ngOptions += ' | ' + filter + ':$viewValue';\r\n        if(limit) ngOptions += ' | limitTo:' + limit;\r\n        var parsedOptions = $parseOptions(ngOptions);\r\n\r\n        // Initialize typeahead\r\n        var typeahead = $typeahead(element, controller, options);\r\n\r\n        // Watch options on demand\r\n        if(options.watchOptions) {\r\n          // Watch ngOptions values before filtering for changes, drop function calls\r\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\r\n          scope.$watch(watchedOptions, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\r\n              typeahead.update(values);\r\n              controller.$render();\r\n            });\r\n          }, true);\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          // console.warn('$watch', element.attr('ng-model'), newValue);\r\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\r\n          parsedOptions.valuesFn(scope, controller)\r\n          .then(function(values) {\r\n            // Prevent input with no future prospect if selectMode is truthy\r\n            // @TODO test selectMode\r\n            if(options.selectMode && !values.length && newValue.length > 0) {\r\n              controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\r\n              return;\r\n            }\r\n            if(values.length > limit) values = values.slice(0, limit);\r\n            var isVisible = typeahead.$isVisible();\r\n            isVisible && typeahead.update(values);\r\n            // Do not re-queue an update if a correct value has been selected\r\n            if(values.length === 1 && values[0].value === newValue) return;\r\n            !isVisible && typeahead.update(values);\r\n            // Queue a new rendering that will leverage collection loading\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          if(controller.$isEmpty(controller.$viewValue)) return element.val('');\r\n          var index = typeahead.$getIndex(controller.$modelValue);\r\n          var selected = angular.isDefined(index) ? typeahead.$scope.$matches[index].label : controller.$viewValue;\r\n          selected = angular.isObject(selected) ? selected.label : selected;\r\n          element.val(selected ? selected.replace(/<(?:.|\\n)*?>/gm, '').trim() : '');\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (typeahead) typeahead.destroy();\r\n          options = null;\r\n          typeahead = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}