{"version":3,"sources":["modules/typeahead.js"],"names":["angular","trigger","provider","container","this","defaults","keyboard","html","delay","minLength","filter","limit","autoSelect","comparator","trimValue","$get","$typeahead","options","parentScope","scope","$resetMatches","$window","$rootScope","$tooltip","$$rAF","$timeout","$matches","extend","config","$$postDigest","$scope","activate","$activeIndex","select","index","$select","evt","matches","$isVisible","safeDigest","update","value","controller","$render","$emit","prefixEvent","isDefined","onSelect","$setViewValue","length","isFunction","equals","$onMouseDown","preventDefault","stopPropagation","keyCode","$digest","show","element","$element","hide","$onKeyDown","$$phase","$root","TypeaheadFactory","array","then","$filter","expression","directive","results","postLink","attr","restrict","forEach","require","link","falseValueRegExp","key","bsKey","charAt","toUpperCase","slice","test","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$watchCollection","values","watchOptions","$match","replace","trim","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","$viewValue","substring","displayValue","$formatters","push","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","label","isObject","destroy","$on"],"mappings":"AAOA,YAEAA,SAGMC,OAAS,4BAAA,yBAAA,wCAAAC,SAAA,aAAA,WAFb,GAGIC,GAAWC,KAAAC,UACXC,UAAU,UACVC,YAAM,YACNC,YAAO,aACPC,UAAW,cACXC,YAAQ,+BACRC,QAAO,QACPC,WAAAA,EACAC,UAAAA,EACAC,MAAAA,EAFFN,MAAO,EAKPJ,UAAKW,EAEHL,OAAA,gBAJFC,MAMQK,EALRJ,YAQQK,EAPRJ,WASIG,GARJF,WASQI,EAPVd,MAUMe,MAAMC,UAAAA,aAAgB,WAAA,QAAA,WAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAT1B,QAUMN,GAAMO,EAAAA,EAAAA,GATV,GAUIP,MATAF,EAAUjB,QAAQ2B,UAAWtB,EAAUuB,EAWzCT,GAAMC,EAAAA,EAAAA,EAEND,IAAAA,GAAkBS,EAAAT,MAChBA,EAAMU,EAAaC,MAVvBX,GAWMH,cAAWe,WAVfZ,EAAMO,YACNP,EAAMa,aAAef,EAAQL,WAAa,EAAI,IAEhDO,EAYIA,gBAXJA,EAYMH,UAAWiB,SAAOC,GAXtBf,EAAMU,aAAa,WACjBb,EAAWe,SAASG,MAGxBf,EAAMgB,QAAU,SAASD,EAAOE,GAiB9BpB,EAAAA,aAAoB,WAClBG,EAAMO,OAAWW,MAbrBlB,EAAMmB,WAAa,WAoBfC,MAAAA,GAAWpB,cAjBfH,EAAWwB,OAAS,SAASH,GAqB3BrB,EAAAA,SAAWe,EACTZ,EAAMa,cAAeE,EAAAA,SAnBrBf,EAAMa,aAAef,EAAQL,WAAa,EAAI,IAuB9C2B,EAAIL,GACJV,EAAIiB,EAAQtB,kBAnBhBH,EAsBI0B,SAAWC,SAAAA,GACXxB,EAAMC,aAAAA,GApBVJ,EAuBU4B,OAAM3B,SAAQ4B,GACpB,GAAYC,KAAR9C,EAAJ,CAtBF,GAuBIiB,GAAQ8B,EAAAA,SAAgBb,GAAOlB,KAtBnC0B,GAAWM,cAAcP,GACzBC,EAAWC,UA2BX3B,EAAAA,gBACEE,GAAaT,EAAciC,UAzB7BvB,EA0BIyB,MAASzB,EAAMO,YAASuB,UAAAA,EAAAA,EAAAA,GAzBxBjD,QAAQ8C,UAAU7B,EAAQ8B,WAAa/C,QAAQkD,WAAWjC,EAAQ8B,WA4BpE9B,EAAOE,SAAMO,EAASuB,EAAUjD,KAxBpCgB,EA4BQkB,WAAAA,WACJ,MAAKA,GAAQf,WAAMO,EAGZQ,EAAAA,SAAAA,QAAAA,QAAAA,SAAAA,EAAAA,aAAAA,EAAAA,WAAAA,QAAAA,EAAAA,YAFDlC,EAAQmD,SAAOhC,QAKvBH,EAAWoC,UAAAA,SAAeX,GAExBL,GAAIiB,EACJjB,KAAIkB,EAAAA,EAAAA,SAAAA,OAAAA,MA7BAtD,QAAQmD,OAAOhC,EAAMO,SAASQ,GAAOO,MAAOA,KAiChD,MAAKP,IA7BTlB,EAiCUqC,aAAAA,SAAAA,GAhCRjB,EAiCIA,iBAhCJA,EAAIkB,mBAENtC,EAmCMA,WAAkBG,SAAMa,GAlCvB,aAoCYuB,KAAAA,EAAYA,YACzBpC,EAAMa,cAAAA,KAAAA,EAAAA,SAAAA,KAAAA,EAAAA,eAnCRI,EAAIiB,iBAqCFlC,EAAAA,mBAEMa,KAANb,EAAMa,SAAeb,EAAAO,SAAAuB,OAnCvBjC,EAAWiB,OAAOd,EAAMa,cAqClBwB,KAAAA,EAAAA,SAAAA,EAAAA,aAAAA,EAnCNrC,EAAMa,eAwCcyB,KAAXzC,EAAAA,SAAWyC,EAAAA,aAAAA,EAAAA,SAAAA,OAAAA,EACtBzC,EAAAA,eACEyC,QAAAA,YAAAA,EAAAA,gBAGAhC,EAAAA,aAAS,GAvCXN,EAyCMH,WAvCR,IAAIyC,GAyCMzC,EAAa0C,IAxCvB1C,GAAWyC,KAAO,WAChBA,IACAhC,EAyCQ,WAxCFT,EAAW2C,WA2CbC,EAAO5C,SAAW4C,GAAAA,YAAAA,EAAAA,cACtB5C,EAAkBV,UACZU,GAAW2C,EAAU3C,GAAAA,UAAW2C,EAAaE,cAvChD,GAAG,GAER,IA0CM7C,GAAAA,EAAWe,IA/BjB,OAVAf,GAAW4C,KAAO,WA2CdA,EAAAA,UAAAA,EAAAA,SAAAA,IAAAA,YAAAA,EAAAA,cAzCE3C,EAAQX,UA4CLU,GAAAA,EAAAA,IAAAA,UAAAA,EAAAA,YAMAuB,EAAAA,YAEPpB,EAAM2C,SAAkBC,IAI1BC,KAhDOhD,EAwDT,QAAOuB,GAAU0B,GACf9C,EAAI8C,SAASjE,EAAQkD,OAAWe,EAAMC,MAAOJ,SAAA3C,EAAAqC,UAnD/C,MADAQ,GAsDaG,SAAQ9D,EArDd2D,MAERtD,OAsDG,iBAAyBuD,UAAOG,SAAYvD,GArDhD,MAAO,UAASoD,EAAOG,EAAYvD,GACjC,MAwDDwD,IAAUrE,QAAAkD,WAAAe,EAAAC,MAEL7D,EAAWW,KAAAA,SAAWX,GAE1B,MAAA8D,GAAA,UAAAG,EAAAF,EAAAvD,KAGQsD,EAASI,UAAUpD,EAAOuC,EAASc,OAxD1CH,UAgEOpD,eAAAA,UAAAA,SAAAA,KAAAA,aAAAA,gBAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GA/DV,GAAIZ,GAgEWc,EAAAA,QA/Df,QACEsD,SAgEYC,MA/DZC,QAgEU3E,UA/DV4E,KAAM,SAAkBzD,EAAOuC,EAASc,EAAM9B,GAmE1CgB,EAAImB,IAAAA,SACJ7E,IAAAA,IACEmB,MAAInB,EAINA,SAAQ0E,SAAS,WAAA,cAA0B,aAAA,eAA0B,YAAa,YAAUI,QAAAA,UAAAA,WAAAA,OAAAA,YAAAA,SAAAA,QAAAA,YAAAA,eAAAA,aAAAA,aAAAA,aAAAA,KAAAA,cAAAA,eAAAA,SAAAA,GACtFC,QAAQjC,UAAOgC,EAAIE,MAAUC,EAAAA,GAAgBH,EAAII,KAlEzD,IAoEMjE,GAAeE,eAnErBnB,SAAQ0E,SAAU,OAAQ,YAAa,YAAa,UAAY,SAASI,GACnE9E,QAAQ8C,UAAU0B,EAAKM,KAASD,EAAiBM,KAAKX,EAAKM,MAAO7D,EAAQ6D,IAAO,KA0ErF9E,QAAIU,SAASV,eAAkBiB,SAAQP,eAAkBA,SAASL,YAASK,SAAAA,GAC3E,GAAIC,GAAQM,KAAQN,EAAAA,OAASN,GAAAA,cAASM,EAAAA,MAAAA,EAClCE,SAAAA,UAAaI,EAAQJ,MAErBuE,EAAAA,GAAYZ,EAAKY,MAAAA,EAAAA,OAGnB1B,EAAI7C,KAAYuE,iBAAa1B,EAAM7C,KAAAA,eAAAA,MAxEvC,IAAIH,GAASV,QAAQ8C,UAAU7B,EAAQP,QAAUO,EAAQP,OAASL,EAASK,OA0ErEC,EAAOyE,EAAAA,OAAa/E,EAAAM,MACpB0E,EAAAA,EAAgBC,YAAcF,EAAAA,WAG9BG,EAAYvE,EAAAA,SAGZC,KAEFmE,GAAII,MAAiBH,EAAAA,cACrBlE,IAAMsE,GAAiBD,IAAAA,IA5EvB7E,IA+EI4E,GAAiBG,cAAAA,EA9EzB,IAAIL,GA+Ee1C,EAAAA,GA9Ef4C,EAAYvE,EAAW0C,EAAShB,EAAYzB,EAChD,IAAIA,EAAQ0E,aAAc,CACxB,GAAIH,GAAiBH,EAAcO,OAAO,GAAGC,QAAQ,OAAQ,IAAIA,QAAQ,UAAW,IAAIC,MAkFxF3E,GAAM4E,iBAAYC,EAAmBC,SAAUC,EAAAA,GAE7C/E,EAAMgF,SAAcF,EAAAA,GAAAA,KAAAA,SAAAA,GACpBZ,EAAce,OAAAA,GAIV1D,EAAY2D,cAjFpBlF,EAqFQ4E,OAAIL,EAAOzC,QAAStC,SAAO+E,EAASA,GApF1CvE,EAqFMoE,YAAiBG,EApFvBL,EAsFiB1C,SAAAA,EAAAA,GAAAA,KAAAA,SAAAA,GArFf,MAAI1B,GAAQoF,aAAeX,EAAOzC,QAAUgD,EAAShD,OAAS,MAC5DP,GAAWM,cAAcN,EAAW4D,WAAWC,UAAU,EAAG7D,EAAW4D,WAAWrD,OAAS,KA8FzFuD,EAAAA,OAAc7F,IAAA+E,EAAAA,EAAAR,MAAA,EAAAvE,IAChB4E,EAAOiB,OAAAA,OA1FT9D,GAAWC,eAGfD,EAAW+D,YAAYC,KAAK,SAASC,GA+FjC,GAAAH,GAAOnB,EAAAmB,aAAAG,EA7FT,OAAIH,GAiGO7D,EAGP3C,QAAO0D,UAAYiD,IAAA,gBAAAA,GAhGdA,EAmGHC,KA/FRlE,EAiGQD,QAAQmE,WACZ,GAAIC,EAAKnD,SAAWoD,EAAAA,YACpB,MAASpD,GAAQqD,IAAGC,GAEpBtD,IAAAA,GAAWuD,EAAAA,UAAkBJ,EAAIK,aAhG/BN,EAAqB,KAAV1E,EAAeqD,EAAUzD,OAAOJ,SAASQ,GAAOiF,MAAQzE,EAAW4D,UAoGlFnF,GAAUnB,QAAAoH,SAAYR,GAAAvB,EAAAmB,aAAAI,GAAAA,CACpB,IAAIrB,GAAAA,EAAWA,EAAU8B,WAAAA,QAAAA,iBAAAA,IAAAA,GACzBpG,EAAAA,EAAU,GAAA6F,eACVvB,EAAAA,EAAY,GAAAyB,YAlGdtD,GAAQqD,IAAI9F,EAAQH,aAAc,EAAQ2B,EAAQA,EAAMqD,QACxDpC,EAAQ,GAAGuD,kBAAkBJ,EAAIK,IAEnC/F,EAAMmG,IAAI,WAAY,WAChB/B,GAAWA,EAAU8B,UACzBpG,EAAU,KACVsE,EAAY","file":"modules/typeahead.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}