{"version":3,"sources":["modules/tab.js"],"names":["angular","_tabsHash","_addTabControl","animation","template","navClass","controller","activeClass","this","isDefined","$attrs","key","control","$scope","$activeClass","$options","self","$panes","$activePaneChangeListeners","$push","pane","isUndefined","$active","$navClass","$remove","index","active","activeIndex","indexOf","splice","map","$setActive","length","value","name","fn","$pane","$onKeyPress","e","$isActive","$index","$tab","defaults","$get","directive","scope","require","transclude","templateUrl","attr","link","postLink","ngModelCtrl","bsTabsCtrl","tabKey","undefined","addTabControl","controllers","$setViewValue","$formatters","modelValue","push","attrs","bsActivePane","parsedBsActivePane","assign","$parse","$watch","newValue","oldValue","$observe","render","$animate","element","addClass","disabled"],"mappings":"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","file":"modules/tab.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n    var _tabsHash = {};\n\n    var _addTabControl = function (key, control) {\n      if (!_tabsHash[key]) _tabsHash[key] = control;\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n      self.$onKeyPress = $scope.$onKeyPress = function (e, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n          self.$setActive(index);\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      $tab.addTabControl = _addTabControl;\n      $tab.tabsHash = _tabsHash;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\n        // tabs are available in the tab component\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\n        }\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}