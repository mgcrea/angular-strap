{"version":3,"sources":["tab/tab.js"],"names":[],"mappings":"qBASM,OAAA,kCAEF,OAAA,WAEA,GAAA,GAAA,KAAA,UACE,UAAA,sCAEA,SAAA,WACA,YAAA,UAGA,EAAA,KAAA,WAAA,SAAA,EAAA,EAAA,aAIA,GAAA,SAAA,QAAA,KAAA,sEAEA,QAAA,UAAA,EAAA,MAAA,EAAA,SAAA,GAAA,EAAA,MAIA,EAAA,UAAA,EAAA,SAAA,SACA,EAAA,aAAA,EAAA,SAAA,YAEA,EAAA,OAAA,EAAA,YAKE,2BAAA,EAAA,4CAGA,EAAA,OAAA,KAAA,MAGA,QAAA,SAAA,MACE,GAAA,EAAA,OAAA,QAAA,GACA,EAAA,EAAA,OAAA,OAGF,GAAA,OAAA,OAAA,EAAA,GAEE,EAAA,EAGF,gCAKA,MAEE,WAAA,uBAIN,EAAA,WAAA,EAAA,WAAA,SAAA,sBAEA,EAAA,2BAAA,QAAA,SAAA,GACE,OAMJ,MAAA,KAAA,mBAIE,OAFF,GAAA,SAAkB,iBAEhB,eAKE,UAAA,UAAA,WAAA,OAAA,SAAA,SAAA,EAAA,EAAA,EAAA,MAEA,GAAA,EAAA,gBAGA,SAAA,WAAA,+BAEE,cACA,SAAA,WAAA,SAAA,EAAA,sCAEA,MAAA,GAAA,UAAA,EAAA,eAEA,SAAA,EAAA,EAAA,EAAA,MAEE,GAAA,EAAA,iBAOA,QAAA,KAAA,sEAGE,2BAAA,KAAA,WACA,EAAA,cAAA,EAAA,OAAA,0CAOF,MADA,GAAA,WAAA,EAAA,GACA,KAKE,EAAA,aAAA,CAGF,GAAA,GAAA,EAAA,EAAA,aAGA,GAAA,2BAAA,KAAA,WACF,EAAA,OAAA,EAAA,EAAA,OAAA,WAIL,EAAA,OAAA,EAAA,aAAA,SAAA,uBAED,mBAOM,UAAA,UAAA,WAAA,OAAA,SAAA,EAAA,EAAA,mBAGA,YAAA,kBACA,iCA2BE,KACF,GAAA,GAAA,EAAA,OAAA,QAAA,GACA,EAAA,EAAA,OAAA,oEA1BA,GACE,IADF,EAAA,GACE,EAAA,GAGF,GAAA,SAAA,YAGA,EAAA,SAAA,QAAA,SAAA,8BAKA,EAAA,SAAA,WACA,EAAA,SAAA,EAAA,SAAA,WAIA,EAAA,MAAA,KAGE,IAAA,WAAA,WACF,EAAA,QAAA,kDAUL","file":"tab.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.tab', [])\r\n\r\n  .provider('$tab', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      template: 'tab/tab.tpl.html',\r\n      navClass: 'nav-tabs',\r\n      activeClass: 'active'\r\n    };\r\n\r\n    var controller = this.controller = function($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'navClass', 'activeClass'], function(key) {\r\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // Publish options on scope\r\n      $scope.$navClass = self.$options.navClass;\r\n      $scope.$activeClass = self.$options.activeClass;\r\n\r\n      self.$panes = $scope.$panes = [];\r\n\r\n      // DEPRECATED: $viewChangeListeners, please use $activePaneChangeListeners\r\n      // Because we deprecated ngModel usage, we rename viewChangeListeners to \r\n      // activePaneChangeListeners to make more sense.\r\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\r\n\r\n      self.$push = function(pane) {\r\n        self.$panes.push(pane);\r\n      };\r\n\r\n      self.$remove = function(pane) {\r\n        var index = self.$panes.indexOf(pane);\r\n        var activeIndex = self.$panes.$active;\r\n\r\n        // remove pane from $panes array\r\n        self.$panes.splice(index, 1);\r\n\r\n        if (index < activeIndex) {\r\n          // we removed a pane before the active pane, so we need to \r\n          // decrement the active pane index\r\n          activeIndex--;\r\n        }\r\n        else if (index === activeIndex && activeIndex === self.$panes.length) {\r\n          // we remove the active pane and it was the one at the end,\r\n          // so select the previous one\r\n          activeIndex--;\r\n        }\r\n        self.$setActive(activeIndex);\r\n      };\r\n\r\n      self.$panes.$active = 0;\r\n      self.$setActive = $scope.$setActive = function(value) {\r\n        self.$panes.$active = value;\r\n        self.$activePaneChangeListeners.forEach(function(fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n    };\r\n\r\n    this.$get = function() {\r\n      var $tab = {};\r\n      $tab.defaults = defaults;\r\n      $tab.controller = controller;\r\n      return $tab;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTabs', function($window, $animate, $tab, $parse) {\r\n\r\n    var defaults = $tab.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsTabs'],\r\n      transclude: true,\r\n      scope: true,\r\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\r\n      templateUrl: function(element, attr) {\r\n        return attr.template || defaults.template;\r\n      },\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // DEPRECATED: ngModel, please use bsActivePane\r\n        // 'ngModel' is deprecated bacause if interferes with form validation\r\n        // and status, so avoid using it here.\r\n        if(ngModelCtrl) {\r\n          console.warn('Usage of ngModel is deprecated, please use bsActivePane instead!');\r\n\r\n          // Update the modelValue following\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\r\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function(modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            bsTabsCtrl.$setActive(modelValue * 1);\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n        if (attrs.bsActivePane) {\r\n          // adapted from angularjs ngModelController bindings\r\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\r\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\r\n\r\n          // Update bsActivePane value with change\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\r\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // watch bsActivePane for value changes\r\n          scope.$watch(attrs.bsActivePane, function(newValue, oldValue) {\r\n            bsTabsCtrl.$setActive(newValue * 1);\r\n          }, true);\r\n        }\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPane', function($window, $animate, $sce) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsTabs'],\r\n      scope: true,\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('tab-pane');\r\n\r\n        // Observe title attribute for change\r\n        attrs.$observe('title', function(newValue, oldValue) {\r\n          scope.title = $sce.trustAsHtml(newValue);\r\n        });\r\n\r\n        // Add animation class\r\n        if(bsTabsCtrl.$options.animation) {\r\n          element.addClass(bsTabsCtrl.$options.animation);\r\n        }\r\n\r\n        // Push pane to parent bsTabs controller\r\n        bsTabsCtrl.$push(scope);\r\n\r\n        // remove pane from tab controller when pane is destroyed\r\n        scope.$on('$destroy', function() {\r\n          bsTabsCtrl.$remove(scope);\r\n        });\r\n\r\n        function render() {\r\n          var index = bsTabsCtrl.$panes.indexOf(scope);\r\n          var active = bsTabsCtrl.$panes.$active;\r\n          $animate[index === active ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function() {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}