{"version":3,"sources":["popover/popover.js"],"names":["angular","module","provider","defaults","this","animation","customClass","container","target","placement","template","contentTemplate","trigger","keyboard","html","title","content","delay","$get","$tooltip","PopoverFactory","element","config","options","extend","$popover","$scope","directive","$window","$location","$sce","requestAnimationFrame","setTimeout","restrict","scope","link","attr","forEach","key","isDefined","$observe","newValue","oldValue","trustAsHtml","popover","$applyPlacement","bsPopover","$watch","isObject","bsShow","isString","match","show","hide","$on","destroy"],"mappings":"AAOA,YACAA,SAAQC,OAAO,0BAA2B,2BAA2BC,SAAS,WAAY,WACxF,GAAIC,GAAWC,KAAKD,UAChBE,UAAW,UACXC,YAAa,GACbC,WAAW,EACXC,QAAQ,EACRC,UAAW,QACXC,SAAU,2BACVC,iBAAiB,EACjBC,QAAS,QACTC,UAAU,EACVC,MAAM,EACNC,MAAO,GACPC,QAAS,GACTC,MAAO,EAEXb,MAAKc,MACH,WACA,SAAUC,GACR,QAASC,GAAeC,EAASC,GAE/B,GAAIC,GAAUvB,QAAQwB,UAAWrB,EAAUmB,GACvCG,EAAWN,EAASE,EAASE,EAKjC,OAHIA,GAAQP,UACVS,EAASC,OAAOV,QAAUO,EAAQP,SAE7BS,EAET,MAAOL,OAGVO,UAAU,aACX,UACA,YACA,OACA,WACA,SAAUC,EAASC,EAAWC,EAAML,GAClC,GAAIM,GAAwBH,EAAQG,uBAAyBH,EAAQI,UACrE,QACEC,SAAU,MACVC,OAAO,EACPC,KAAM,SAAkBD,EAAOb,EAASe,GAEtC,GAAIb,IAAYW,MAAOA,EACvBlC,SAAQqC,SACN,WACA,kBACA,YACA,YACA,SACA,QACA,UACA,WACA,OACA,YACA,eACC,SAAUC,GACPtC,QAAQuC,UAAUH,EAAKE,MACzBf,EAAQe,GAAOF,EAAKE,MAGxBtC,QAAQqC,SACN,QACA,WACC,SAAUC,GACXF,EAAKE,IAAQF,EAAKI,SAASF,EAAK,SAAUG,EAAUC,GAClDR,EAAMI,GAAOR,EAAKa,YAAYF,GAC9BzC,QAAQuC,UAAUG,IAAaX,EAAsB,WACnDa,GAAWA,EAAQC,wBAKzBT,EAAKU,WAAaZ,EAAMa,OAAOX,EAAKU,UAAW,SAAUL,EAAUC,GAC7D1C,QAAQgD,SAASP,GACnBzC,QAAQwB,OAAOU,EAAOO,GAEtBP,EAAMlB,QAAUyB,EAElBzC,QAAQuC,UAAUG,IAAaX,EAAsB,WACnDa,GAAWA,EAAQC,sBAEpB,GAEHT,EAAKa,QAAUf,EAAMa,OAAOX,EAAKa,OAAQ,SAAUR,GAC5CG,GAAY5C,QAAQuC,UAAUE,KAE/BzC,QAAQkD,SAAST,KACnBA,EAAWA,EAASU,MAAM,kBAC5BV,KAAa,EAAOG,EAAQQ,OAASR,EAAQS,SAG/C,IAAIT,GAAUnB,EAASJ,EAASE,EAEhCW,GAAMoB,IAAI,WAAY,WACpBV,EAAQW,UACRhC,EAAU,KACVqB,EAAU","file":"popover.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      container: false,\n      target: false,\n      placement: 'right',\n      template: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0\n    };\n\n    this.$get = function($tooltip) {\n\n      function PopoverFactory(element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if(options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function($window, $location, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'contentTemplate', 'placement', 'container', 'target', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'customClass'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n            angular.isDefined(oldValue) && requestAnimationFrame(function() {\n              popover && popover.$applyPlacement();\n            });\n          });\n        });\n\n        // Support scope as an object\n        attr.bsPopover && scope.$watch(attr.bsPopover, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n          angular.isDefined(oldValue) && requestAnimationFrame(function() {\n            popover && popover.$applyPlacement();\n          });\n        }, true);\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!popover || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = newValue.match(',?(popover),?');\n          newValue === true ? popover.show() : popover.hide();\n        });\n\n        // Initialize popover\n        var popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}