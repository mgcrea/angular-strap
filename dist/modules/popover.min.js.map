{"version":3,"sources":["modules/popover.js"],"names":["angular","templateUrl","provider","contentTemplate","defaults","trigger","keyboard","html","title","content","delay","autoClose","this","$get","options","$popover","PopoverFactory","element","config","$tooltip","restrict","directive","requestAnimationFrame","$window","link","scope","setTimeout","falseValueRegExp","attr","dataTarget","key","isDefined","forEach","$observe","oldValue","popover","test","target","bsPopover","$watch","isObject","newValue","extend","$applyPlacement","show","hide","setViewport","viewport","$on","destroy"],"mappings":"AAOA,YAEAA,SAMMC,OAAAA,0BAAa,2BAAAC,SAAA,WAAA,WALjB,GAMIC,GAAAA,KAAiBC,UACjBC,UAAS,UACTC,YAAU,GACVC,WAAM,EACNC,QAAO,EACPC,UAAS,QACTC,YAAO,2BACPC,iBAAW,EALbN,QAAS,QAQTO,UAAKC,EAEHN,MAAA,EAPFC,MAUQM,GATRL,QAWQM,GAVRL,MAaOI,EAZPH,WAaMI,EAXRH,MAcMC,MAAOE,WAAAA,SAAAA,GAbX,QAASC,GAAeC,EAASC,GAiB/B,GAAAJ,GAAOE,QAAAA,UAAAA,EAAAA,GAfHD,EAAWI,EAASF,EAASH,EA0BjCM,OALHC,GAAUZ,UAELa,EAAAA,OAAAA,QAAwBC,EAAQD,SAGlCF,EAEAI,MAAMR,OApBTK,UAuBoBI,aAAOA,UAAAA,OAAAA,WAAAA,SAAAA,EAAAA,EAAAA,GAtB5B,GAAIH,GAAwBC,EAAQD,uBAAyBC,EAAQG,UACrE,QACEN,SAsBSpB,MArBTyB,OAAO,EACPD,KAwBQG,SAAAA,EAAmBV,EAAAW,GACvB5B,GAAAA,IACEyB,MAAGzB,EAKLA,SAAI6B,SAAaZ,WAAa,cAAA,aAAA,eAAA,kBAAA,YAAA,YAAA,QAAA,UAAA,OAAA,YAAA,cAAA,YAAA,KAAA,cAAA,eAAA,SAAAa,GAC3B9B,QAAQ+B,UAAUF,EAAAA,MAAaf,EAAAgB,GAAAF,EAAAE,KAzBpC,IAAIH,GAAmB,eAiCrB3B,SAAQgC,SAAS,OAAA,YAAS,aAAqBF,SAAAA,GAC7CF,QAAKE,UAAaG,EAASH,KAAKH,EAAmBO,KAAAA,EAAAA,MAAAA,EAAAA,IAAAA,IA9BvD,IAgCMlC,GAAQ+B,EAAUG,KAAAA,cA/BpBlC,SAgCImC,UAAWA,KA/BbR,EAAiBS,KAAKP,GAAaf,EAAQuB,QAAS,EAAYvB,EAAQuB,OAASR,GAEvF7B,QAAQgC,SAAU,QAAS,WAAa,SAASF,GAmC/CF,EAAKU,IAAAA,EAAab,SAAMc,EAAOX,SAAKU,EAAWJ,GAC7CT,EAAGzB,GAAQwC,EAAAA,YAAoBC,GAC7BzC,QAAQ0C,UAAOjB,IAAOgB,EAAAA,WAjCtBN,GAkCKA,EAAAQ,wBA9BXf,EAkCMO,WAAWA,EAAQQ,OAAAA,EAAAA,UAAAA,SAAAA,EAAAA,GAjCnB3C,QAAQwC,SAASC,GAmClBzC,QAAA0C,OAAAjB,EAAAgB,GAIDhB,EAAIU,QAAYnC,EAEhByC,QAAAA,UAAaP,IAAeU,EAAiBC,WAnC7CV,GAAWA,EAAQQ,sBAwCnB,GArCJf,EAsCIO,QAAQW,EAAAA,OAAYL,EAAAA,OAAAA,SAAAA,EAAAA,GArCjBN,GAAYnC,QAAQ+B,UAAUU,KAyC/BN,QAAUpB,SAASE,KAASH,IAAAA,EAAAA,MAAAA,wBAGhCW,KAAU,EAAYU,EAAAS,OAAAT,EAAAU,UAxCxBjB,EA0CId,UAAUW,EAAAc,OAAAX,EAAAmB,SAAA,SAAAN,GACVN,GAAUnC,QAAA+B,UAAAU,IAzCZN,EAAQW,YAAYL,IAEtB,IAAIN,GAAUpB,EAASE,EAASH,EAChCW,GAAMuB,IAAI,WAAY,WAChBb,GAASA,EAAQc,UACrBnC,EAAU,KACVqB,EAAU","file":"modules/popover.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function($tooltip) {\n\n      function PopoverFactory(element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if(options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if(angular.isDefined(dataTarget)) {\n          if(falseValueRegExp.test(dataTarget))\n            options.target = false;\n          else\n            options.target = dataTarget;\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n            angular.isDefined(oldValue) && requestAnimationFrame(function() {\n              popover && popover.$applyPlacement();\n            });\n          });\n        });\n\n        // Support scope as an object\n        attr.bsPopover && scope.$watch(attr.bsPopover, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n          angular.isDefined(oldValue) && requestAnimationFrame(function() {\n            popover && popover.$applyPlacement();\n          });\n        }, true);\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!popover || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n          newValue === true ? popover.show() : popover.hide();\n        });\n\n        // Viewport support\n        attr.viewport && scope.$watch(attr.viewport, function (newValue) {\n          if(!popover || !angular.isDefined(newValue)) return;\n          popover.setViewport(newValue);\n        });\n\n        // Initialize popover\n        var popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}