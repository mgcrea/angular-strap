{"version":3,"sources":["angular-strap.js","typeahead/typeahead.js","helpers/compiler.js","dropdown/dropdown.js","tab/tab.js","tooltip/tooltip.js","timepicker/timepicker.js","select/select.js","navbar/navbar.js","scrollspy/scrollspy.js","popover/popover.js","modal/modal.js","datepicker/datepicker.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","aside/aside.js","collapse/collapse.js","alert/alert.js","button/button.js","affix/affix.js","module.js"],"names":["prefixEvent","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","defaults","animation","prefixClass","data","this","compile","controller","console","controllerAs","resolve","locals","bindToController","angular","forEach","value","isString","$injector","key","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","bsCompilerService","$inject","trigger","provider","container","keyboard","delay","minLength","filter","limit","autoSelect","comparator","trimValue","preventHide","$get","$typeahead","parentScope","$resetMatches","$window","$rootScope","$tooltip","$$rAF","$timeout","$matches","config","$$postDigest","$scope","activate","$activeIndex","select","index","$select","evt","matches","$isVisible","safeDigest","update","$render","$emit","isDefined","onSelect","$setViewValue","length","isFunction","equals","$onMouseDown","preventDefault","stopPropagation","clientTop","active","offsetTop","clientBottom","highWatermark","scrollTop","Math","lowWatermark","clientHeight","keyCode","$$updateScrollTop","$digest","show","_eventsBound","isUndefined","$element","on","hide","$onKeyDown","off","TypeaheadFactory","array","$$phase","$filter","expression","directive","results","postLink","attr","restrict","require","falseValueRegExp","bsKey","charAt","toUpperCase","slice","test","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$watchCollection","values","watchOptions","$match","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","$viewValue","substring","displayValue","$formatters","push","modelValue","selected","$isEmpty","label","$on","toString","destroy","self","$options","navClass","activeClass","$activeClass","$panes","$activePaneChangeListeners","$push","pane","$active","$attrs","$navClass","$remove","activeIndex","indexOf","splice","map","$setActive","name","fn","$pane","$tab","transclude","ngModelCtrl","bsTabsCtrl","attrs","bsActivePane","parsedBsActivePane","assign","$parse","$observe","controllers","render","$animate","$isActive","addClass","disabled","customClass","target","placement","titleTemplate","title","type","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","promise","$bsCompiler","split","clearTimeout","hoverState","onShow","leaveAnimateCallback","destroyTipElement","onHide","_tipToHide","triggers","nodeName","isTouch","toggle","enter","unbindTriggerEvents","$onFocusElementMouseDown","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","autoCloseEventTrigger","bindAutoCloseEvents","$onFocusKeyUp","stopEventPropagation","$body","unbindAutoCloseEvents","event","getPosition","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","timeout","$isShown","tipScope","$destroy","$promise","$new","toLowerCase","$id","parseFloat","$sce","trustAsHtml","$setEnabled","id","$hide","setEnabled","isEnabled","compileData","tipContainer","init","bindTriggerEvents","isElement","focus","onBeforeShow","after","parent","lastChild","display","visibility","clonedElement","version","prepend","$applyPlacement","enterAnimateCallback","_blur","onBeforeHide","blur","leave","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","$root","query","querySelectorAll","isNative","tooltip","transclusion","$eval","dataTarget","hasOwnProperty","bsTooltip","bsShow","match","setViewport","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","setSelectionRange","collapse","selectionStart","moveStart","selectionEnd","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","$isBuilt","keep","Date","setHours","setMinutes","setSeconds","copy","midIndex","hours","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","targetEl","triggerHandler","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","_show","_hide","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","a","b","$apply","isArray","$getIndex","anchor","anchorCandidate","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","e","dataMultiple","inputEl","addEventListener","join","routeAttr","$navbar","liElements","li","liElement","pattern","path","RegExp","regexp","$document","spies","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","content","$popover","PopoverFactory","requestAnimationFrame","bsPopover","popover","backdrop","size","zIndex","bodyElement","backdropCount","dialogBaseZindex","validSizes","ModalFactory","$modal","unbindBackdropEvents","modalElement","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","backdropBaseZindex","$show","bottom","destroyModalElement","z-index","defaultPrevented","minor","backdropAnimation","bindBackdropEvents","which","lg","sm","modalClass","bsModal","modal","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$hasToday","$picker","$selectPane","$views","$mode","$toggleMode","$setToday","$clear","setMode","updateDisabledDates","disabledDateRanges","dateRanges","$setDisabledEl","year","getFullYear","month","getDate","mode","pristine","call","$updateSelected","built","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","shiftKey","altKey","onKeyDown","datepickerViews","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","strict","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","m","arr","weekDaysMin","weekdaysShort","weekDaysLabelsHtml","picker","weekDaysLabels","concat","getMonth","firstDayOfMonth","firstDayOfMonthOffset","getTimezoneOffset","firstDate","firstDateOffset","build","days","day","daylightSavingAdjust","isToday","toDateString","today","muted","showLabels","labels","isTodayDisabled","isSelected","getDay","months","lastDate","actualMonth","firstYear","years","actualYear","Array","prototype","setYear","factory","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","$localeProvider","milliseconds","ParseDate","noop","indexOfCaseInsensitive","len","str","DateParserFactory","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","ss","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDateForAttribute","substr","getTimeForAttribute","undo","getDefaultLocale","getDatetimeFormat","splitTimeFormat","service","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","hasClass","tAttrs","nextSibling","nodeType","parentNode","removeChild","dropdown","AsideFactory","$aside","bsAside","aside","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$viewChangeListeners","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","bsCollapseToggle","$registerTarget","action","duration","dismissable","AlertFactory","$alert","bsAlert","alert","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","checked","toggleClass","bind","toggleEvent","v","AffixFactory","inlineStyles","$affix","setWidth","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","pageYOffset","offsetBottom","elementHeight","initialAffixTop","affixed","unpin","$parseOffsets","affix","offsetUnpin","$onResize","initialTop","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: typeahead/typeahead.js\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true,\n      preventHide: false\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        var _eventsBound = false;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element && !_eventsBound) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n              _eventsBound = true;\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if (options.preventHide) return;\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n          _eventsBound = false;\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions, $timeout) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass', 'preventHide'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          if (angular.isObject(selected) && !parsedOptions.displayValue(selected) && angular.isFunction(selected.toString)) {\n            selected = selected.toString();\n          }\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n\n          // https://github.com/mgcrea/angular-strap/pull/2079\n          // The code from this PR is commented out because it causes the\n          // field to auto-select on mobile when options.preventHide == true.\n          // I cannot reproduce the issue it was supposed to solve, so I'm leaving it out.\n\n          // var ss = element[0].selectionStart;\n          // var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          // element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n        // Always visible if this option is set\n        if (options.preventHide) {\n          $timeout(typeahead.show);\n        }\n\n      }\n    };\n\n  });\n\n// Source: tab/tab.js\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: tooltip/tooltip.js\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (tipElement !== null) {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        var autoCloseEventTrigger = isTouch ? 'touchend' : 'click';\n        function bindAutoCloseEvents() {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            if (tipElement) {\n              // Stop propagation when clicking inside tooltip\n              tipElement.on(autoCloseEventTrigger, stopEventPropagation);\n            }\n            // Hide when clicking outside tooltip\n            $body.on(autoCloseEventTrigger, $tooltip.hide);\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents() {\n          if (_autoCloseEventsBinded) {\n            if (tipElement) {\n              tipElement.off(autoCloseEventTrigger, stopEventPropagation);\n            }\n            $body.off(autoCloseEventTrigger, $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: timepicker/timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: select/select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: navbar/navbar.js\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: scrollspy/scrollspy.js\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n\n// Source: popover/popover.js\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: modal/modal.js\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: datepicker/datepicker.js\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n\n// Source: helpers/raf.js\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n\n// Source: helpers/parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n\n// Source: helpers/dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n\n// Source: helpers/debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n// Source: helpers/date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n\n// Source: helpers/date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n\n// Source: helpers/compiler.js\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = options.resolve || {};\n    var locals = options.locals || {};\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n\n// Source: dropdown/dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n\n// Source: aside/aside.js\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: collapse/collapse.js\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: alert/alert.js\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: button/button.js\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: affix/affix.js\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true,\n      preventHide: false\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        var _eventsBound = false;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element && !_eventsBound) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n              _eventsBound = true;\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if (options.preventHide) return;\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n          _eventsBound = false;\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions, $timeout) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass', 'preventHide'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          if (angular.isObject(selected) && !parsedOptions.displayValue(selected) && angular.isFunction(selected.toString)) {\n            selected = selected.toString();\n          }\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n\n          // https://github.com/mgcrea/angular-strap/pull/2079\n          // The code from this PR is commented out because it causes the\n          // field to auto-select on mobile when options.preventHide == true.\n          // I cannot reproduce the issue it was supposed to solve, so I'm leaving it out.\n\n          // var ss = element[0].selectionStart;\n          // var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          // element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n        // Always visible if this option is set\n        if (options.preventHide) {\n          $timeout(typeahead.show);\n        }\n\n      }\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = options.resolve || {};\n    var locals = options.locals || {};\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (tipElement !== null) {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        var autoCloseEventTrigger = isTouch ? 'touchend' : 'click';\n        function bindAutoCloseEvents() {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            if (tipElement) {\n              // Stop propagation when clicking inside tooltip\n              tipElement.on(autoCloseEventTrigger, stopEventPropagation);\n            }\n            // Hide when clicking outside tooltip\n            $body.on(autoCloseEventTrigger, $tooltip.hide);\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents() {\n          if (_autoCloseEventsBinded) {\n            if (tipElement) {\n              tipElement.off(autoCloseEventTrigger, stopEventPropagation);\n            }\n            $body.off(autoCloseEventTrigger, $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n"],"sourceRoot":"/source/"}