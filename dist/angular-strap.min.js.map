{"version":3,"sources":["angular-strap.js","typeahead/typeahead.js","helpers/compiler.js","dropdown/dropdown.js","tooltip/tooltip.js","timepicker/timepicker.js","tab/tab.js","select/select.js","scrollspy/scrollspy.js","popover/popover.js","navbar/navbar.js","modal/modal.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","datepicker/datepicker.js","collapse/collapse.js","button/button.js","aside/aside.js","alert/alert.js","affix/affix.js","module.js"],"names":["prefixEvent","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","defaults","animation","prefixClass","data","this","compile","controller","console","controllerAs","resolve","copy","locals","bindToController","angular","forEach","value","isString","$injector","key","invoke","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","bsCompilerService","$inject","trigger","provider","container","keyboard","delay","minLength","filter","limit","autoSelect","comparator","trimValue","$get","$typeahead","parentScope","$resetMatches","$window","$rootScope","$tooltip","$$rAF","$timeout","$matches","config","$$postDigest","$scope","activate","$activeIndex","select","index","$select","evt","matches","$isVisible","safeDigest","update","$render","$emit","length","equals","$onMouseDown","preventDefault","stopPropagation","keyCode","$digest","show","$element","hide","$onKeyDown","$$phase","$root","TypeaheadFactory","array","isFunction","$filter","expression","directive","results","postLink","attr","restrict","require","falseValueRegExp","bsOptions","test","parsedOptions","$parseOptions","typeahead","watchOptions","watchedOptions","$watchCollection","values","$match","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","$setViewValue","$viewValue","substring","displayValue","slice","$formatters","push","modelValue","selected","val","destroy","label","toString","$on","target","placement","titleTemplate","title","type","autoClose","bsEnabled","viewport","selector","padding","isTouch","TooltipFactory","$new","split","enterAnimateCallback","leaveAnimateCallback","_tipToHide","destroyTipElement","triggers","nodeName","on","toggle","enter","unbindTriggerEvents","$onFocusElementMouseDown","off","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","scrollTop","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","clearTimeout","timeout","$isShown","tipScope","$destroy","$options","$promise","$bsCompiler","toLowerCase","$id","map","parseFloat","$sce","trustAsHtml","$setEnabled","id","$hide","setEnabled","isEnabled","hoverState","compileData","promise","tipContainer","init","bindTriggerEvents","isElement","focus","parent","after","lastChild","display","visibility","clonedElement","addClass","version","prepend","$applyPlacement","$animate","leave","_blur","blur","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","query","querySelectorAll","tooltip","transclusion","isDefined","dataTarget","hasOwnProperty","$observe","bsTooltip","bsShow","match","setViewport","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","isNative","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","setSelectionRange","isUndefined","collapse","selectionStart","moveStart","selectionEnd","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","keep","Date","setHours","setMinutes","setSeconds","midIndex","hours","disabled","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","targetEl","triggerHandler","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","_show","_hide","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","self","navClass","activeClass","$activeClass","$panes","$activePaneChangeListeners","$push","pane","$active","$attrs","$navClass","$remove","active","activeIndex","indexOf","splice","$setActive","name","fn","$pane","$tab","transclude","ngModelCtrl","bsTabsCtrl","attrs","bsActivePane","parsedBsActivePane","assign","$parse","controllers","render","$isActive","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","a","b","$apply","isArray","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","e","dataMultiple","inputEl","addEventListener","join","$getIndex","$isEmpty","spies","$document","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","offsetTop","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","content","$popover","PopoverFactory","requestAnimationFrame","bsPopover","popover","routeAttr","$navbar","liElements","li","liElement","pattern","path","RegExp","regexp","backdrop","size","bodyElement","backdropCount","dialogBaseZindex","validSizes","ModalFactory","$modal","unbindBackdropEvents","modalElement","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","$show","bottom","destroyModalElement","z-index","backdropBaseZindex","customClass","minor","backdropAnimation","bindBackdropEvents","defaultPrevented","which","lg","sm","modalClass","bsModal","modal","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","call","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","prototype","noop","indexOfCaseInsensitive","len","str","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","ss","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","today","getDateForAttribute","substr","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","service","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","hasClass","tAttrs","nextSibling","nodeType","parentNode","removeChild","bsDropdown","dropdown","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","iconLeft","iconRight","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$picker","$views","$mode","datepickerViews","$selectPane","$toggleMode","setMode","updateDisabledDates","disabledDateRanges","dateRanges","mode","pristine","$updateSelected","built","$setDisabledEl","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","shiftKey","altKey","onKeyDown","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isSelected","getDay","months","lastDate","actualMonth","firstYear","years","actualYear","Array","setYear","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$viewChangeListeners","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","bsCollapseToggle","$registerTarget","action","toggleEvent","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","checked","bind","toggleClass","$eval","v","AsideFactory","$aside","bsAside","aside","duration","dismissable","AlertFactory","$alert","bsAlert","alert","AffixFactory","$affix","inlineStyles","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","offsetBottom","elementHeight","initialAffixTop","pageYOffset","affixed","unpin","$parseOffsets","affix","setWidth","offsetUnpin","$onResize","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: typeahead/typeahead.js\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = options.filter || defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) bsOptions += ' | ' + filter + ':$viewValue';\n        if (comparator) bsOptions += ':' + comparator;\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (modelValue && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          element.val(options.trimValue === false ? value : value.trim());\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tooltip/tooltip.js\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isTouch = 'createTouch' in $window.document;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) {\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: timepicker/timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tab/tab.js\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: select/select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              controller.$setViewValue(value);\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: scrollspy/scrollspy.js\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n\n// Source: popover/popover.js\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: navbar/navbar.js\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: modal/modal.js\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (options.backdrop) {\n            // decrement number of modals\n            backdropCount--;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: helpers/raf.js\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n\n// Source: helpers/parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n\n// Source: helpers/dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n\n// Source: helpers/debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n// Source: helpers/date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n\n// Source: helpers/date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n\n// Source: helpers/compiler.js\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n\n// Source: dropdown/dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n\n// Source: datepicker/datepicker.js\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n\n// Source: collapse/collapse.js\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: button/button.js\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n          // Fix rendering for exotic values\n          scope.$watch(attr.ngModel, function (newValue, oldValue) {\n            controller.$render();\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, trueValue);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            if (!hasExoticValues) {\n              controller.$render();\n            }\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: aside/aside.js\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: alert/alert.js\n// @BUG: following snippet won't compile correctly\n// @TODO: submit issue to core\n// '<span ng-if=\"title\"><strong ng-bind=\"title\"></strong>&nbsp;</span><span ng-bind-html=\"content\"></span>' +\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: affix/affix.js\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element.css('position');\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null && (scrollTop + _unpin <= position.top)) {\n            return 'middle';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix = $affix(element, options);\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = options.filter || defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) bsOptions += ' | ' + filter + ':$viewValue';\n        if (comparator) bsOptions += ':' + comparator;\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (modelValue && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          element.val(options.trimValue === false ? value : value.trim());\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isTouch = 'createTouch' in $window.document;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) {\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              controller.$setViewValue(value);\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (options.backdrop) {\n            // decrement number of modals\n            backdropCount--;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n          // Fix rendering for exotic values\n          scope.$watch(attr.ngModel, function (newValue, oldValue) {\n            controller.$render();\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, trueValue);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            if (!hasExoticValues) {\n              controller.$render();\n            }\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n// @TODO: submit issue to core\n// '<span ng-if=\"title\"><strong ng-bind=\"title\"></strong>&nbsp;</span><span ng-bind-html=\"content\"></span>' +\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element.css('position');\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null && (scrollTop + _unpin <= position.top)) {\n            return 'middle';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix = $affix(element, options);\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n"],"sourceRoot":"/source/"}