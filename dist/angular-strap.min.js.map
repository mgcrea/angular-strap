{"version":3,"sources":["angular-strap.js","typeahead/typeahead.js","helpers/compiler.js","dropdown/dropdown.js","tooltip/tooltip.js","timepicker/timepicker.js","tab/tab.js","select/select.js","scrollspy/scrollspy.js","popover/popover.js","navbar/navbar.js","modal/modal.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","datepicker/datepicker.js","collapse/collapse.js","button/button.js","alert/alert.js","aside/aside.js","affix/affix.js","module.js"],"names":["placement","document","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","bsCompilerService","$inject","$http","get","angular","module","defaults","this","animation","data","compile","controller","console","controllerAs","resolve","copy","locals","bindToController","forEach","value","isString","$injector","key","invoke","transformTemplate","identity","extend","$template","when","$q","contentEl","findElement","outerHTML","contentTemplate","all","templateEl","removeAttr","html","templates","replace","next","remove","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","trigger","provider","container","keyboard","delay","asyncdelay","minLength","filter","limit","autoSelect","comparator","trimValue","$get","bodyEl","$typeahead","$scope","$matches","config","$resetMatches","$$postDigest","activate","$activeIndex","select","index","$select","evt","matches","$isVisible","safeDigest","update","$$rAF","$render","$emit","prefixEvent","parentScope","length","l","$viewValue","i","preventDefault","stopPropagation","keyCode","$digest","show","$timeout","$element","$onMouseDown","hide","on","$onKeyDown","TypeaheadFactory","array","isFunction","$$phase","$window","body","$filter","expression","directive","results","restrict","require","falseValueRegExp","attr","bsOptions","test","parsedOptions","$parseOptions","typeahead","watchOptions","watchedOptions","$watchCollection","values","$match","$watch","ngModel","newValue","oldValue","$modelValue","valuesTimer","clearTimeout","selectMode","$setViewValue","isVisible","$formatters","displayValue","modelValue","push","selected","val","destroy","isDefined","label","toString","$on","target","title","type","autoClose","bsEnabled","viewport","selector","padding","String","htmlReplaceRegExp","$body","$tooltip","split","enterAnimateCallback","leaveAnimateCallback","_tipToHide","leave","$isShown","blur","tipElement","nodeName","triggers","toggle","unbindTriggerEvents","enter","off","bindKeyboardEvents","$onKeyUp","isTouch","$onFocusElementMouseDown","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","rect","width","elRect","height","p","top","left","dimensions","offset","el","scroll","isBody","documentElement","getCalculatedOffset","position","actualWidth","actualHeight","outerDims","clientWidth","innerHeight","tip","marginTop","parseInt","using","props","css","isNaN","right","marginLeft","setOffset","delta","getViewportAdjustedDelta","isVertical","replaceArrow","arrowDelta","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","timeout","tipScope","$destroy","$options","$promise","$bsCompiler","$new","$rootScope","toLowerCase","$id","map","parseFloat","$sce","trustAsHtml","$setEnabled","id","$hide","setEnabled","isEnabled","compileData","promise","init","tipContainer","bindTriggerEvents","isElement","destroyTipElement","hoverState","parent","after","lastChild","display","visibility","clonedElement","version","minor","addClass","$animate","customClass","$applyPlacement","focus","_blur","elementPosition","autoPlace","autoToken","viewportPosition","originalPlacement","indexOf","tipHeight","removeClass","tipPosition","applyPlacement","tipWidth","$location","transclusion","dataTarget","hasOwnProperty","tooltip","$observe","bsTooltip","bsShow","match","setViewport","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","isNative","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","setSelectionRange","isUndefined","collapse","selectionStart","moveStart","selectionEnd","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","$iconUp","$iconDown","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","minute","keep","Date","setHours","setMinutes","setSeconds","hours","midIndex","$isSelected","disabled","minutes","seconds","minutesFormat","rows","showSeconds","secondsFormat","$isDisabled","showAM","timeSeparator","$date","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","targetEl","triggerHandler","sepLength","lateralMove","count","minutesLength","selectRange","hoursLength","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","prop","_destroy","_show","_hide","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","getTimeForAttribute","parse","timezoneOffsetAdjust","NaN","self","navClass","activeClass","$activeClass","$panes","$activePaneChangeListeners","$push","pane","$active","$attrs","$navClass","$remove","active","activeIndex","splice","$setActive","name","fn","$pane","$tab","transclude","postLink","ngModelCtrl","bsTabsCtrl","attrs","bsActivePane","parsedBsActivePane","assign","$parse","render","$isActive","prefixClass","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","b","a","$apply","$getIndex","dataMultiple","inputEl","valuesFn","isArray","join","$isEmpty","spies","$document","windowEl","debounce","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","$trackedElements","sortedElements","activeTarget","debouncedCheckPosition","viewportHeight","throttledCheckPosition","debouncedCheckOffsets","scrollTop","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","offsetTop","setTimeout","activeElement","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","querySelectorAll","child","content","$popover","PopoverFactory","requestAnimationFrame","popover","bsPopover","routeAttr","$navbar","liElements","li","liElement","pattern","path","RegExp","regexp","backdrop","bodyElement","ModalFactory","$modal","modalElement","unbindBackdropEvents","hideOnBackdropClick","backdropElement","preventEventDefault","destroyModalElement","modalScope","$show","bottom","z-index","defaultPrevented","backdropAnimation","bindBackdropEvents","which","$root","query","bsModal","modal","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","$values","displayFn","valueName","valueFn","ParseOptionsFactory","groupByFn","keyName","jqLite","currentStyle","window","getComputedStyle","extra","boxRect","getBoundingClientRect","style","offsetHeight","docElement","ownerDocument","curPosition","curLeft","curCSSTop","pageYOffset","clientTop","pageXOffset","scrollLeft","clientLeft","curCSSLeft","calculatePosition","curTop","curOffset","curElem","call","offsetParentRect","offsetParentElement","offsetParent","offsetWidth","outer","func","immediate","factory","context","args","cancel","callNow","leading","trailing","wait","year","$localeProvider","milliseconds","ParseDate","prototype","isNumeric","n","isFinite","indexOfCaseInsensitive","len","str","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","noop","toDate","regExpMap","sss","$locale","dateFilter","mm","keys","setFnMap","clonedFormat","search","v","sortedMap","regExpForFormat","re","text","Object","escapeReservedSymbols","regex","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","ss","s","setDate","setMonth","setMap","setMapForFormat","$format","baseDate","formatRegex","formatSetMap","exec","fromDate","getDate","today","getDateForAttribute","substr","daylightSavingAdjust","undo","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","slice","service","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","hasClass","bsDropdown","dropdown","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","iconLeft","iconRight","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$picker","$views","$mode","datepickerViews","$selectPane","$toggleMode","setMode","updateDisabledDates","disabledDateRanges","dateRanges","mode","pristine","$updateSelected","built","$setDisabledEl","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","shiftKey","altKey","updateSelected","onKeyDown","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","daySplit","arr","mod","arrays","size","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","firstDayOfMonth","firstDate","getDay","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isSelected","firstMonth","months","lastDate","actualMonth","firstYear","years","actualYear","setYear","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$viewChangeListeners","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","controllers","bsCollapseToggle","$registerTarget","action","toggleEvent","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","equals","checked","bind","toggleClass","duration","dismissable","AlertFactory","$alert","bsAlert","alert","AsideFactory","$aside","bsAside","aside","AffixFactory","$affix","inlineStyles","reset","setWidth","initialAffixTop","getRequiredAffixClass","unpin","getScrollTop","scrollHeight","getScrollHeight","initialOffsetTop","offsetBottom","affixed","$parseOffsets","affix","elementHeight","offsetUnpin","$onResize","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: typeahead/typeahead.js\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      asyncdelay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n\n      function TypeaheadFactory(element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function() {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function(index) {\n          scope.$$postDigest(function() {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function(index, evt) {\n          scope.$$postDigest(function() {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function() {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function(matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function(index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function(index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function() {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function(value) {\n          var l = scope.$matches.length,\n            i = l;\n          if (!l) return;\n          for (i = l; i--;) {\n            if (scope.$matches[i].value === value) break;\n          }\n          if (i < 0) return;\n          return i;\n        };\n\n        $typeahead.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function(evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          }\n\n          // Navigate with keyboard\n          else if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n          else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n          else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function() {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function() {\n            $typeahead.$element && $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n            if (options.keyboard) {\n              element && element.on('keydown', $typeahead.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function() {\n          $typeahead.$element && $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            element && element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect)\n            $typeahead.activate(-1);\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function($filter) {\n    return function(array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function(results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      } else {\n        return $filter('filter')(array, expression, comparator);\n      }\n    };\n  })\n\n  .directive('bsTypeahead', function($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'asyncdelay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function(key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue'], function(key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'false');\n\n        // Build proper bsOptions\n        var filter = options.filter || defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) bsOptions += ' | ' + filter + ':$viewValue';\n        if (comparator) bsOptions += ':' + comparator;\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function(newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function(values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          if (scope.valuesTimer) {\n            clearTimeout(scope.valuesTimer);\n          }\n          scope.valuesTimer = setTimeout(function() {\n            parsedOptions.valuesFn(scope, controller)\n              .then(function(values) {\n                // Prevent input with no future prospect if selectMode is truthy\n                // @TODO test selectMode\n                if (options.selectMode && !values.length && newValue.length > 0) {\n                  controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                  return;\n                }\n                if (values.length > limit) values = values.slice(0, limit);\n                var isVisible = typeahead.$isVisible();\n                isVisible && typeahead.update(values);\n                // Do not re-queue an update if a correct value has been selected\n                if (values.length === 1 && values[0].value === newValue) return;\n                !isVisible && typeahead.update(values);\n                // Queue a new rendering that will leverage collection loading\n                controller.$render();\n              });\n          }, options.asyncdelay);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (modelValue && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function() {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = angular.isDefined(index) ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          element.val(options.trimValue === false ? value : value.trim());\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tooltip/tooltip.js\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      contentTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      viewport: {\n       selector: 'body',\n       padding: 0\n      }\n    };\n\n    this.$get = function($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var trim = String.prototype.trim;\n      var isTouch = 'createTouch' in $window.document;\n      var htmlReplaceRegExp = /ng-bind=\"/ig;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory(element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if(options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if(options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function(isEnabled) {\n          scope.$$postDigest(function() {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function() {\n          scope.$$postDigest(function() {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function() {\n          scope.$$postDigest(function() {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function() {\n          scope.$$postDigest(function() {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout, hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData, tipElement, tipContainer, tipScope;\n        promise.then(function(data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function() {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if(options.container === 'self') {\n            tipContainer = element;\n          } else if(angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if(options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if(options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if(options.show) {\n            scope.$$postDigest(function() {\n              options.trigger === 'focus' ? element[0].focus() : $tooltip.show();\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function() {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function() {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function() {\n            if (hoverState ==='in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function() {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          var parent, after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if(tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function(clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if(options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if(options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if(options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          after ? after.after(tipElement) : parent.prepend(tipElement);\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if(angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if(tipElement) tipElement.css({visibility: 'visible'});\n          });\n\n          // Bind events\n          if(options.keyboard) {\n            if(options.trigger !== 'focus') {\n              $tooltip.focus();\n            }\n            bindKeyboardEvents();\n          }\n\n          if(options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n        }\n\n        $tooltip.leave = function() {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function(blur) {\n\n          if(!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if(angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if(options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if(options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if(_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function() {\n          $tooltip.$isShown ? $tooltip.leave() : $tooltip.enter();\n        };\n\n        $tooltip.focus = function() {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function(isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function(viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function() {\n          if(!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement,\n              autoToken = /\\s?auto?\\s?/i,\n              autoPlace  = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition(),\n              tipWidth = tipElement.prop('offsetWidth'),\n              tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            // Determine if the vertical placement\n            if (originalPlacement.indexOf('bottom') >= 0 && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (originalPlacement.indexOf('top') >= 0 && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            // Determine the horizontal placement\n            // The exotic placements of left and right are opposite of the standard placements.  Their arrows are put on the left/right\n            // and flow in the opposite direction of their placement.\n            if ((originalPlacement === 'right' || originalPlacement === 'bottom-left' || originalPlacement === 'top-left') &&\n                elementPosition.right + tipWidth > viewportPosition.width) {\n\n              placement = originalPlacement === 'right' ? 'left' : placement.replace('left', 'right');\n            } else if ((originalPlacement === 'left' || originalPlacement === 'bottom-right' || originalPlacement === 'top-right') &&\n                elementPosition.left - tipWidth < viewportPosition.left) {\n\n              placement = originalPlacement === 'left' ? 'right' : placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function(evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function(evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function(evt) {\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          $tooltip.$isShown ? element[0].blur() : element[0].focus();\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents() {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function(trigger) {\n            if(trigger === 'click') {\n              element.on('click', $tooltip.toggle);\n            } else if(trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              nodeName === 'button' && trigger !== 'hover' && element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n            }\n          });\n        }\n\n        function unbindTriggerEvents() {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if(trigger === 'click') {\n              element.off('click', $tooltip.toggle);\n            } else if(trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              nodeName === 'button' && trigger !== 'hover' && element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n            }\n          }\n        }\n\n        function bindKeyboardEvents() {\n          if(options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents() {\n          if(options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents() {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents() {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation(event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0],\n              isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          for (var p in elRect) {\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top });\n          }\n          var elOffset = isBody ? { top: 0, left: 0 } : dimensions.offset(el),\n              scroll = { scroll:  isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0 },\n              outerDims = isBody ? { width: document.documentElement.clientWidth, height: $window.innerHeight } : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset(placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n          case 'right':\n            offset = {\n              top: position.top + position.height / 2 - actualHeight / 2,\n              left: position.left + position.width\n            };\n            break;\n          case 'bottom':\n            offset = {\n              top: position.top + position.height,\n              left: position.left + position.width / 2 - actualWidth / 2\n            };\n            break;\n          case 'left':\n            offset = {\n              top: position.top + position.height / 2 - actualHeight / 2,\n              left: position.left - actualWidth\n            };\n            break;\n          default:\n            offset = {\n              top: position.top - actualHeight,\n              left: position.left + position.width / 2 - actualWidth / 2\n            };\n            break;\n          }\n\n          if(!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if(split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n            case 'left':\n              offset.left = position.left;\n              break;\n            case 'right':\n              offset.left =  position.left + position.width - actualWidth;\n            }\n          } else if(split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n            case 'top':\n              offset.top = position.top - actualHeight;\n              break;\n            case 'bottom':\n              offset.top = position.top + position.height;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement(offset, placement) {\n          var tip = tipElement[0],\n              width = tip.offsetWidth,\n              height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10),\n              marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop  = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top  = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth,\n              actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement),\n                arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight,\n                arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta(placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow(delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement() {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if($tooltip.$isShown && tipElement !== null) {\n            if(options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if(options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if(tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if(tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n      }\n\n      function findElement(query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      var fetchPromises = {};\n      function fetchTemplate(template) {\n        if(fetchPromises[template]) return fetchPromises[template];\n        return (fetchPromises[template] = $http.get(template, {cache: $templateCache}).then(function(res) {\n          return res.data;\n        }));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function($window, $location, $sce, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if(angular.isDefined(dataTarget)) {\n          if(falseValueRegExp.test(dataTarget))\n            options.target = false;\n          else\n            options.target = dataTarget;\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')){\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function(newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            angular.isDefined(oldValue) && $$rAF(function() {\n              tooltip && tooltip.$applyPlacement();\n            });\n          }\n        });\n\n        // Support scope as an object\n        attr.bsTooltip && scope.$watch(attr.bsTooltip, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.title = newValue;\n          }\n          angular.isDefined(oldValue) && $$rAF(function() {\n            tooltip && tooltip.$applyPlacement();\n          });\n        }, true);\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!tooltip || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n          newValue === true ? tooltip.show() : tooltip.hide();\n        });\n\n        // Enabled binding support\n        attr.bsEnabled && scope.$watch(attr.bsEnabled, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n          if(!tooltip || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n          newValue === false ? tooltip.setEnabled(false) : tooltip.setEnabled(true);\n        });\n\n        // Viewport support\n        attr.viewport && scope.$watch(attr.viewport, function (newValue) {\n          if(!tooltip || !angular.isDefined(newValue)) return;\n          tooltip.setViewport(newValue);\n        });\n\n        // Initialize popover\n        var tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if(tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: timepicker/timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      //uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory(element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function(date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes(time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format),\n          timeSeparator = $dateFormatter.timeSeparator(format),\n          minutesFormat = $dateFormatter.minutesFormat(format),\n          secondsFormat = $dateFormatter.secondsFormat(format),\n          showSeconds = $dateFormatter.showSeconds(format),\n          showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function(date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function(value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function(date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function(date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function(date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function() {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function(date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function() {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i, midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [],\n            hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [],\n            minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [],\n            second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function(date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function(date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function(value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function(value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function(value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function(evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours(),\n            hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes(),\n            minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds(),\n            secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection(start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function() {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function() {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function() {\n          if((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            $timepicker.$element && $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              element && element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function(blur) {\n          if (!$timepicker.$isShown) return;\n          $timepicker.$element && $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            element && element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent'], function(key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function(key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if (!timepicker || !angular.isDefined(newValue)) return;\n          if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n          newValue === true ? timepicker.show() : timepicker.hide();\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function(date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function(key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\n            timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n            !isNaN(timepicker.$options[key]) && timepicker.$build();\n            validateAgainstMinMaxTime(controller.$dateValue);\n          });\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime(parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function(viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          } else {\n            validateAgainstMinMaxTime(parsedTime);\n          }\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          } else {\n            return new Date(date);\n          }\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function() {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tab/tab.js\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function(key) {\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function(pane) {\n        if(angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function(pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if(angular.isString(active)) {\n          activeIndex = self.$panes.map(function(pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        }\n        else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if(activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function(value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function() {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function(element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if(ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function(modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function(newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function(newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if(bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function(newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function() {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render() {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function() {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: select/select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok'\n    };\n\n    this.$get = function($window, $document, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory(element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        }\n        else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function(index) {\n          scope.$$postDigest(function() {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function(index, evt) {\n          scope.$$postDigest(function() {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function() {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function(index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function(matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function(index) {\n          if(options.multiple) {\n            $select.$isActive(index) ? scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1) : scope.$activeIndex.push(index);\n            if(options.sort) scope.$activeIndex.sort(function(a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function(index) {\n          var value = scope.$matches[index].value;\n          scope.$apply(function() {\n            $select.activate(index);\n            if(options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function(index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              controller.$setViewValue(value);\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function() {\n          if(controller.$modelValue && scope.$matches.length) {\n            if(options.multiple && angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function(value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            }\n          } else if(scope.$activeIndex >= scope.$matches.length) {\n            scope.$activeIndex = options.multiple ? [] : 0;\n          } else if(!controller.$modelValue && !options.multiple) {\n            scope.$activeIndex = -1;\n          }\n        };\n\n        $select.$isVisible = function() {\n          if(!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function(index) {\n          if(options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          } else {\n            return scope.$activeIndex === index;\n          }\n        };\n\n        $select.$getIndex = function(value) {\n          var l = scope.$matches.length, i = l;\n          if(!l) return;\n          for(i = l; i--;) {\n            if(scope.$matches[i].value === value) break;\n          }\n          if(i < 0) return;\n          return i;\n        };\n\n        $select.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if(isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function(evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if(!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if(evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if(evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if(evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if(angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function() {\n          _show();\n          if(options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if(options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function() {\n          if(!options.multiple && !controller.$modelValue) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if(options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if(angular.isDefined(dataMultiple)) {\n          if(falseValueRegExp.test(dataMultiple))\n            options.multiple = false;\n          else\n            options.multiple = dataMultiple;\n        }\n\n        // Add support for select markup\n        if(element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watchCollection(watchedOptions, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function(values) {\n            select.update(values);\n            controller.$render();\n          });\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected, index;\n          if(options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function(value) {\n              index = select.$getIndex(value);\n              return angular.isDefined(index) ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if(selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = angular.isDefined(index) ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected ? selected : options.placeholder) + (options.caretHtml ? options.caretHtml : defaults.caretHtml));\n        };\n\n        if(options.multiple){\n          controller.$isEmpty = function(value){\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: scrollspy/scrollspy.js\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function() {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName(element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory(config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if(!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if(spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded, unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        var viewportHeight;\n        var scrollTop;\n\n        $scrollspy.init = function() {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if(scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function() {\n\n          // Check internal ref counter\n          this.$$count--;\n          if(this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function() {\n\n          // Not ready yet\n          if(!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if(scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if(angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if(activeTarget === sortedElements[i].target) continue;\n            if(scrollTop < sortedElements[i].offsetTop) continue;\n            if(sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function() {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function(element) {\n          if(activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if(activeElement) {\n              activeElement.source.removeClass('active');\n              if(nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if(nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function(target) {\n          return trackedElements.filter(function(obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function() {\n\n          angular.forEach(trackedElements, function(trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if(options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function(el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function(a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function(target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function(target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if(trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements = trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function(i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink(scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function() {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink(element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function(child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n\n// Source: popover/popover.js\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function($tooltip) {\n\n      function PopoverFactory(element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if(options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if(angular.isDefined(dataTarget)) {\n          if(falseValueRegExp.test(dataTarget))\n            options.target = false;\n          else\n            options.target = dataTarget;\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n            angular.isDefined(oldValue) && requestAnimationFrame(function() {\n              popover && popover.$applyPlacement();\n            });\n          });\n        });\n\n        // Support scope as an object\n        attr.bsPopover && scope.$watch(attr.bsPopover, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n          angular.isDefined(oldValue) && requestAnimationFrame(function() {\n            popover && popover.$applyPlacement();\n          });\n        }, true);\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!popover || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n          newValue === true ? popover.show() : popover.hide();\n        });\n\n        // Viewport support\n        attr.viewport && scope.$watch(attr.viewport, function (newValue) {\n          if(!popover || !angular.isDefined(newValue)) return;\n          popover.setViewport(newValue);\n        });\n\n        // Initialize popover\n        var popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: navbar/navbar.js\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function() {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function() {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function() {\n\n          return $location.path();\n\n        }, function(newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function(li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if(options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if(regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: modal/modal.js\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var trim = String.prototype.trim;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      function ModalFactory(config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if(!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function(key) {\n          if(options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function() {\n          scope.$$postDigest(function() {\n            $modal.hide();\n          });\n        };\n        scope.$show = function() {\n          scope.$$postDigest(function() {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function() {\n          scope.$$postDigest(function() {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData, modalElement, modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position:'fixed', top:'0px', left:'0px', bottom:'0px', right:'0px', 'z-index': 1038});\n        promise.then(function(data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function() {\n\n          // Options: show\n          if(options.show) {\n            scope.$$postDigest(function() {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function() {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if(backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function() {\n          if($modal.$isShown) return;\n\n          var parent, after;\n          if(angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if(modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function(clonedElement, scope) {});\n\n          if(scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: animation\n          if(options.animation) {\n            if(options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if(options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if(angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function() {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if(options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n        }\n\n        $modal.hide = function() {\n          if(!$modal.$isShown) return;\n\n          if(scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if(angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if(options.backdrop) {\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if(options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function() {\n\n          $modal.$isShown ? $modal.hide() : $modal.show();\n\n        };\n\n        $modal.focus = function() {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function(evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents() {\n          if(options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents() {\n          if(options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents() {\n          if(options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents() {\n          if(options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private methods\n\n        function hideOnBackdropClick(evt) {\n          if(evt.target !== evt.currentTarget) return;\n          options.backdrop === 'static' ? $modal.focus() : $modal.hide();\n        }\n\n        function preventEventDefault(evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement() {\n          if($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if(modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if(modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n      }\n\n      function findElement(query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function($window, $sce, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'id', 'prefixEvent', 'prefixClass'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n          });\n        });\n\n        // Support scope as an object\n        attr.bsModal && scope.$watch(attr.bsModal, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n        }, true);\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: helpers/raf.js\n(angular.version.minor < 3 && angular.version.dot < 14) && angular.module('ng')\n\n.factory('$$rAF', function($window, $timeout) {\n\n  var requestAnimationFrame = $window.requestAnimationFrame ||\n                              $window.webkitRequestAnimationFrame ||\n                              $window.mozRequestAnimationFrame;\n\n  var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                             $window.webkitCancelAnimationFrame ||\n                             $window.mozCancelAnimationFrame ||\n                             $window.webkitCancelRequestAnimationFrame;\n\n  var rafSupported = !!requestAnimationFrame;\n  var raf = rafSupported ?\n    function(fn) {\n      var id = requestAnimationFrame(fn);\n      return function() {\n        cancelAnimationFrame(id);\n      };\n    } :\n    function(fn) {\n      var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n      return function() {\n        $timeout.cancel(timer);\n      };\n    };\n\n  raf.supported = rafSupported;\n\n  return raf;\n\n});\n\n// .factory('$$animateReflow', function($$rAF, $document) {\n\n//   var bodyEl = $document[0].body;\n\n//   return function(fn) {\n//     //the returned function acts as the cancellation function\n//     return $$rAF(function() {\n//       //the line below will force the browser to perform a repaint\n//       //so that all the animated elements within the animation frame\n//       //will be properly updated and drawn on screen. This is\n//       //required to perform multi-class CSS based animations with\n//       //Firefox. DO NOT REMOVE THIS LINE.\n//       var a = bodyEl.offsetWidth + 1;\n//       fn();\n//     });\n//   };\n\n// });\n\n// Source: helpers/parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function() {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function($parse, $q) {\n\n      function ParseOptionsFactory(attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match, displayFn, valueName, keyName, groupByFn, valueFn, valuesFn;\n\n        $parseOptions.init = function() {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]),\n          valueName = match[4] || match[6],\n          keyName = match[5],\n          groupByFn = $parse(match[3] || ''),\n          valueFn = $parse(match[2] ? match[1] : valueName),\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function(scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function(values) {\n            if(!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function(modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues(values, scope) {\n          return values.map(function(match, index) {\n            var locals = {}, label, value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n\n// Source: helpers/dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function($document, $window) {\n\n    var jqLite = angular.element;\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function(element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function(element, prop, extra) {\n      var value;\n      if (element.currentStyle) { //IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function(element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n  \n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition,\n          curLeft,\n          curCSSTop,\n          curTop,\n          curOffset,\n          curCSSLeft,\n          calculatePosition,\n          position = fn.css(element, 'position'),\n          curElem = angular.element(element),\n          props = {};\n      \n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n      \n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') && \n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n      \n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n      \n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n      \n      if (options.top !== null ) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if ( options.left !== null ) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function(element) {\n\n      var offsetParentRect = {top: 0, left: 0},\n          offsetParentElement,\n          offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentElement\n        offsetParentElement = offsetParent(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentElement, 'html')) {\n          offsetParentRect = fn.offset(offsetParentElement);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentElement, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentElement, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    var offsetParent = function offsetParentElement(element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if(nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while(offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    };\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function(element, outer) {\n      var value = element.offsetHeight;\n      if(outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function(element, outer) {\n      var value = element.offsetWidth;\n      if(outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n\n// Source: helpers/debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function($timeout) {\n  return function(func, wait, immediate) {\n    var timeout = null;\n    return function() {\n      var context = this,\n        args = arguments,\n        callNow = immediate && !timeout;\n      if(timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later() {\n        timeout = null;\n        if(!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if(callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function($timeout) {\n  return function(func, wait, options) {\n    var timeout = null;\n    options || (options = {});\n    return function() {\n      var context = this,\n        args = arguments;\n      if(!timeout) {\n        if(options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later() {\n          timeout = null;\n          if(options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n// Source: helpers/date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate() {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function(value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function(value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function(value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function(value) { this.hours = value; };\n  ParseDate.prototype.getHours = function() { return this.hours; };\n  ParseDate.prototype.setDate = function(value) { this.day = value; };\n  ParseDate.prototype.setMonth = function(value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function(value) { this.year = value; };\n  ParseDate.prototype.fromDate = function(value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function() {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop() {\n  }\n\n  function isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive(array, value) {\n    var len = array.length, str=value.toString().toLowerCase();\n    for (var i=0; i<len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function($locale, dateFilter) {\n\n    var DateParserFactory = function(config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}',\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function(value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function(value) { return this.setMonth(1 * value - 1); },\n        'M'     : function(value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function(value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function(value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n\n      var regex, setMap;\n\n      $dateParser.init = function() {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function(date) {\n        if(angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function(value, baseDate, format, timezone) {\n        // check for date format special names\n        if(format) format = $locale.DATETIME_FORMATS[format] || format;\n        if(angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if(!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for(var i = 0; i < matches.length - 1; i++) {\n          formatSetMap[i] && formatSetMap[i].call(date, matches[i+1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function(key, value) {\n        var date;\n\n        if(value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if(angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if(isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && 0 === value.length) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function(key, value) {\n        var time;\n\n        if(value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if(angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if(isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && 0 === value.length) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function(date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function(date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo?-1:1)*date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function setMapForFormat(format) {\n        var keys = Object.keys(setFnMap), i;\n        var map = [], sortedMap = [];\n        // Map to setFn\n        var clonedFormat = format;\n        for(i = 0; i < keys.length; i++) {\n          if(format.split(keys[i]).length > 1) {\n            var index = clonedFormat.search(keys[i]);\n            format = format.split(keys[i]).join('');\n            if(setFnMap[keys[i]]) {\n              map[index] = setFnMap[keys[i]];\n            }\n          }\n        }\n        // Sort result map\n        angular.forEach(map, function(v) {\n          // conditional required since angular.forEach broke around v1.2.21\n          // related pr: https://github.com/angular/angular.js/pull/8525\n          if(v) sortedMap.push(v);\n        });\n        return sortedMap;\n      }\n\n      function escapeReservedSymbols(text) {\n        return text.replace(/\\//g, '[\\\\/]').replace('/-/g', '[-]').replace(/\\./g, '[.]').replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function regExpForFormat(format) {\n        var keys = Object.keys(regExpMap), i;\n\n        var re = format;\n        // Abstract replaces to avoid collisions\n        for(i = 0; i < keys.length; i++) {\n          re = re.split(keys[i]).join('${' + i + '}');\n        }\n        // Replace abstracted values\n        for(i = 0; i < keys.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[keys[i]] + ')');\n        }\n        format = escapeReservedSymbols(format);\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n\n// Source: helpers/date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function() {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function(format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function(lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat(format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function(timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function(timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function(timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function(timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function(timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function(timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function(date, format, lang, timezone){\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n\n// Source: helpers/compiler.js\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService($q, $http, $injector, $compile, $controller, $templateCache) {\n  /* jshint validthis: true */\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function(options) {\n\n    if(options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function(value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      resolve.$template = $q.when(template);\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function(templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0]).removeAttr('ng-bind').html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if(!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function(locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link(scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement(query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate(template) {\n    if(fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function(res) {\n        return res.data;\n      }));\n  }\n\n}\n\n// Source: dropdown/dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory(element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var scope = $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function(evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if(!items.length) return;\n          var index;\n          angular.forEach(items, function(el, i) {\n            if(matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if(evt.keyCode === 38 && index > 0) index--;\n          else if(evt.keyCode === 40 && index < items.length - 1) index++;\n          else if(angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function() {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            options.keyboard && $dropdown.$element && $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          parentEl.hasClass('dropdown') && parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function() {\n          if(!$dropdown.$isShown) return;\n          options.keyboard && $dropdown.$element && $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          parentEl.hasClass('dropdown') && parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function() {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick(evt) {\n          if(evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Support scope as an object\n        attr.bsDropdown && scope.$watch(attr.bsDropdown, function(newValue, oldValue) {\n          scope.content = newValue;\n        }, true);\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!dropdown || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n          newValue === true ? dropdown.show() : dropdown.hide();\n        });\n\n        // Initialize dropdown\n        var dropdown = $dropdown(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (dropdown) dropdown.destroy();\n          options = null;\n          dropdown = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: datepicker/datepicker.js\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      //uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if(!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory(element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if(options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function(date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function(value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function() {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n\n        // Public methods\n\n        $datepicker.update = function(date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if(angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function(dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function(date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if(!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\n          if(!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if(options.autoclose && !keep) {\n              $timeout(function() { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function(mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function(pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if(pristine === true && $picker.built) return;\n          if(pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function() {\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function(date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function(el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function(value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if(isTouch) {\n            var targetEl = angular.element(evt.target);\n            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function(evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if(evt.keyCode === 13) {\n            if(!scope.$mode) {\n              return $datepicker.hide(true);\n            } else {\n              return scope.$apply(function() { $datepicker.setMode(scope.$mode - 1); });\n            }\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected(el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function() {\n          if(isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if(isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function() {\n          if(isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function() {\n          if((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            // if $datepicker is no longer showing, don't setup events\n            if(!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if(options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function(blur) {\n          if(!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if(options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    var defaults = $datepicker.defaults;\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!datepicker || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n          newValue === true ? datepicker.show() : datepicker.hide();\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if(isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function(date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function(key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\n            // console.warn('attr.$observe(%s)=%o', key, newValue);\n            datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n            // Build only if dirty\n            !isNaN(datepicker.$options[key]) && datepicker.$build(false);\n            validateAgainstMinMaxDate(controller.$dateValue);\n          });\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges(ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function(disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate(parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if(isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function(viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if(!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if(!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          } else {\n            validateAgainstMinMaxDate(parsedDate);\n          }\n\n          if(options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if(options.dateType === 'number') {\n            return date.getTime();\n          } else if(options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if(options.dateType === 'iso') {\n            return date.toISOString();\n          } else {\n            return new Date(date);\n          }\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if(angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if(angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if(options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if(options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function() {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if(datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function() {\n\n    var defaults = this.defaults = {\n      dayFormat: 'dd',\n      daySplit: 7\n    };\n\n    // Split array into smaller arrays\n    function split(arr, size) {\n      var arrays = [];\n      while(arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod(n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function($dateFormatter, $dateParser, $sce) {\n\n      return function(picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function(date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n            format: options.dayFormat,\n            split: 7,\n            steps: { month: 1 },\n            update: function(date, force) {\n              if(!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if(date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n                viewDate.date = picker.$date.getDate();\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1), firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n              var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5), firstDateOffset = firstDate.getTimezoneOffset();\n              var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n              if(firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n              var days = [], day;\n              for(var i = 0; i < 42; i++) { // < 7 * 6\n                day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n                days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n              }\n              scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n              scope.showLabels = true;\n              scope.labels = weekDaysLabelsHtml;\n              scope.rows = split(days, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n            },\n            isDisabled: function(date) {\n              var time = date.getTime();\n\n              // Disabled because of min/max date.\n              if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n              if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n              if (options.disabledDateRanges) {\n                for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                  if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                    return true;\n                  }\n                }\n              }\n\n              return false;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualTime = picker.$date.getTime();\n              var newDate;\n\n              if(evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n              else if(evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n              else if(evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n              else if(evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }, {\n            name: 'month',\n            format: options.monthFormat,\n            split: 4,\n            steps: { year: 1 },\n            update: function(date, force) {\n              if(!this.built || date.getFullYear() !== viewDate.year) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if(date.getMonth() !== viewDate.month) {\n                angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstMonth = new Date(viewDate.year, 0, 1);\n              var months = [], month;\n              for (var i = 0; i < 12; i++) {\n                month = new Date(viewDate.year, i, 1);\n                months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n              }\n              scope.title = formatDate(month, options.yearTitleFormat);\n              scope.showLabels = false;\n              scope.rows = split(months, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n            },\n            isDisabled: function(date) {\n              var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualMonth = picker.$date.getMonth();\n              var newDate = new Date(picker.$date);\n\n              if(evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n              else if(evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n              else if(evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n              else if(evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }, {\n            name: 'year',\n            format: options.yearFormat,\n            split: 4,\n            steps: { year: 12 },\n            update: function(date, force) {\n              if(!this.built || force || parseInt(date.getFullYear()/20, 10) !== parseInt(viewDate.year/20, 10)) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if(date.getFullYear() !== viewDate.year) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n              var years = [], year;\n              for (var i = 0; i < 12; i++) {\n                year = new Date(firstYear + i, 0, 1);\n                years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n              }\n              scope.title = years[0].label + '-' + years[years.length - 1].label;\n              scope.showLabels = false;\n              scope.rows = split(years, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n            },\n            isDisabled: function(date) {\n              var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualYear = picker.$date.getFullYear(),\n                  newDate = new Date(picker.$date);\n\n              if(evt.keyCode === 37) newDate.setYear(actualYear - 1);\n              else if(evt.keyCode === 38) newDate.setYear(actualYear - 4);\n              else if(evt.keyCode === 39) newDate.setYear(actualYear + 1);\n              else if(evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n\n// Source: collapse/collapse.js\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function(key) {\n        if(angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function(element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function(element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function(element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function(element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function(value) {\n        if(angular.isArray(value)) {\n          self.$targets.$active = value;\n        }\n        else if(!self.$options.disallowToggle) {\n          // toogle element active status\n          isActive(value) ? deactivateItem(value) : activateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function() {\n        return self.$options.allowMultiple ? self.$targets.$active :\n          self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes(index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for(var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive(value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) === -1 ? false : true;\n      }\n\n      function deactivateItem(value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem(value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function() {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function($window, $animate, $collapse) {\n\n    var defaults = $collapse.defaults;\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if(ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function() {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function(modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            }\n            else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              }\n              else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function() {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function() {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function() {\n          var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n          bsCollapseCtrl.$setActive(index * 1);\n          scope.$apply();\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if(bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function() {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render() {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          }\n          else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function() {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: button/button.js\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function() {\n\n    var defaults = this.defaults = {\n      activeClass:'active',\n      toggleEvent:'click'\n    };\n\n    this.$get = function() {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function() {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink(element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function(child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if(constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if(constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if(hasExoticValues) {\n          controller.$parsers.push(function(viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function(modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n             return angular.equals(modelValue, trueValue);\n          });\n          // Fix rendering for exotic values\n          scope.$watch(attr.ngModel, function(newValue, oldValue) {\n            controller.$render();\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, trueValue);\n          $$rAF(function() {\n            if(isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function() {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if(!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            if(!hasExoticValues) {\n              controller.$render();\n            }\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function() {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink(element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function(child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function(v) {\n          value = constantValueRegExp.test(v) ? scope.$eval(v) : v;\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, value);\n          $$rAF(function() {\n            if(isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function() {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: alert/alert.js\n// @BUG: following snippet won't compile correctly\n// @TODO: submit issue to core\n// '<span ng-if=\"title\"><strong ng-bind=\"title\"></strong>&nbsp;</span><span ng-bind-html=\"content\"></span>' +\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function($modal, $timeout) {\n\n      function AlertFactory(config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if(options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if(options.duration) {\n          $alert.show = function() {\n            show();\n            $timeout(function() {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function($window, $sce, $alert) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')){\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n          });\n        });\n\n        // Support scope as an object\n        attr.bsAlert && scope.$watch(attr.bsAlert, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n        }, true);\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: aside/aside.js\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function($modal) {\n\n      function AsideFactory(config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function($window, $sce, $aside) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n          });\n        });\n\n        // Support scope as an object\n        attr.bsAside && scope.$watch(attr.bsAside, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n        }, true);\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: affix/affix.js\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function() {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true\n    };\n\n    this.$get = function($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory(element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom',\n            setWidth = false,\n            initialAffixTop = 0,\n            initialOffsetTop = 0,\n            offsetTop = 0,\n            offsetBottom = 0,\n            affixed = null,\n            unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          }\n          else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function() {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function() {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function() {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function() {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if(affixed === affix) return;\n          affixed = affix;\n\n          if(affix === 'top') {\n            unpin = null;\n            if(setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if(affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            }\n            else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if(setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if(setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function() {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function() {\n          var initialPosition = element.css('position');\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles){\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n          }\n\n          if(options.offsetTop) {\n            if(options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if(options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if(options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              }\n              else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            }\n            else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if(options.offsetBottom) {\n            if(options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            }\n            else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles){\n            element.css('position', initialPosition);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass(unpin, position, elementHeight) {\n\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if(scrollTop <= offsetTop) {\n            return 'top';\n          } else if(unpin !== null && (scrollTop + unpin <= position.top)) {\n            return 'middle';\n          } else if(offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          } else {\n            return 'middle';\n          }\n\n        }\n\n        function getScrollTop() {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight() {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function($affix, $window) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink(scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function(key) {\n          if(angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix = $affix(element, options);\n        scope.$on('$destroy', function() {\n          affix && affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function() {\n    return {\n      controller: function($element) {\n        this.$element = $element;\n      }\n    };\n  });\n\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      asyncdelay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n\n      function TypeaheadFactory(element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function() {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function(index) {\n          scope.$$postDigest(function() {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function(index, evt) {\n          scope.$$postDigest(function() {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function() {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function(matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function(index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function(index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function() {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function(value) {\n          var l = scope.$matches.length,\n            i = l;\n          if (!l) return;\n          for (i = l; i--;) {\n            if (scope.$matches[i].value === value) break;\n          }\n          if (i < 0) return;\n          return i;\n        };\n\n        $typeahead.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function(evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          }\n\n          // Navigate with keyboard\n          else if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n          else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n          else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function() {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function() {\n            $typeahead.$element && $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n            if (options.keyboard) {\n              element && element.on('keydown', $typeahead.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function() {\n          $typeahead.$element && $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            element && element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect)\n            $typeahead.activate(-1);\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function($filter) {\n    return function(array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function(results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      } else {\n        return $filter('filter')(array, expression, comparator);\n      }\n    };\n  })\n\n  .directive('bsTypeahead', function($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'asyncdelay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function(key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue'], function(key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'false');\n\n        // Build proper bsOptions\n        var filter = options.filter || defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) bsOptions += ' | ' + filter + ':$viewValue';\n        if (comparator) bsOptions += ':' + comparator;\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function(newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function(values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          if (scope.valuesTimer) {\n            clearTimeout(scope.valuesTimer);\n          }\n          scope.valuesTimer = setTimeout(function() {\n            parsedOptions.valuesFn(scope, controller)\n              .then(function(values) {\n                // Prevent input with no future prospect if selectMode is truthy\n                // @TODO test selectMode\n                if (options.selectMode && !values.length && newValue.length > 0) {\n                  controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                  return;\n                }\n                if (values.length > limit) values = values.slice(0, limit);\n                var isVisible = typeahead.$isVisible();\n                isVisible && typeahead.update(values);\n                // Do not re-queue an update if a correct value has been selected\n                if (values.length === 1 && values[0].value === newValue) return;\n                !isVisible && typeahead.update(values);\n                // Queue a new rendering that will leverage collection loading\n                controller.$render();\n              });\n          }, options.asyncdelay);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (modelValue && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function() {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = angular.isDefined(index) ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          element.val(options.trimValue === false ? value : value.trim());\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService($q, $http, $injector, $compile, $controller, $templateCache) {\n  /* jshint validthis: true */\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function(options) {\n\n    if(options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function(value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      resolve.$template = $q.when(template);\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function(templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0]).removeAttr('ng-bind').html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if(!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function(locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link(scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement(query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate(template) {\n    if(fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function(res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory(element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var scope = $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function(evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if(!items.length) return;\n          var index;\n          angular.forEach(items, function(el, i) {\n            if(matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if(evt.keyCode === 38 && index > 0) index--;\n          else if(evt.keyCode === 40 && index < items.length - 1) index++;\n          else if(angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function() {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            options.keyboard && $dropdown.$element && $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          parentEl.hasClass('dropdown') && parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function() {\n          if(!$dropdown.$isShown) return;\n          options.keyboard && $dropdown.$element && $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          parentEl.hasClass('dropdown') && parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function() {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick(evt) {\n          if(evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Support scope as an object\n        attr.bsDropdown && scope.$watch(attr.bsDropdown, function(newValue, oldValue) {\n          scope.content = newValue;\n        }, true);\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!dropdown || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n          newValue === true ? dropdown.show() : dropdown.hide();\n        });\n\n        // Initialize dropdown\n        var dropdown = $dropdown(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (dropdown) dropdown.destroy();\n          options = null;\n          dropdown = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      contentTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      viewport: {\n       selector: 'body',\n       padding: 0\n      }\n    };\n\n    this.$get = function($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var trim = String.prototype.trim;\n      var isTouch = 'createTouch' in $window.document;\n      var htmlReplaceRegExp = /ng-bind=\"/ig;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory(element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if(options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if(options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function(isEnabled) {\n          scope.$$postDigest(function() {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function() {\n          scope.$$postDigest(function() {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function() {\n          scope.$$postDigest(function() {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function() {\n          scope.$$postDigest(function() {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout, hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData, tipElement, tipContainer, tipScope;\n        promise.then(function(data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function() {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if(options.container === 'self') {\n            tipContainer = element;\n          } else if(angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if(options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if(options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if(options.show) {\n            scope.$$postDigest(function() {\n              options.trigger === 'focus' ? element[0].focus() : $tooltip.show();\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function() {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function() {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function() {\n            if (hoverState ==='in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function() {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          var parent, after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if(tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function(clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if(options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if(options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if(options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          after ? after.after(tipElement) : parent.prepend(tipElement);\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if(angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if(tipElement) tipElement.css({visibility: 'visible'});\n          });\n\n          // Bind events\n          if(options.keyboard) {\n            if(options.trigger !== 'focus') {\n              $tooltip.focus();\n            }\n            bindKeyboardEvents();\n          }\n\n          if(options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n        }\n\n        $tooltip.leave = function() {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function(blur) {\n\n          if(!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if(angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if(options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if(options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if(_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function() {\n          $tooltip.$isShown ? $tooltip.leave() : $tooltip.enter();\n        };\n\n        $tooltip.focus = function() {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function(isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function(viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function() {\n          if(!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement,\n              autoToken = /\\s?auto?\\s?/i,\n              autoPlace  = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition(),\n              tipWidth = tipElement.prop('offsetWidth'),\n              tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            // Determine if the vertical placement\n            if (originalPlacement.indexOf('bottom') >= 0 && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (originalPlacement.indexOf('top') >= 0 && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            // Determine the horizontal placement\n            // The exotic placements of left and right are opposite of the standard placements.  Their arrows are put on the left/right\n            // and flow in the opposite direction of their placement.\n            if ((originalPlacement === 'right' || originalPlacement === 'bottom-left' || originalPlacement === 'top-left') &&\n                elementPosition.right + tipWidth > viewportPosition.width) {\n\n              placement = originalPlacement === 'right' ? 'left' : placement.replace('left', 'right');\n            } else if ((originalPlacement === 'left' || originalPlacement === 'bottom-right' || originalPlacement === 'top-right') &&\n                elementPosition.left - tipWidth < viewportPosition.left) {\n\n              placement = originalPlacement === 'left' ? 'right' : placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function(evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function(evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function(evt) {\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          $tooltip.$isShown ? element[0].blur() : element[0].focus();\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents() {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function(trigger) {\n            if(trigger === 'click') {\n              element.on('click', $tooltip.toggle);\n            } else if(trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              nodeName === 'button' && trigger !== 'hover' && element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n            }\n          });\n        }\n\n        function unbindTriggerEvents() {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if(trigger === 'click') {\n              element.off('click', $tooltip.toggle);\n            } else if(trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              nodeName === 'button' && trigger !== 'hover' && element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n            }\n          }\n        }\n\n        function bindKeyboardEvents() {\n          if(options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents() {\n          if(options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents() {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents() {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation(event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0],\n              isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          for (var p in elRect) {\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top });\n          }\n          var elOffset = isBody ? { top: 0, left: 0 } : dimensions.offset(el),\n              scroll = { scroll:  isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0 },\n              outerDims = isBody ? { width: document.documentElement.clientWidth, height: $window.innerHeight } : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset(placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n          case 'right':\n            offset = {\n              top: position.top + position.height / 2 - actualHeight / 2,\n              left: position.left + position.width\n            };\n            break;\n          case 'bottom':\n            offset = {\n              top: position.top + position.height,\n              left: position.left + position.width / 2 - actualWidth / 2\n            };\n            break;\n          case 'left':\n            offset = {\n              top: position.top + position.height / 2 - actualHeight / 2,\n              left: position.left - actualWidth\n            };\n            break;\n          default:\n            offset = {\n              top: position.top - actualHeight,\n              left: position.left + position.width / 2 - actualWidth / 2\n            };\n            break;\n          }\n\n          if(!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if(split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n            case 'left':\n              offset.left = position.left;\n              break;\n            case 'right':\n              offset.left =  position.left + position.width - actualWidth;\n            }\n          } else if(split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n            case 'top':\n              offset.top = position.top - actualHeight;\n              break;\n            case 'bottom':\n              offset.top = position.top + position.height;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement(offset, placement) {\n          var tip = tipElement[0],\n              width = tip.offsetWidth,\n              height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10),\n              marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop  = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top  = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth,\n              actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement),\n                arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight,\n                arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta(placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow(delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement() {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if($tooltip.$isShown && tipElement !== null) {\n            if(options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if(options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if(tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if(tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n      }\n\n      function findElement(query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      var fetchPromises = {};\n      function fetchTemplate(template) {\n        if(fetchPromises[template]) return fetchPromises[template];\n        return (fetchPromises[template] = $http.get(template, {cache: $templateCache}).then(function(res) {\n          return res.data;\n        }));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function($window, $location, $sce, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if(angular.isDefined(dataTarget)) {\n          if(falseValueRegExp.test(dataTarget))\n            options.target = false;\n          else\n            options.target = dataTarget;\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')){\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function(newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            angular.isDefined(oldValue) && $$rAF(function() {\n              tooltip && tooltip.$applyPlacement();\n            });\n          }\n        });\n\n        // Support scope as an object\n        attr.bsTooltip && scope.$watch(attr.bsTooltip, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.title = newValue;\n          }\n          angular.isDefined(oldValue) && $$rAF(function() {\n            tooltip && tooltip.$applyPlacement();\n          });\n        }, true);\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!tooltip || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n          newValue === true ? tooltip.show() : tooltip.hide();\n        });\n\n        // Enabled binding support\n        attr.bsEnabled && scope.$watch(attr.bsEnabled, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n          if(!tooltip || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n          newValue === false ? tooltip.setEnabled(false) : tooltip.setEnabled(true);\n        });\n\n        // Viewport support\n        attr.viewport && scope.$watch(attr.viewport, function (newValue) {\n          if(!tooltip || !angular.isDefined(newValue)) return;\n          tooltip.setViewport(newValue);\n        });\n\n        // Initialize popover\n        var tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if(tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      //uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory(element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function(date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes(time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format),\n          timeSeparator = $dateFormatter.timeSeparator(format),\n          minutesFormat = $dateFormatter.minutesFormat(format),\n          secondsFormat = $dateFormatter.secondsFormat(format),\n          showSeconds = $dateFormatter.showSeconds(format),\n          showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function(date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function(value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function(date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function(date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function(date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function() {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function(date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function() {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i, midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [],\n            hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [],\n            minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [],\n            second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function(date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function(date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function(value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function(value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function(value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function(evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours(),\n            hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes(),\n            minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds(),\n            secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection(start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function() {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function() {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function() {\n          if((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            $timepicker.$element && $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              element && element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function(blur) {\n          if (!$timepicker.$isShown) return;\n          $timepicker.$element && $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            element && element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent'], function(key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function(key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if (!timepicker || !angular.isDefined(newValue)) return;\n          if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n          newValue === true ? timepicker.show() : timepicker.hide();\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function(date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function(key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\n            timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n            !isNaN(timepicker.$options[key]) && timepicker.$build();\n            validateAgainstMinMaxTime(controller.$dateValue);\n          });\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime(parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function(viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          } else {\n            validateAgainstMinMaxTime(parsedTime);\n          }\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          } else {\n            return new Date(date);\n          }\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function() {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function(key) {\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function(pane) {\n        if(angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function(pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if(angular.isString(active)) {\n          activeIndex = self.$panes.map(function(pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        }\n        else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if(activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function(value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function() {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function(element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if(ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function(modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function(newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function(newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if(bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function(newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function() {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render() {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function() {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok'\n    };\n\n    this.$get = function($window, $document, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory(element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        }\n        else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function(index) {\n          scope.$$postDigest(function() {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function(index, evt) {\n          scope.$$postDigest(function() {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function() {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function(index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function(matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function(index) {\n          if(options.multiple) {\n            $select.$isActive(index) ? scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1) : scope.$activeIndex.push(index);\n            if(options.sort) scope.$activeIndex.sort(function(a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function(index) {\n          var value = scope.$matches[index].value;\n          scope.$apply(function() {\n            $select.activate(index);\n            if(options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function(index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              controller.$setViewValue(value);\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function() {\n          if(controller.$modelValue && scope.$matches.length) {\n            if(options.multiple && angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function(value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            }\n          } else if(scope.$activeIndex >= scope.$matches.length) {\n            scope.$activeIndex = options.multiple ? [] : 0;\n          } else if(!controller.$modelValue && !options.multiple) {\n            scope.$activeIndex = -1;\n          }\n        };\n\n        $select.$isVisible = function() {\n          if(!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function(index) {\n          if(options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          } else {\n            return scope.$activeIndex === index;\n          }\n        };\n\n        $select.$getIndex = function(value) {\n          var l = scope.$matches.length, i = l;\n          if(!l) return;\n          for(i = l; i--;) {\n            if(scope.$matches[i].value === value) break;\n          }\n          if(i < 0) return;\n          return i;\n        };\n\n        $select.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if(isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function(evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if(!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if(evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if(evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if(evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if(angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function() {\n          _show();\n          if(options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if(options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function() {\n          if(!options.multiple && !controller.$modelValue) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if(options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if(angular.isDefined(dataMultiple)) {\n          if(falseValueRegExp.test(dataMultiple))\n            options.multiple = false;\n          else\n            options.multiple = dataMultiple;\n        }\n\n        // Add support for select markup\n        if(element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watchCollection(watchedOptions, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function(values) {\n            select.update(values);\n            controller.$render();\n          });\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected, index;\n          if(options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function(value) {\n              index = select.$getIndex(value);\n              return angular.isDefined(index) ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if(selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = angular.isDefined(index) ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected ? selected : options.placeholder) + (options.caretHtml ? options.caretHtml : defaults.caretHtml));\n        };\n\n        if(options.multiple){\n          controller.$isEmpty = function(value){\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function() {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName(element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory(config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if(!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if(spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded, unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        var viewportHeight;\n        var scrollTop;\n\n        $scrollspy.init = function() {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if(scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function() {\n\n          // Check internal ref counter\n          this.$$count--;\n          if(this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function() {\n\n          // Not ready yet\n          if(!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if(scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if(angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if(activeTarget === sortedElements[i].target) continue;\n            if(scrollTop < sortedElements[i].offsetTop) continue;\n            if(sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function() {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function(element) {\n          if(activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if(activeElement) {\n              activeElement.source.removeClass('active');\n              if(nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if(nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function(target) {\n          return trackedElements.filter(function(obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function() {\n\n          angular.forEach(trackedElements, function(trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if(options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function(el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function(a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function(target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function(target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if(trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements = trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function(i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink(scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function() {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink(element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function(child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function($tooltip) {\n\n      function PopoverFactory(element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if(options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if(angular.isDefined(dataTarget)) {\n          if(falseValueRegExp.test(dataTarget))\n            options.target = false;\n          else\n            options.target = dataTarget;\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n            angular.isDefined(oldValue) && requestAnimationFrame(function() {\n              popover && popover.$applyPlacement();\n            });\n          });\n        });\n\n        // Support scope as an object\n        attr.bsPopover && scope.$watch(attr.bsPopover, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n          angular.isDefined(oldValue) && requestAnimationFrame(function() {\n            popover && popover.$applyPlacement();\n          });\n        }, true);\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!popover || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n          newValue === true ? popover.show() : popover.hide();\n        });\n\n        // Viewport support\n        attr.viewport && scope.$watch(attr.viewport, function (newValue) {\n          if(!popover || !angular.isDefined(newValue)) return;\n          popover.setViewport(newValue);\n        });\n\n        // Initialize popover\n        var popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function() {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function() {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function() {\n\n          return $location.path();\n\n        }, function(newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function(li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if(options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if(regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var trim = String.prototype.trim;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      function ModalFactory(config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if(!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function(key) {\n          if(options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function() {\n          scope.$$postDigest(function() {\n            $modal.hide();\n          });\n        };\n        scope.$show = function() {\n          scope.$$postDigest(function() {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function() {\n          scope.$$postDigest(function() {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData, modalElement, modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position:'fixed', top:'0px', left:'0px', bottom:'0px', right:'0px', 'z-index': 1038});\n        promise.then(function(data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function() {\n\n          // Options: show\n          if(options.show) {\n            scope.$$postDigest(function() {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function() {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if(backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function() {\n          if($modal.$isShown) return;\n\n          var parent, after;\n          if(angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if(modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function(clonedElement, scope) {});\n\n          if(scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: animation\n          if(options.animation) {\n            if(options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if(options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if(angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function() {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if(options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n        }\n\n        $modal.hide = function() {\n          if(!$modal.$isShown) return;\n\n          if(scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if(angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if(options.backdrop) {\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if(options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function() {\n\n          $modal.$isShown ? $modal.hide() : $modal.show();\n\n        };\n\n        $modal.focus = function() {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function(evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents() {\n          if(options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents() {\n          if(options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents() {\n          if(options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents() {\n          if(options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private methods\n\n        function hideOnBackdropClick(evt) {\n          if(evt.target !== evt.currentTarget) return;\n          options.backdrop === 'static' ? $modal.focus() : $modal.hide();\n        }\n\n        function preventEventDefault(evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement() {\n          if($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if(modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if(modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n      }\n\n      function findElement(query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function($window, $sce, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'id', 'prefixEvent', 'prefixClass'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n          });\n        });\n\n        // Support scope as an object\n        attr.bsModal && scope.$watch(attr.bsModal, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n        }, true);\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n(angular.version.minor < 3 && angular.version.dot < 14) && angular.module('ng')\n\n.factory('$$rAF', function($window, $timeout) {\n\n  var requestAnimationFrame = $window.requestAnimationFrame ||\n                              $window.webkitRequestAnimationFrame ||\n                              $window.mozRequestAnimationFrame;\n\n  var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                             $window.webkitCancelAnimationFrame ||\n                             $window.mozCancelAnimationFrame ||\n                             $window.webkitCancelRequestAnimationFrame;\n\n  var rafSupported = !!requestAnimationFrame;\n  var raf = rafSupported ?\n    function(fn) {\n      var id = requestAnimationFrame(fn);\n      return function() {\n        cancelAnimationFrame(id);\n      };\n    } :\n    function(fn) {\n      var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n      return function() {\n        $timeout.cancel(timer);\n      };\n    };\n\n  raf.supported = rafSupported;\n\n  return raf;\n\n});\n\n// .factory('$$animateReflow', function($$rAF, $document) {\n\n//   var bodyEl = $document[0].body;\n\n//   return function(fn) {\n//     //the returned function acts as the cancellation function\n//     return $$rAF(function() {\n//       //the line below will force the browser to perform a repaint\n//       //so that all the animated elements within the animation frame\n//       //will be properly updated and drawn on screen. This is\n//       //required to perform multi-class CSS based animations with\n//       //Firefox. DO NOT REMOVE THIS LINE.\n//       var a = bodyEl.offsetWidth + 1;\n//       fn();\n//     });\n//   };\n\n// });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function() {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function($parse, $q) {\n\n      function ParseOptionsFactory(attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match, displayFn, valueName, keyName, groupByFn, valueFn, valuesFn;\n\n        $parseOptions.init = function() {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]),\n          valueName = match[4] || match[6],\n          keyName = match[5],\n          groupByFn = $parse(match[3] || ''),\n          valueFn = $parse(match[2] ? match[1] : valueName),\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function(scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function(values) {\n            if(!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function(modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues(values, scope) {\n          return values.map(function(match, index) {\n            var locals = {}, label, value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function($document, $window) {\n\n    var jqLite = angular.element;\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function(element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function(element, prop, extra) {\n      var value;\n      if (element.currentStyle) { //IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function(element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n  \n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition,\n          curLeft,\n          curCSSTop,\n          curTop,\n          curOffset,\n          curCSSLeft,\n          calculatePosition,\n          position = fn.css(element, 'position'),\n          curElem = angular.element(element),\n          props = {};\n      \n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n      \n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') && \n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n      \n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n      \n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n      \n      if (options.top !== null ) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if ( options.left !== null ) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function(element) {\n\n      var offsetParentRect = {top: 0, left: 0},\n          offsetParentElement,\n          offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentElement\n        offsetParentElement = offsetParent(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentElement, 'html')) {\n          offsetParentRect = fn.offset(offsetParentElement);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentElement, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentElement, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    var offsetParent = function offsetParentElement(element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if(nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while(offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    };\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function(element, outer) {\n      var value = element.offsetHeight;\n      if(outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function(element, outer) {\n      var value = element.offsetWidth;\n      if(outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function($timeout) {\n  return function(func, wait, immediate) {\n    var timeout = null;\n    return function() {\n      var context = this,\n        args = arguments,\n        callNow = immediate && !timeout;\n      if(timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later() {\n        timeout = null;\n        if(!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if(callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function($timeout) {\n  return function(func, wait, options) {\n    var timeout = null;\n    options || (options = {});\n    return function() {\n      var context = this,\n        args = arguments;\n      if(!timeout) {\n        if(options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later() {\n          timeout = null;\n          if(options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate() {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function(value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function(value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function(value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function(value) { this.hours = value; };\n  ParseDate.prototype.getHours = function() { return this.hours; };\n  ParseDate.prototype.setDate = function(value) { this.day = value; };\n  ParseDate.prototype.setMonth = function(value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function(value) { this.year = value; };\n  ParseDate.prototype.fromDate = function(value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function() {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop() {\n  }\n\n  function isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive(array, value) {\n    var len = array.length, str=value.toString().toLowerCase();\n    for (var i=0; i<len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function($locale, dateFilter) {\n\n    var DateParserFactory = function(config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}',\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function(value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function(value) { return this.setMonth(1 * value - 1); },\n        'M'     : function(value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function(value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function(value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n\n      var regex, setMap;\n\n      $dateParser.init = function() {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function(date) {\n        if(angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function(value, baseDate, format, timezone) {\n        // check for date format special names\n        if(format) format = $locale.DATETIME_FORMATS[format] || format;\n        if(angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if(!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for(var i = 0; i < matches.length - 1; i++) {\n          formatSetMap[i] && formatSetMap[i].call(date, matches[i+1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function(key, value) {\n        var date;\n\n        if(value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if(angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if(isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && 0 === value.length) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function(key, value) {\n        var time;\n\n        if(value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if(angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if(isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && 0 === value.length) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function(date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function(date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo?-1:1)*date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function setMapForFormat(format) {\n        var keys = Object.keys(setFnMap), i;\n        var map = [], sortedMap = [];\n        // Map to setFn\n        var clonedFormat = format;\n        for(i = 0; i < keys.length; i++) {\n          if(format.split(keys[i]).length > 1) {\n            var index = clonedFormat.search(keys[i]);\n            format = format.split(keys[i]).join('');\n            if(setFnMap[keys[i]]) {\n              map[index] = setFnMap[keys[i]];\n            }\n          }\n        }\n        // Sort result map\n        angular.forEach(map, function(v) {\n          // conditional required since angular.forEach broke around v1.2.21\n          // related pr: https://github.com/angular/angular.js/pull/8525\n          if(v) sortedMap.push(v);\n        });\n        return sortedMap;\n      }\n\n      function escapeReservedSymbols(text) {\n        return text.replace(/\\//g, '[\\\\/]').replace('/-/g', '[-]').replace(/\\./g, '[.]').replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function regExpForFormat(format) {\n        var keys = Object.keys(regExpMap), i;\n\n        var re = format;\n        // Abstract replaces to avoid collisions\n        for(i = 0; i < keys.length; i++) {\n          re = re.split(keys[i]).join('${' + i + '}');\n        }\n        // Replace abstracted values\n        for(i = 0; i < keys.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[keys[i]] + ')');\n        }\n        format = escapeReservedSymbols(format);\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function() {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function(format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function(lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat(format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function(timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function(timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function(timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function(timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function(timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function(timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function(date, format, lang, timezone){\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      //uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if(!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory(element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if(options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function(date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function(value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function() {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n\n        // Public methods\n\n        $datepicker.update = function(date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if(angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function(dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function(date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if(!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\n          if(!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if(options.autoclose && !keep) {\n              $timeout(function() { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function(mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function(pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if(pristine === true && $picker.built) return;\n          if(pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function() {\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function(date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function(el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function(value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if(isTouch) {\n            var targetEl = angular.element(evt.target);\n            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function(evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if(evt.keyCode === 13) {\n            if(!scope.$mode) {\n              return $datepicker.hide(true);\n            } else {\n              return scope.$apply(function() { $datepicker.setMode(scope.$mode - 1); });\n            }\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected(el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function() {\n          if(isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if(isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function() {\n          if(isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function() {\n          if((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            // if $datepicker is no longer showing, don't setup events\n            if(!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if(options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function(blur) {\n          if(!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if(options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    var defaults = $datepicker.defaults;\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!datepicker || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n          newValue === true ? datepicker.show() : datepicker.hide();\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if(isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function(date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function(key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\n            // console.warn('attr.$observe(%s)=%o', key, newValue);\n            datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n            // Build only if dirty\n            !isNaN(datepicker.$options[key]) && datepicker.$build(false);\n            validateAgainstMinMaxDate(controller.$dateValue);\n          });\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges(ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function(disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate(parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if(isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function(viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if(!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if(!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          } else {\n            validateAgainstMinMaxDate(parsedDate);\n          }\n\n          if(options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if(options.dateType === 'number') {\n            return date.getTime();\n          } else if(options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if(options.dateType === 'iso') {\n            return date.toISOString();\n          } else {\n            return new Date(date);\n          }\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if(angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if(angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if(options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if(options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function() {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if(datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function() {\n\n    var defaults = this.defaults = {\n      dayFormat: 'dd',\n      daySplit: 7\n    };\n\n    // Split array into smaller arrays\n    function split(arr, size) {\n      var arrays = [];\n      while(arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod(n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function($dateFormatter, $dateParser, $sce) {\n\n      return function(picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function(date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n            format: options.dayFormat,\n            split: 7,\n            steps: { month: 1 },\n            update: function(date, force) {\n              if(!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if(date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n                viewDate.date = picker.$date.getDate();\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1), firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n              var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5), firstDateOffset = firstDate.getTimezoneOffset();\n              var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n              if(firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n              var days = [], day;\n              for(var i = 0; i < 42; i++) { // < 7 * 6\n                day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n                days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n              }\n              scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n              scope.showLabels = true;\n              scope.labels = weekDaysLabelsHtml;\n              scope.rows = split(days, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n            },\n            isDisabled: function(date) {\n              var time = date.getTime();\n\n              // Disabled because of min/max date.\n              if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n              if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n              if (options.disabledDateRanges) {\n                for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                  if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                    return true;\n                  }\n                }\n              }\n\n              return false;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualTime = picker.$date.getTime();\n              var newDate;\n\n              if(evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n              else if(evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n              else if(evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n              else if(evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }, {\n            name: 'month',\n            format: options.monthFormat,\n            split: 4,\n            steps: { year: 1 },\n            update: function(date, force) {\n              if(!this.built || date.getFullYear() !== viewDate.year) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if(date.getMonth() !== viewDate.month) {\n                angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstMonth = new Date(viewDate.year, 0, 1);\n              var months = [], month;\n              for (var i = 0; i < 12; i++) {\n                month = new Date(viewDate.year, i, 1);\n                months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n              }\n              scope.title = formatDate(month, options.yearTitleFormat);\n              scope.showLabels = false;\n              scope.rows = split(months, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n            },\n            isDisabled: function(date) {\n              var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualMonth = picker.$date.getMonth();\n              var newDate = new Date(picker.$date);\n\n              if(evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n              else if(evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n              else if(evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n              else if(evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }, {\n            name: 'year',\n            format: options.yearFormat,\n            split: 4,\n            steps: { year: 12 },\n            update: function(date, force) {\n              if(!this.built || force || parseInt(date.getFullYear()/20, 10) !== parseInt(viewDate.year/20, 10)) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if(date.getFullYear() !== viewDate.year) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n              var years = [], year;\n              for (var i = 0; i < 12; i++) {\n                year = new Date(firstYear + i, 0, 1);\n                years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n              }\n              scope.title = years[0].label + '-' + years[years.length - 1].label;\n              scope.showLabels = false;\n              scope.rows = split(years, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n            },\n            isDisabled: function(date) {\n              var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualYear = picker.$date.getFullYear(),\n                  newDate = new Date(picker.$date);\n\n              if(evt.keyCode === 37) newDate.setYear(actualYear - 1);\n              else if(evt.keyCode === 38) newDate.setYear(actualYear - 4);\n              else if(evt.keyCode === 39) newDate.setYear(actualYear + 1);\n              else if(evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function(key) {\n        if(angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function(element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function(element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function(element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function(element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function(value) {\n        if(angular.isArray(value)) {\n          self.$targets.$active = value;\n        }\n        else if(!self.$options.disallowToggle) {\n          // toogle element active status\n          isActive(value) ? deactivateItem(value) : activateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function() {\n        return self.$options.allowMultiple ? self.$targets.$active :\n          self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes(index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for(var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive(value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) === -1 ? false : true;\n      }\n\n      function deactivateItem(value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem(value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function() {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function($window, $animate, $collapse) {\n\n    var defaults = $collapse.defaults;\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if(ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function() {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function(modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            }\n            else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              }\n              else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function() {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function() {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function() {\n          var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n          bsCollapseCtrl.$setActive(index * 1);\n          scope.$apply();\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if(bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function() {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render() {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          }\n          else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function() {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function() {\n\n    var defaults = this.defaults = {\n      activeClass:'active',\n      toggleEvent:'click'\n    };\n\n    this.$get = function() {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function() {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink(element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function(child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if(constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if(constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if(hasExoticValues) {\n          controller.$parsers.push(function(viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function(modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n             return angular.equals(modelValue, trueValue);\n          });\n          // Fix rendering for exotic values\n          scope.$watch(attr.ngModel, function(newValue, oldValue) {\n            controller.$render();\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, trueValue);\n          $$rAF(function() {\n            if(isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function() {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if(!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            if(!hasExoticValues) {\n              controller.$render();\n            }\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function() {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink(element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function(child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function(v) {\n          value = constantValueRegExp.test(v) ? scope.$eval(v) : v;\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, value);\n          $$rAF(function() {\n            if(isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function() {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n// @TODO: submit issue to core\n// '<span ng-if=\"title\"><strong ng-bind=\"title\"></strong>&nbsp;</span><span ng-bind-html=\"content\"></span>' +\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function($modal, $timeout) {\n\n      function AlertFactory(config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if(options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if(options.duration) {\n          $alert.show = function() {\n            show();\n            $timeout(function() {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function($window, $sce, $alert) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')){\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n          });\n        });\n\n        // Support scope as an object\n        attr.bsAlert && scope.$watch(attr.bsAlert, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n        }, true);\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function($modal) {\n\n      function AsideFactory(config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function($window, $sce, $aside) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n          });\n        });\n\n        // Support scope as an object\n        attr.bsAside && scope.$watch(attr.bsAside, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n        }, true);\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function() {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true\n    };\n\n    this.$get = function($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory(element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom',\n            setWidth = false,\n            initialAffixTop = 0,\n            initialOffsetTop = 0,\n            offsetTop = 0,\n            offsetBottom = 0,\n            affixed = null,\n            unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          }\n          else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function() {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function() {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function() {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function() {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if(affixed === affix) return;\n          affixed = affix;\n\n          if(affix === 'top') {\n            unpin = null;\n            if(setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if(affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            }\n            else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if(setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if(setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function() {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function() {\n          var initialPosition = element.css('position');\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles){\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n          }\n\n          if(options.offsetTop) {\n            if(options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if(options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if(options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              }\n              else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            }\n            else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if(options.offsetBottom) {\n            if(options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            }\n            else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles){\n            element.css('position', initialPosition);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass(unpin, position, elementHeight) {\n\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if(scrollTop <= offsetTop) {\n            return 'top';\n          } else if(unpin !== null && (scrollTop + unpin <= position.top)) {\n            return 'middle';\n          } else if(offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          } else {\n            return 'middle';\n          }\n\n        }\n\n        function getScrollTop() {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight() {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function($affix, $window) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink(scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function(key) {\n          if(angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix = $affix(element, options);\n        scope.$on('$destroy', function() {\n          affix && affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function() {\n    return {\n      controller: function($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n"],"sourceRoot":"/source/"}