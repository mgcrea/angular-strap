{"version":3,"sources":["module.js","affix/affix.js","alert/alert.js","aside/aside.js","button/button.js","collapse/collapse.js","datepicker/datepicker.js","dropdown/dropdown.js","helpers/date-formatter.js","helpers/date-parser.js","helpers/debounce.js","helpers/dimensions.js","helpers/parse-options.js","helpers/raf.js","modal/modal.js","navbar/navbar.js","popover/popover.js","scrollspy/scrollspy.js","select/select.js","tab/tab.js","timepicker/timepicker.js","tooltip/tooltip.js","typeahead/typeahead.js"],"names":[],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["\r\nangular.module('mgcrea.ngStrap', [\r\n  'mgcrea.ngStrap.modal',\r\n  'mgcrea.ngStrap.aside',\r\n  'mgcrea.ngStrap.alert',\r\n  'mgcrea.ngStrap.button',\r\n  'mgcrea.ngStrap.select',\r\n  'mgcrea.ngStrap.datepicker',\r\n  'mgcrea.ngStrap.timepicker',\r\n  'mgcrea.ngStrap.navbar',\r\n  'mgcrea.ngStrap.tooltip',\r\n  'mgcrea.ngStrap.popover',\r\n  'mgcrea.ngStrap.dropdown',\r\n  'mgcrea.ngStrap.typeahead',\r\n  'mgcrea.ngStrap.scrollspy',\r\n  'mgcrea.ngStrap.affix',\r\n  'mgcrea.ngStrap.tab',\r\n  'mgcrea.ngStrap.collapse'\r\n]);\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\r\n\r\n  .provider('$affix', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      offsetTop: 'auto'\r\n    };\r\n\r\n    this.$get = function($window, debounce, dimensions) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var windowEl = angular.element($window);\r\n\r\n      function AffixFactory(element, config) {\r\n\r\n        var $affix = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var targetEl = options.target;\r\n\r\n        // Initial private vars\r\n        var reset = 'affix affix-top affix-bottom',\r\n            setWidth = false,\r\n            initialAffixTop = 0,\r\n            initialOffsetTop = 0,\r\n            offsetTop = 0,\r\n            offsetBottom = 0,\r\n            affixed = null,\r\n            unpin = null;\r\n\r\n        var parent = element.parent();\r\n        // Options: custom parent\r\n        if (options.offsetParent) {\r\n          if (options.offsetParent.match(/^\\d+$/)) {\r\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\r\n              parent = parent.parent();\r\n            }\r\n          }\r\n          else {\r\n            parent = angular.element(options.offsetParent);\r\n          }\r\n        }\r\n\r\n        $affix.init = function() {\r\n\r\n          this.$parseOffsets();\r\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\r\n          setWidth = !element[0].style.width;\r\n\r\n          // Bind events\r\n          targetEl.on('scroll', this.checkPosition);\r\n          targetEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', this.$debouncedOnResize);\r\n\r\n          // Both of these checkPosition() calls are necessary for the case where\r\n          // the user hits refresh after scrolling to the bottom of the page.\r\n          this.checkPosition();\r\n          this.checkPositionWithEventLoop();\r\n\r\n        };\r\n\r\n        $affix.destroy = function() {\r\n\r\n          // Unbind events\r\n          targetEl.off('scroll', this.checkPosition);\r\n          targetEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', this.$debouncedOnResize);\r\n\r\n        };\r\n\r\n        $affix.checkPositionWithEventLoop = function() {\r\n\r\n          // IE 9 throws an error if we use 'this' instead of '$affix'\r\n          // in this setTimeout call\r\n          setTimeout($affix.checkPosition, 1);\r\n\r\n        };\r\n\r\n        $affix.checkPosition = function() {\r\n          // if (!this.$element.is(':visible')) return\r\n\r\n          var scrollTop = getScrollTop();\r\n          var position = dimensions.offset(element[0]);\r\n          var elementHeight = dimensions.height(element[0]);\r\n\r\n          // Get required affix class according to position\r\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\r\n\r\n          // Did affix status changed this last check?\r\n          if(affixed === affix) return;\r\n          affixed = affix;\r\n\r\n          // Add proper affix class\r\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\r\n\r\n          if(affix === 'top') {\r\n            unpin = null;\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n            if(setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            element.css('top', '');\r\n          } else if(affix === 'bottom') {\r\n            if (options.offsetUnpin) {\r\n              unpin = -(options.offsetUnpin * 1);\r\n            }\r\n            else {\r\n              // Calculate unpin threshold when affixed to bottom.\r\n              // Hopefully the browser scrolls pixel by pixel.\r\n              unpin = position.top - scrollTop;\r\n            }\r\n            if(setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n            element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\r\n          } else { // affix === 'middle'\r\n            unpin = null;\r\n            if(setWidth) {\r\n              element.css('width', element[0].offsetWidth + 'px');\r\n            }\r\n            element.css('position', 'fixed');\r\n            element.css('top', initialAffixTop + 'px');\r\n          }\r\n\r\n        };\r\n\r\n        $affix.$onResize = function() {\r\n          $affix.$parseOffsets();\r\n          $affix.checkPosition();\r\n        };\r\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\r\n\r\n        $affix.$parseOffsets = function() {\r\n          var initialPosition = element.css('position');\r\n          // Reset position to calculate correct offsetTop\r\n          element.css('position', (options.offsetParent) ? '' : 'relative');\r\n\r\n          if(options.offsetTop) {\r\n            if(options.offsetTop === 'auto') {\r\n              options.offsetTop = '+0';\r\n            }\r\n            if(options.offsetTop.match(/^[-+]\\d+$/)) {\r\n              initialAffixTop = - options.offsetTop * 1;\r\n              if(options.offsetParent) {\r\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\r\n              }\r\n              else {\r\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\r\n              }\r\n            }\r\n            else {\r\n              offsetTop = options.offsetTop * 1;\r\n            }\r\n          }\r\n\r\n          if(options.offsetBottom) {\r\n            if(options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\r\n              // add 1 pixel due to rounding problems...\r\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\r\n            }\r\n            else {\r\n              offsetBottom = options.offsetBottom * 1;\r\n            }\r\n          }\r\n\r\n          // Bring back the element's position after calculations\r\n          element.css('position', initialPosition);\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function getRequiredAffixClass(unpin, position, elementHeight) {\r\n\r\n          var scrollTop = getScrollTop();\r\n          var scrollHeight = getScrollHeight();\r\n\r\n          if(scrollTop <= offsetTop) {\r\n            return 'top';\r\n          } else if(unpin !== null && (scrollTop + unpin <= position.top)) {\r\n            return 'middle';\r\n          } else if(offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\r\n            return 'bottom';\r\n          } else {\r\n            return 'middle';\r\n          }\r\n\r\n        }\r\n\r\n        function getScrollTop() {\r\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\r\n        }\r\n\r\n        function getScrollHeight() {\r\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\r\n        }\r\n\r\n        $affix.init();\r\n        return $affix;\r\n\r\n      }\r\n\r\n      return AffixFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffix', function($affix, $window) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: '^?bsAffixTarget',\r\n      link: function postLink(scope, element, attr, affixTarget) {\r\n\r\n        var options = {scope: scope, offsetTop: 'auto', target: affixTarget ? affixTarget.$element : angular.element($window)};\r\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        var affix = $affix(element, options);\r\n        scope.$on('$destroy', function() {\r\n          affix && affix.destroy();\r\n          options = null;\r\n          affix = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffixTarget', function() {\r\n    return {\r\n      controller: function($element) {\r\n        this.$element = $element;\r\n      }\r\n    };\r\n  });\r\n","'use strict';\r\n\r\n// @BUG: following snippet won't compile correctly\r\n// @TODO: submit issue to core\r\n// '<span ng-if=\"title\"><strong ng-bind=\"title\"></strong>&nbsp;</span><span ng-bind-html=\"content\"></span>' +\r\n\r\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$alert', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'alert',\r\n      prefixEvent: 'alert',\r\n      placement: null,\r\n      template: 'alert/alert.tpl.html',\r\n      container: false,\r\n      element: null,\r\n      backdrop: false,\r\n      keyboard: true,\r\n      show: true,\r\n      // Specific options\r\n      duration: false,\r\n      type: false,\r\n      dismissable: true\r\n    };\r\n\r\n    this.$get = function($modal, $timeout) {\r\n\r\n      function AlertFactory(config) {\r\n\r\n        var $alert = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $alert = $modal(options);\r\n\r\n        // Support scope as string options [/*title, content, */ type, dismissable]\r\n        $alert.$scope.dismissable = !!options.dismissable;\r\n        if(options.type) {\r\n          $alert.$scope.type = options.type;\r\n        }\r\n\r\n        // Support auto-close duration\r\n        var show = $alert.show;\r\n        if(options.duration) {\r\n          $alert.show = function() {\r\n            show();\r\n            $timeout(function() {\r\n              $alert.hide();\r\n            }, options.duration * 1000);\r\n          };\r\n        }\r\n\r\n        return $alert;\r\n\r\n      }\r\n\r\n      return AlertFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAlert', function($window, $sce, $alert) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content', 'type'], function(key) {\r\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\r\n            scope[key] = $sce.trustAsHtml(newValue);\r\n          });\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsAlert && scope.$watch(attr.bsAlert, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.content = newValue;\r\n          }\r\n        }, true);\r\n\r\n        // Initialize alert\r\n        var alert = $alert(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', alert.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (alert) alert.destroy();\r\n          options = null;\r\n          alert = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$aside', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade-and-slide-right',\r\n      prefixClass: 'aside',\r\n      prefixEvent: 'aside',\r\n      placement: 'right',\r\n      template: 'aside/aside.tpl.html',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = function($modal) {\r\n\r\n      function AsideFactory(config) {\r\n\r\n        var $aside = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $aside = $modal(options);\r\n\r\n        return $aside;\r\n\r\n      }\r\n\r\n      return AsideFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAside', function($window, $sce, $aside) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function(key) {\r\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\r\n            scope[key] = $sce.trustAsHtml(newValue);\r\n          });\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsAside && scope.$watch(attr.bsAside, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.content = newValue;\r\n          }\r\n        }, true);\r\n\r\n        // Initialize aside\r\n        var aside = $aside(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', aside.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (aside) aside.destroy();\r\n          options = null;\r\n          aside = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.button', [])\r\n\r\n  .provider('$button', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass:'active',\r\n      toggleEvent:'click'\r\n    };\r\n\r\n    this.$get = function() {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckboxGroup', function() {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink(element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\r\n        angular.forEach(children, function(child) {\r\n          var childEl = angular.element(child);\r\n          childEl.attr('bs-checkbox', '');\r\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckbox', function($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support label > input[type=\"checkbox\"]\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\r\n        if(constantValueRegExp.test(attr.trueValue)) {\r\n          trueValue = scope.$eval(attr.trueValue);\r\n        }\r\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\r\n        if(constantValueRegExp.test(attr.falseValue)) {\r\n          falseValue = scope.$eval(attr.falseValue);\r\n        }\r\n\r\n        // Parse exotic values\r\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\r\n        if(hasExoticValues) {\r\n          controller.$parsers.push(function(viewValue) {\r\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\r\n            return viewValue ? trueValue : falseValue;\r\n          });\r\n          // modelValue -> $formatters -> viewValue\r\n          controller.$formatters.push(function(modelValue) {\r\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n             return angular.equals(modelValue, trueValue);\r\n          });\r\n          // Fix rendering for exotic values\r\n          scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n            controller.$render();\r\n          });\r\n        }\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = angular.equals(controller.$modelValue, trueValue);\r\n          $$rAF(function() {\r\n            if(isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function() {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            if(!isInput) {\r\n              controller.$setViewValue(!activeElement.hasClass('active'));\r\n            }\r\n            if(!hasExoticValues) {\r\n              controller.$render();\r\n            }\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadioGroup', function() {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink(element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\r\n        angular.forEach(children, function(child) {\r\n          angular.element(child).attr('bs-radio', '');\r\n          angular.element(child).attr('ng-model', attr.ngModel);\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadio', function($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support `label > input[type=\"radio\"]` markup\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var value = constantValueRegExp.test(attr.value) ? scope.$eval(attr.value) : attr.value;\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = angular.equals(controller.$modelValue, value);\r\n          $$rAF(function() {\r\n            if(isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function() {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            controller.$setViewValue(value);\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.collapse', [])\r\n\r\n  .provider('$collapse', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-collapse',\r\n      disallowToggle: false,\r\n      activeClass: 'in',\r\n      startCollapsed: false\r\n    };\r\n\r\n    var controller = this.controller = function($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed'], function (key) {\r\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      self.$toggles = [];\r\n      self.$targets = [];\r\n\r\n      self.$viewChangeListeners = [];\r\n\r\n      self.$registerToggle = function(element) {\r\n        self.$toggles.push(element);\r\n      };\r\n      self.$registerTarget = function(element) {\r\n        self.$targets.push(element);\r\n      };\r\n\r\n      self.$targets.$active = !self.$options.startCollapsed ? 0 : -1;\r\n      self.$setActive = $scope.$setActive = function(value) {\r\n        if(!self.$options.disallowToggle) {\r\n          self.$targets.$active = self.$targets.$active === value ? -1 : value;\r\n        } else {\r\n          self.$targets.$active = value;\r\n        }\r\n        self.$viewChangeListeners.forEach(function(fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n    };\r\n\r\n    this.$get = function() {\r\n      var $collapse = {};\r\n      $collapse.defaults = defaults;\r\n      $collapse.controller = controller;\r\n      return $collapse;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapse', function($window, $animate, $collapse) {\r\n\r\n    var defaults = $collapse.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsCollapse'],\r\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        if(ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsCollapseCtrl.$viewChangeListeners.push(function() {\r\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$targets.$active);\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function(modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            if (bsCollapseCtrl.$targets.$active !== modelValue * 1) {\r\n              bsCollapseCtrl.$setActive(modelValue * 1);\r\n            }\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseToggle', function() {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base attr\r\n        element.attr('data-toggle', 'collapse');\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerToggle(element);\r\n        element.on('click', function() {\r\n          var index = attrs.bsCollapseToggle || bsCollapseCtrl.$toggles.indexOf(element);\r\n          bsCollapseCtrl.$setActive(index * 1);\r\n          scope.$apply();\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseTarget', function($animate) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      // scope: true,\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('collapse');\r\n\r\n        // Add animation class\r\n        if(bsCollapseCtrl.$options.animation) {\r\n          element.addClass(bsCollapseCtrl.$options.animation);\r\n        }\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerTarget(element);\r\n\r\n        function render() {\r\n          var index = bsCollapseCtrl.$targets.indexOf(element);\r\n          var active = bsCollapseCtrl.$targets.$active;\r\n          $animate[index === active ? 'addClass' : 'removeClass'](element, bsCollapseCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsCollapseCtrl.$viewChangeListeners.push(function() {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.datepicker', [\r\n  'mgcrea.ngStrap.helpers.dateParser',\r\n  'mgcrea.ngStrap.helpers.dateFormatter',\r\n  'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$datepicker', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'datepicker',\r\n      placement: 'bottom-left',\r\n      template: 'datepicker/datepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: false,\r\n      dateType: 'date',\r\n      dateFormat: 'shortDate',\r\n      modelDateFormat: null,\r\n      dayFormat: 'dd',\r\n      monthFormat: 'MMM',\r\n      yearFormat: 'yyyy',\r\n      monthTitleFormat: 'MMMM yyyy',\r\n      yearTitleFormat: 'yyyy',\r\n      strictFormat: false,\r\n      autoclose: false,\r\n      minDate: -Infinity,\r\n      maxDate: +Infinity,\r\n      startView: 0,\r\n      minView: 0,\r\n      startWeek: 0,\r\n      daysOfWeekDisabled: '',\r\n      iconLeft: 'glyphicon glyphicon-chevron-left',\r\n      iconRight: 'glyphicon glyphicon-chevron-right'\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if(!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\r\n\r\n      function DatepickerFactory(element, controller, config) {\r\n\r\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $datepicker.$options;\r\n        var scope = $datepicker.$scope;\r\n        if(options.startView) options.startView -= options.minView;\r\n\r\n        // View vars\r\n\r\n        var pickerViews = datepickerViews($datepicker);\r\n        $datepicker.$views = pickerViews.views;\r\n        var viewDate = pickerViews.viewDate;\r\n        scope.$mode = options.startView;\r\n        scope.$iconLeft = options.iconLeft;\r\n        scope.$iconRight = options.iconRight;\r\n        var $picker = $datepicker.$views[scope.$mode];\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function(date) {\r\n          $datepicker.select(date);\r\n        };\r\n        scope.$selectPane = function(value) {\r\n          $datepicker.$selectPane(value);\r\n        };\r\n        scope.$toggleMode = function() {\r\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $datepicker.update = function(date) {\r\n          // console.warn('$datepicker.update() newValue=%o', date);\r\n          if(angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $datepicker.$date = date;\r\n            $picker.update.call($picker, date);\r\n          }\r\n          // Build only if pristine\r\n          $datepicker.$build(true);\r\n        };\r\n\r\n        $datepicker.updateDisabledDates = function(dateRanges) {\r\n          options.disabledDateRanges = dateRanges;\r\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\r\n          }\r\n        };\r\n\r\n        $datepicker.select = function(date, keep) {\r\n          // console.warn('$datepicker.select', date, scope.$mode);\r\n          if(!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\r\n          if(!scope.$mode || keep) {\r\n            controller.$setViewValue(angular.copy(date));\r\n            controller.$render();\r\n            if(options.autoclose && !keep) {\r\n              $timeout(function() { $datepicker.hide(true); });\r\n            }\r\n          } else {\r\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\r\n            $datepicker.setMode(scope.$mode - 1);\r\n            $datepicker.$build();\r\n          }\r\n        };\r\n\r\n        $datepicker.setMode = function(mode) {\r\n          // console.warn('$datepicker.setMode', mode);\r\n          scope.$mode = mode;\r\n          $picker = $datepicker.$views[scope.$mode];\r\n          $datepicker.$build();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $datepicker.$build = function(pristine) {\r\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\r\n          if(pristine === true && $picker.built) return;\r\n          if(pristine === false && !$picker.built) return;\r\n          $picker.build.call($picker);\r\n        };\r\n\r\n        $datepicker.$updateSelected = function() {\r\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], updateSelected);\r\n          }\r\n        };\r\n\r\n        $datepicker.$isSelected = function(date) {\r\n          return $picker.isSelected(date);\r\n        };\r\n\r\n        $datepicker.$setDisabledEl = function(el) {\r\n          el.disabled = $picker.isDisabled(el.date);\r\n        };\r\n\r\n        $datepicker.$selectPane = function(value) {\r\n          var steps = $picker.steps;\r\n          // set targetDate to first day of month to avoid problems with\r\n          // date values rollover. This assumes the viewDate does not\r\n          // depend on the day of the month \r\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\r\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\r\n          $datepicker.$build();\r\n        };\r\n\r\n        $datepicker.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if(isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $datepicker.$onKeyDown = function(evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          if(evt.keyCode === 13) {\r\n            if(!scope.$mode) {\r\n              return $datepicker.hide(true);\r\n            } else {\r\n              return scope.$apply(function() { $datepicker.setMode(scope.$mode - 1); });\r\n            }\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          $picker.onKeyDown(evt);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function updateSelected(el) {\r\n          el.selected = $datepicker.$isSelected(el.date);\r\n        }\r\n\r\n        function focusElement() {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $datepicker.init;\r\n        $datepicker.init = function() {\r\n          if(isNative && options.useNative) {\r\n            element.prop('type', 'date');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if(isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $datepicker.destroy;\r\n        $datepicker.destroy = function() {\r\n          if(isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $datepicker.show;\r\n        $datepicker.show = function() {\r\n          _show();\r\n          // use timeout to hookup the events to prevent \r\n          // event bubbling from being processed imediately. \r\n          $timeout(function() {\r\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n            if(options.keyboard) {\r\n              element.on('keydown', $datepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $datepicker.hide;\r\n        $datepicker.hide = function(blur) {\r\n          if(!$datepicker.$isShown) return;\r\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n          if(options.keyboard) {\r\n            element.off('keydown', $datepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $datepicker;\r\n\r\n      }\r\n\r\n      DatepickerFactory.defaults = defaults;\r\n      return DatepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\r\n\r\n    var defaults = $datepicker.defaults;\r\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, controller: controller};\r\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'autoclose', 'dateType', 'dateFormat', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!datepicker || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\r\n          newValue === true ? datepicker.show() : datepicker.hide();\r\n        });\r\n\r\n        // Initialize datepicker\r\n        var datepicker = $datepicker(element, controller, options);\r\n        options = datepicker.$options;\r\n        // Set expected iOS format\r\n        if(isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function(date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n    \r\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function(key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\r\n            // console.warn('attr.$observe(%s)=%o', key, newValue);\r\n            datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\r\n            // Build only if dirty\r\n            !isNaN(datepicker.$options[key]) && datepicker.$build(false);\r\n            validateAgainstMinMaxDate(controller.$dateValue);\r\n          });\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          datepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        // Normalize undefined/null/empty array,\r\n        // so that we don't treat changing from undefined->null as a change.\r\n        function normalizeDateRanges(ranges) {\r\n          if (!ranges || !ranges.length) return null;\r\n          return ranges;\r\n        }\r\n\r\n        if (angular.isDefined(attr.disabledDates)) {\r\n          scope.$watch(attr.disabledDates, function(disabledRanges, previousValue) {\r\n            disabledRanges = normalizeDateRanges(disabledRanges);\r\n            previousValue = normalizeDateRanges(previousValue);\r\n\r\n            if (disabledRanges) {\r\n              datepicker.updateDisabledDates(disabledRanges);\r\n            }\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate(parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\r\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if(isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function(viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          // Null values should correctly reset the model value & validity\r\n          if(!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3 \r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if(!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to \r\n            // invalidate model value \r\n            return;\r\n          } else {\r\n            validateAgainstMinMaxDate(parsedDate);\r\n          }\r\n          if(options.dateType === 'string') {\r\n            return formatDate(parsedDate, options.modelDateFormat || options.dateFormat);\r\n          } else if(options.dateType === 'number') {\r\n            return controller.$dateValue.getTime();\r\n          } else if(options.dateType === 'iso') {\r\n            return controller.$dateValue.toISOString();\r\n          } else {\r\n            return new Date(controller.$dateValue);\r\n          }\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function(modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if(angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if(angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if(options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          controller.$dateValue = date;\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function() {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getDateFormattedString());\r\n        };\r\n\r\n        function getDateFormattedString() {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if(datepicker) datepicker.destroy();\r\n          options = null;\r\n          datepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .provider('datepickerViews', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      dayFormat: 'dd',\r\n      daySplit: 7\r\n    };\r\n\r\n    // Split array into smaller arrays\r\n    function split(arr, size) {\r\n      var arrays = [];\r\n      while(arr.length > 0) {\r\n        arrays.push(arr.splice(0, size));\r\n      }\r\n      return arrays;\r\n    }\r\n\r\n    // Modulus operator\r\n    function mod(n, m) {\r\n      return ((n % m) + m) % m;\r\n    }\r\n\r\n    this.$get = function($dateFormatter, $dateParser, $sce) {\r\n\r\n      return function(picker) {\r\n\r\n        var scope = picker.$scope;\r\n        var options = picker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function(date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\r\n\r\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\r\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\r\n\r\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\r\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\r\n        var timezoneOffset = startDate.getTimezoneOffset() * 6e4;\r\n\r\n        var views = [{\r\n            format: options.dayFormat,\r\n            split: 7,\r\n            steps: { month: 1 },\r\n            update: function(date, force) {\r\n              if(!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$build();\r\n              } else if(date.getDate() !== viewDate.date) {\r\n                viewDate.date = picker.$date.getDate();\r\n                picker.$updateSelected();\r\n              }\r\n            },\r\n            build: function() {\r\n              var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1), firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\r\n              var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5), firstDateOffset = firstDate.getTimezoneOffset();\r\n              var today = new Date().toDateString();\r\n              // Handle daylight time switch\r\n              if(firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\r\n              var days = [], day;\r\n              for(var i = 0; i < 42; i++) { // < 7 * 6\r\n                day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\r\n                days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\r\n              }\r\n              scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\r\n              scope.showLabels = true;\r\n              scope.labels = weekDaysLabelsHtml;\r\n              scope.rows = split(days, this.split);\r\n              this.built = true;\r\n            },\r\n            isSelected: function(date) {\r\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\r\n            },\r\n            isDisabled: function(date) {\r\n              var time = date.getTime();\r\n\r\n              // Disabled because of min/max date.\r\n              if (time < options.minDate || time > options.maxDate) return true;\r\n\r\n              // Disabled due to being a disabled day of the week\r\n              if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\r\n\r\n              // Disabled because of disabled date range.\r\n              if (options.disabledDateRanges) {\r\n                for (var i = 0; i < options.disabledDateRanges.length; i++) {\r\n                  if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\r\n                    return true;\r\n                  }\r\n                }\r\n              }\r\n\r\n              return false;\r\n            },\r\n            onKeyDown: function(evt) {\r\n              if (!picker.$date) {\r\n                return;\r\n              }\r\n              var actualTime = picker.$date.getTime();\r\n              var newDate;\r\n\r\n              if(evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\r\n              else if(evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\r\n              else if(evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\r\n              else if(evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\r\n\r\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n            }\r\n          }, {\r\n            name: 'month',\r\n            format: options.monthFormat,\r\n            split: 4,\r\n            steps: { year: 1 },\r\n            update: function(date, force) {\r\n              if(!this.built || date.getFullYear() !== viewDate.year) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$build();\r\n              } else if(date.getMonth() !== viewDate.month) {\r\n                angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$updateSelected();\r\n              }\r\n            },\r\n            build: function() {\r\n              var firstMonth = new Date(viewDate.year, 0, 1);\r\n              var months = [], month;\r\n              for (var i = 0; i < 12; i++) {\r\n                month = new Date(viewDate.year, i, 1);\r\n                months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\r\n              }\r\n              scope.title = formatDate(month, options.yearTitleFormat);\r\n              scope.showLabels = false;\r\n              scope.rows = split(months, this.split);\r\n              this.built = true;\r\n            },\r\n            isSelected: function(date) {\r\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\r\n            },\r\n            isDisabled: function(date) {\r\n              var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n            },\r\n            onKeyDown: function(evt) {\r\n              if (!picker.$date) {\r\n                return;\r\n              }\r\n              var actualMonth = picker.$date.getMonth();\r\n              var newDate = new Date(picker.$date);\r\n\r\n              if(evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\r\n              else if(evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\r\n              else if(evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\r\n              else if(evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\r\n\r\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n            }\r\n          }, {\r\n            name: 'year',\r\n            format: options.yearFormat,\r\n            split: 4,\r\n            steps: { year: 12 },\r\n            update: function(date, force) {\r\n              if(!this.built || force || parseInt(date.getFullYear()/20, 10) !== parseInt(viewDate.year/20, 10)) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$build();\r\n              } else if(date.getFullYear() !== viewDate.year) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$updateSelected();\r\n              }\r\n            },\r\n            build: function() {\r\n              var firstYear = viewDate.year - viewDate.year % (this.split * 3);\r\n              var years = [], year;\r\n              for (var i = 0; i < 12; i++) {\r\n                year = new Date(firstYear + i, 0, 1);\r\n                years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\r\n              }\r\n              scope.title = years[0].label + '-' + years[years.length - 1].label;\r\n              scope.showLabels = false;\r\n              scope.rows = split(years, this.split);\r\n              this.built = true;\r\n            },\r\n            isSelected: function(date) {\r\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear();\r\n            },\r\n            isDisabled: function(date) {\r\n              var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\r\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n            },\r\n            onKeyDown: function(evt) {\r\n              if (!picker.$date) {\r\n                return;\r\n              }\r\n              var actualYear = picker.$date.getFullYear(),\r\n                  newDate = new Date(picker.$date);\r\n\r\n              if(evt.keyCode === 37) newDate.setYear(actualYear - 1);\r\n              else if(evt.keyCode === 38) newDate.setYear(actualYear - 4);\r\n              else if(evt.keyCode === 39) newDate.setYear(actualYear + 1);\r\n              else if(evt.keyCode === 40) newDate.setYear(actualYear + 4);\r\n\r\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n            }\r\n          }];\r\n\r\n        return {\r\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\r\n          viewDate: viewDate\r\n        };\r\n\r\n      };\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$dropdown', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'dropdown',\r\n      placement: 'bottom-left',\r\n      template: 'dropdown/dropdown.tpl.html',\r\n      trigger: 'click',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0\r\n    };\r\n\r\n    this.$get = function($window, $rootScope, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\r\n\r\n      function DropdownFactory(element, config) {\r\n\r\n        var $dropdown = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var scope = $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        $dropdown = $tooltip(element, options);\r\n        var parentEl = element.parent();\r\n\r\n        // Protected methods\r\n\r\n        $dropdown.$onKeyDown = function(evt) {\r\n          if (!/(38|40)/.test(evt.keyCode)) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Retrieve focused index\r\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n          if(!items.length) return;\r\n          var index;\r\n          angular.forEach(items, function(el, i) {\r\n            if(matchesSelector && matchesSelector.call(el, ':focus')) index = i;\r\n          });\r\n\r\n          // Navigate with keyboard\r\n          if(evt.keyCode === 38 && index > 0) index--;\r\n          else if(evt.keyCode === 40 && index < items.length - 1) index++;\r\n          else if(angular.isUndefined(index)) index = 0;\r\n          items.eq(index)[0].focus();\r\n\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $dropdown.show;\r\n        $dropdown.show = function() {\r\n          show();\r\n          // use timeout to hookup the events to prevent \r\n          // event bubbling from being processed imediately. \r\n          $timeout(function() {\r\n            options.keyboard && $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\r\n            bodyEl.on('click', onBodyClick);\r\n          }, 0, false);\r\n          parentEl.hasClass('dropdown') && parentEl.addClass('open');\r\n        };\r\n\r\n        var hide = $dropdown.hide;\r\n        $dropdown.hide = function() {\r\n          if(!$dropdown.$isShown) return;\r\n          options.keyboard && $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\r\n          bodyEl.off('click', onBodyClick);\r\n          parentEl.hasClass('dropdown') && parentEl.removeClass('open');\r\n          hide();\r\n        };\r\n\r\n        var destroy = $dropdown.destroy;\r\n        $dropdown.destroy = function() {\r\n          bodyEl.off('click', onBodyClick);\r\n          destroy();\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function onBodyClick(evt) {\r\n          if(evt.target === element[0]) return;\r\n          return evt.target !== element[0] && $dropdown.hide();\r\n        }\r\n\r\n        return $dropdown;\r\n\r\n      }\r\n\r\n      return DropdownFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDropdown', function($window, $sce, $dropdown) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsDropdown && scope.$watch(attr.bsDropdown, function(newValue, oldValue) {\r\n          scope.content = newValue;\r\n        }, true);\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!dropdown || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\r\n          newValue === true ? dropdown.show() : dropdown.hide();\r\n        });\r\n\r\n        // Initialize dropdown\r\n        var dropdown = $dropdown(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (dropdown) dropdown.destroy();\r\n          options = null;\r\n          dropdown = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\r\n\r\n  .service('$dateFormatter', function($locale, dateFilter) {\r\n\r\n    // The unused `lang` arguments are on purpose. The default implementation does not\r\n    // use them and it always uses the locale loaded into the `$locale` service.\r\n    // Custom implementations might use it, thus allowing different directives to\r\n    // have different languages.\r\n\r\n    this.getDefaultLocale = function() {\r\n      return $locale.id;\r\n    };\r\n\r\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\r\n    // Return either the corresponding date format or the given date format.\r\n    this.getDatetimeFormat = function(format, lang) {\r\n      return $locale.DATETIME_FORMATS[format] || format;\r\n    };\r\n\r\n    this.weekdaysShort = function(lang) {\r\n      return $locale.DATETIME_FORMATS.SHORTDAY;\r\n    };\r\n\r\n    function splitTimeFormat(format) {\r\n      return /(h+)([:\\.])?(m+)[ ]?(a?)/i.exec(format).slice(1);\r\n    }\r\n\r\n    // h:mm a => h\r\n    this.hoursFormat = function(timeFormat) {\r\n      return splitTimeFormat(timeFormat)[0];\r\n    };\r\n\r\n    // h:mm a => mm\r\n    this.minutesFormat = function(timeFormat) {\r\n      return splitTimeFormat(timeFormat)[2];\r\n    };\r\n\r\n    // h:mm a => :\r\n    this.timeSeparator = function(timeFormat) {\r\n      return splitTimeFormat(timeFormat)[1];\r\n    };\r\n\r\n    // h:mm a => true, H.mm => false\r\n    this.showAM = function(timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[3];\r\n    };\r\n\r\n    this.formatDate = function(date, format, lang){\r\n      return dateFilter(date, format);\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\r\n\r\n.provider('$dateParser', function($localeProvider) {\r\n\r\n  // define a custom ParseDate object to use instead of native Date\r\n  // to avoid date values wrapping when setting date component values\r\n  function ParseDate() {\r\n    this.year = 1970;\r\n    this.month = 0;\r\n    this.day = 1;\r\n    this.hours = 0;\r\n    this.minutes = 0;\r\n    this.seconds = 0;\r\n    this.milliseconds = 0;\r\n  }\r\n\r\n  ParseDate.prototype.setMilliseconds = function(value) { this.milliseconds = value; };\r\n  ParseDate.prototype.setSeconds = function(value) { this.seconds = value; };\r\n  ParseDate.prototype.setMinutes = function(value) { this.minutes = value; };\r\n  ParseDate.prototype.setHours = function(value) { this.hours = value; };\r\n  ParseDate.prototype.getHours = function() { return this.hours; };\r\n  ParseDate.prototype.setDate = function(value) { this.day = value; };\r\n  ParseDate.prototype.setMonth = function(value) { this.month = value; };\r\n  ParseDate.prototype.setFullYear = function(value) { this.year = value; };\r\n  ParseDate.prototype.fromDate = function(value) {\r\n    this.year = value.getFullYear();\r\n    this.month = value.getMonth();\r\n    this.day = value.getDate();\r\n    this.hours = value.getHours();\r\n    this.minutes = value.getMinutes();\r\n    this.seconds = value.getSeconds();\r\n    this.milliseconds = value.getMilliseconds();\r\n    return this;\r\n  };\r\n\r\n  ParseDate.prototype.toDate = function() {\r\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\r\n  };\r\n\r\n  var proto = ParseDate.prototype;\r\n\r\n  function noop() {\r\n  }\r\n\r\n  function isNumeric(n) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n  }\r\n\r\n  function indexOfCaseInsensitive(array, value) {\r\n    var len = array.length, str=value.toString().toLowerCase();\r\n    for (var i=0; i<len; i++) {\r\n      if (array[i].toLowerCase() === str) { return i; }\r\n    }\r\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\r\n  }\r\n\r\n  var defaults = this.defaults = {\r\n    format: 'shortDate',\r\n    strict: false\r\n  };\r\n\r\n  this.$get = function($locale, dateFilter) {\r\n\r\n    var DateParserFactory = function(config) {\r\n\r\n      var options = angular.extend({}, defaults, config);\r\n\r\n      var $dateParser = {};\r\n\r\n      var regExpMap = {\r\n        'sss'   : '[0-9]{3}',\r\n        'ss'    : '[0-5][0-9]',\r\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'mm'    : '[0-5][0-9]',\r\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'HH'    : '[01][0-9]|2[0-3]',\r\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\r\n        'hh'    : '[0][1-9]|[1][012]',\r\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'a'     : 'AM|PM',\r\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\r\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\r\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\r\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\r\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\r\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\r\n        'MM'    : '0[1-9]|1[012]',\r\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\r\n        'yy'    : '[0-9]{2}',\r\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}',\r\n      };\r\n\r\n      var setFnMap = {\r\n        'sss'   : proto.setMilliseconds,\r\n        'ss'    : proto.setSeconds,\r\n        's'     : proto.setSeconds,\r\n        'mm'    : proto.setMinutes,\r\n        'm'     : proto.setMinutes,\r\n        'HH'    : proto.setHours,\r\n        'H'     : proto.setHours,\r\n        'hh'    : proto.setHours,\r\n        'h'     : proto.setHours,\r\n        'EEEE'  : noop,\r\n        'EEE'   : noop,\r\n        'dd'    : proto.setDate,\r\n        'd'     : proto.setDate,\r\n        'a'     : function(value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\r\n        'MMMM'  : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\r\n        'MMM'   : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\r\n        'MM'    : function(value) { return this.setMonth(1 * value - 1); },\r\n        'M'     : function(value) { return this.setMonth(1 * value - 1); },\r\n        'yyyy'  : proto.setFullYear,\r\n        'yy'    : function(value) { return this.setFullYear(2000 + 1 * value); },\r\n        'y'     : proto.setFullYear\r\n      };\r\n\r\n      var regex, setMap;\r\n\r\n      $dateParser.init = function() {\r\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\r\n        regex = regExpForFormat($dateParser.$format);\r\n        setMap = setMapForFormat($dateParser.$format);\r\n      };\r\n\r\n      $dateParser.isValid = function(date) {\r\n        if(angular.isDate(date)) return !isNaN(date.getTime());\r\n        return regex.test(date);\r\n      };\r\n\r\n      $dateParser.parse = function(value, baseDate, format) {\r\n        // check for date format special names\r\n        if(format) format = $locale.DATETIME_FORMATS[format] || format;\r\n        if(angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format);\r\n        var formatRegex = format ? regExpForFormat(format) : regex;\r\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\r\n        var matches = formatRegex.exec(value);\r\n        if(!matches) return false;\r\n        // use custom ParseDate object to set parsed values\r\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\r\n        for(var i = 0; i < matches.length - 1; i++) {\r\n          formatSetMap[i] && formatSetMap[i].call(date, matches[i+1]);\r\n        }\r\n        // convert back to native Date object\r\n        var newDate = date.toDate();\r\n\r\n        // check new native Date object for day values overflow\r\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\r\n          return false;\r\n        }\r\n\r\n        return newDate;\r\n      };\r\n\r\n      $dateParser.getDateForAttribute = function(key, value) {\r\n        var date;\r\n\r\n        if(value === 'today') {\r\n          var today = new Date();\r\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\r\n        } else if(angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\r\n          date = new Date(value.substr(1, value.length - 2));\r\n        } else if(isNumeric(value)) {\r\n          date = new Date(parseInt(value, 10));\r\n        } else if (angular.isString(value) && 0 === value.length) { // Reset date\r\n          date = key === 'minDate' ? -Infinity : +Infinity;\r\n        } else {\r\n          date = new Date(value);\r\n        }\r\n\r\n        return date;\r\n      };\r\n\r\n      $dateParser.getTimeForAttribute = function(key, value) {\r\n        var time;\r\n\r\n        if(value === 'now') {\r\n          time = new Date().setFullYear(1970, 0, 1);\r\n        } else if(angular.isString(value) && value.match(/^\".+\"$/)) {\r\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\r\n        } else if(isNumeric(value)) {\r\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && 0 === value.length) { // Reset time\r\n          time = key === 'minTime' ? -Infinity : +Infinity;\r\n        } else {\r\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\r\n        }\r\n\r\n        return time;\r\n      };\r\n\r\n      /* Handle switch to/from daylight saving.\r\n      * Hours may be non-zero on daylight saving cut-over:\r\n      * > 12 when midnight changeover, but then cannot generate\r\n      * midnight datetime, so jump to 1AM, otherwise reset.\r\n      * @param  date  (Date) the date to check\r\n      * @return  (Date) the corrected date\r\n      *\r\n      * __ copied from jquery ui datepicker __\r\n      */\r\n      $dateParser.daylightSavingAdjust = function(date) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\r\n        return date;\r\n      };\r\n\r\n      // Private functions\r\n\r\n      function setMapForFormat(format) {\r\n        var keys = Object.keys(setFnMap), i;\r\n        var map = [], sortedMap = [];\r\n        // Map to setFn\r\n        var clonedFormat = format;\r\n        for(i = 0; i < keys.length; i++) {\r\n          if(format.split(keys[i]).length > 1) {\r\n            var index = clonedFormat.search(keys[i]);\r\n            format = format.split(keys[i]).join('');\r\n            if(setFnMap[keys[i]]) {\r\n              map[index] = setFnMap[keys[i]];\r\n            }\r\n          }\r\n        }\r\n        // Sort result map\r\n        angular.forEach(map, function(v) {\r\n          // conditional required since angular.forEach broke around v1.2.21\r\n          // related pr: https://github.com/angular/angular.js/pull/8525\r\n          if(v) sortedMap.push(v);\r\n        });\r\n        return sortedMap;\r\n      }\r\n\r\n      function escapeReservedSymbols(text) {\r\n        return text.replace(/\\//g, '[\\\\/]').replace('/-/g', '[-]').replace(/\\./g, '[.]').replace(/\\\\s/g, '[\\\\s]');\r\n      }\r\n\r\n      function regExpForFormat(format) {\r\n        var keys = Object.keys(regExpMap), i;\r\n\r\n        var re = format;\r\n        // Abstract replaces to avoid collisions\r\n        for(i = 0; i < keys.length; i++) {\r\n          re = re.split(keys[i]).join('${' + i + '}');\r\n        }\r\n        // Replace abstracted values\r\n        for(i = 0; i < keys.length; i++) {\r\n          re = re.split('${' + i + '}').join('(' + regExpMap[keys[i]] + ')');\r\n        }\r\n        format = escapeReservedSymbols(format);\r\n\r\n        return new RegExp('^' + re + '$', ['i']);\r\n      }\r\n\r\n      $dateParser.init();\r\n      return $dateParser;\r\n\r\n    };\r\n\r\n    return DateParserFactory;\r\n\r\n  };\r\n\r\n});\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\r\n.factory('debounce', function($timeout) {\r\n  return function(func, wait, immediate) {\r\n    var timeout = null;\r\n    return function() {\r\n      var context = this,\r\n        args = arguments,\r\n        callNow = immediate && !timeout;\r\n      if(timeout) {\r\n        $timeout.cancel(timeout);\r\n      }\r\n      timeout = $timeout(function later() {\r\n        timeout = null;\r\n        if(!immediate) {\r\n          func.apply(context, args);\r\n        }\r\n      }, wait, false);\r\n      if(callNow) {\r\n        func.apply(context, args);\r\n      }\r\n      return timeout;\r\n    };\r\n  };\r\n})\r\n\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\r\n.factory('throttle', function($timeout) {\r\n  return function(func, wait, options) {\r\n    var timeout = null;\r\n    options || (options = {});\r\n    return function() {\r\n      var context = this,\r\n        args = arguments;\r\n      if(!timeout) {\r\n        if(options.leading !== false) {\r\n          func.apply(context, args);\r\n        }\r\n        timeout = $timeout(function later() {\r\n          timeout = null;\r\n          if(options.trailing !== false) {\r\n            func.apply(context, args);\r\n          }\r\n        }, wait, false);\r\n      }\r\n    };\r\n  };\r\n});\r\n\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\r\n\r\n  .factory('dimensions', function($document, $window) {\r\n\r\n    var jqLite = angular.element;\r\n    var fn = {};\r\n\r\n    /**\r\n     * Test the element nodeName\r\n     * @param element\r\n     * @param name\r\n     */\r\n    var nodeName = fn.nodeName = function(element, name) {\r\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\r\n    };\r\n\r\n    /**\r\n     * Returns the element computed style\r\n     * @param element\r\n     * @param prop\r\n     * @param extra\r\n     */\r\n    fn.css = function(element, prop, extra) {\r\n      var value;\r\n      if (element.currentStyle) { //IE\r\n        value = element.currentStyle[prop];\r\n      } else if (window.getComputedStyle) {\r\n        value = window.getComputedStyle(element)[prop];\r\n      } else {\r\n        value = element.style[prop];\r\n      }\r\n      return extra === true ? parseFloat(value) || 0 : value;\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.offset = function(element) {\r\n      var boxRect = element.getBoundingClientRect();\r\n      var docElement = element.ownerDocument;\r\n      return {\r\n        width: boxRect.width || element.offsetWidth,\r\n        height: boxRect.height || element.offsetHeight,\r\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\r\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\r\n      };\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's position function\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.position = function(element) {\r\n\r\n      var offsetParentRect = {top: 0, left: 0},\r\n          offsetParentElement,\r\n          offset;\r\n\r\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\r\n      if (fn.css(element, 'position') === 'fixed') {\r\n\r\n        // We assume that getBoundingClientRect is available when computed position is fixed\r\n        offset = element.getBoundingClientRect();\r\n\r\n      } else {\r\n\r\n        // Get *real* offsetParentElement\r\n        offsetParentElement = offsetParent(element);\r\n\r\n        // Get correct offsets\r\n        offset = fn.offset(element);\r\n        if (!nodeName(offsetParentElement, 'html')) {\r\n          offsetParentRect = fn.offset(offsetParentElement);\r\n        }\r\n\r\n        // Add offsetParent borders\r\n        offsetParentRect.top += fn.css(offsetParentElement, 'borderTopWidth', true);\r\n        offsetParentRect.left += fn.css(offsetParentElement, 'borderLeftWidth', true);\r\n      }\r\n\r\n      // Subtract parent offsets and element margins\r\n      return {\r\n        width: element.offsetWidth,\r\n        height: element.offsetHeight,\r\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\r\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\r\n      };\r\n\r\n    };\r\n\r\n    /**\r\n     * Returns the closest, non-statically positioned offsetParent of a given element\r\n     * @required-by fn.position\r\n     * @param element\r\n     */\r\n    var offsetParent = function offsetParentElement(element) {\r\n      var docElement = element.ownerDocument;\r\n      var offsetParent = element.offsetParent || docElement;\r\n      if(nodeName(offsetParent, '#document')) return docElement.documentElement;\r\n      while(offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\r\n        offsetParent = offsetParent.offsetParent;\r\n      }\r\n      return offsetParent || docElement.documentElement;\r\n    };\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's height function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/height/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.height = function(element, outer) {\r\n      var value = element.offsetHeight;\r\n      if(outer) {\r\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's width function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/width/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.width = function(element, outer) {\r\n      var value = element.offsetWidth;\r\n      if(outer) {\r\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    return fn;\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\r\n\r\n  .provider('$parseOptions', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\r\n    };\r\n\r\n    this.$get = function($parse, $q) {\r\n\r\n      function ParseOptionsFactory(attr, config) {\r\n\r\n        var $parseOptions = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        $parseOptions.$values = [];\r\n\r\n        // Private vars\r\n        var match, displayFn, valueName, keyName, groupByFn, valueFn, valuesFn;\r\n\r\n        $parseOptions.init = function() {\r\n          $parseOptions.$match = match = attr.match(options.regexp);\r\n          displayFn = $parse(match[2] || match[1]),\r\n          valueName = match[4] || match[6],\r\n          keyName = match[5],\r\n          groupByFn = $parse(match[3] || ''),\r\n          valueFn = $parse(match[2] ? match[1] : valueName),\r\n          valuesFn = $parse(match[7]);\r\n        };\r\n\r\n        $parseOptions.valuesFn = function(scope, controller) {\r\n          return $q.when(valuesFn(scope, controller))\r\n          .then(function(values) {\r\n            $parseOptions.$values = values ? parseValues(values, scope) : {};\r\n            return $parseOptions.$values;\r\n          });\r\n        };\r\n\r\n        $parseOptions.displayValue = function(modelValue) {\r\n          var scope = {};\r\n          scope[valueName] = modelValue;\r\n          return displayFn(scope);\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function parseValues(values, scope) {\r\n          return values.map(function(match, index) {\r\n            var locals = {}, label, value;\r\n            locals[valueName] = match;\r\n            label = displayFn(scope, locals);\r\n            value = valueFn(scope, locals);\r\n            return {label: label, value: value, index: index};\r\n          });\r\n        }\r\n\r\n        $parseOptions.init();\r\n        return $parseOptions;\r\n\r\n      }\r\n\r\n      return ParseOptionsFactory;\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\n(angular.version.minor < 3 && angular.version.dot < 14) && angular.module('ng')\r\n\r\n.factory('$$rAF', function($window, $timeout) {\r\n\r\n  var requestAnimationFrame = $window.requestAnimationFrame ||\r\n                              $window.webkitRequestAnimationFrame ||\r\n                              $window.mozRequestAnimationFrame;\r\n\r\n  var cancelAnimationFrame = $window.cancelAnimationFrame ||\r\n                             $window.webkitCancelAnimationFrame ||\r\n                             $window.mozCancelAnimationFrame ||\r\n                             $window.webkitCancelRequestAnimationFrame;\r\n\r\n  var rafSupported = !!requestAnimationFrame;\r\n  var raf = rafSupported ?\r\n    function(fn) {\r\n      var id = requestAnimationFrame(fn);\r\n      return function() {\r\n        cancelAnimationFrame(id);\r\n      };\r\n    } :\r\n    function(fn) {\r\n      var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\r\n      return function() {\r\n        $timeout.cancel(timer);\r\n      };\r\n    };\r\n\r\n  raf.supported = rafSupported;\r\n\r\n  return raf;\r\n\r\n});\r\n\r\n// .factory('$$animateReflow', function($$rAF, $document) {\r\n\r\n//   var bodyEl = $document[0].body;\r\n\r\n//   return function(fn) {\r\n//     //the returned function acts as the cancellation function\r\n//     return $$rAF(function() {\r\n//       //the line below will force the browser to perform a repaint\r\n//       //so that all the animated elements within the animation frame\r\n//       //will be properly updated and drawn on screen. This is\r\n//       //required to perform multi-class CSS based animations with\r\n//       //Firefox. DO NOT REMOVE THIS LINE.\r\n//       var a = bodyEl.offsetWidth + 1;\r\n//       fn();\r\n//     });\r\n//   };\r\n\r\n// });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$modal', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      backdropAnimation: 'am-fade',\r\n      prefixClass: 'modal',\r\n      prefixEvent: 'modal',\r\n      placement: 'top',\r\n      template: 'modal/modal.tpl.html',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = function($window, $rootScope, $compile, $q, $templateCache, $http, $animate, $timeout, $sce, dimensions) {\r\n\r\n      var forEach = angular.forEach;\r\n      var trim = String.prototype.trim;\r\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n      var bodyElement = angular.element($window.document.body);\r\n      var htmlReplaceRegExp = /ng-bind=\"/ig;\r\n\r\n      function ModalFactory(config) {\r\n\r\n        var $modal = {};\r\n\r\n        // Common vars\r\n        var options = $modal.$options = angular.extend({}, defaults, config);\r\n        $modal.$promise = fetchTemplate(options.template);\r\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n        if(!options.element && !options.container) {\r\n          options.container = 'body';\r\n        }\r\n\r\n        // Support scope as string options\r\n        forEach(['title', 'content'], function(key) {\r\n          if(options[key]) scope[key] = $sce.trustAsHtml(options[key]);\r\n        });\r\n\r\n        // Provide scope helpers\r\n        scope.$hide = function() {\r\n          scope.$$postDigest(function() {\r\n            $modal.hide();\r\n          });\r\n        };\r\n        scope.$show = function() {\r\n          scope.$$postDigest(function() {\r\n            $modal.show();\r\n          });\r\n        };\r\n        scope.$toggle = function() {\r\n          scope.$$postDigest(function() {\r\n            $modal.toggle();\r\n          });\r\n        };\r\n\r\n        // Support contentTemplate option\r\n        if(options.contentTemplate) {\r\n          $modal.$promise = $modal.$promise.then(function(template) {\r\n            var templateEl = angular.element(template);\r\n            return fetchTemplate(options.contentTemplate)\r\n            .then(function(contentTemplate) {\r\n              var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0]).removeAttr('ng-bind').html(contentTemplate);\r\n              // Drop the default footer as you probably don't want it if you use a custom contentTemplate\r\n              if(!config.template) contentEl.next().remove();\r\n              return templateEl[0].outerHTML;\r\n            });\r\n          });\r\n        }\r\n\r\n        // Fetch, compile then initialize modal\r\n        var modalLinker, modalElement;\r\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\r\n        $modal.$promise.then(function(template) {\r\n          if(angular.isObject(template)) template = template.data;\r\n          if(options.html) template = template.replace(htmlReplaceRegExp, 'ng-bind-html=\"');\r\n          template = trim.apply(template);\r\n          modalLinker = $compile(template);\r\n          $modal.init();\r\n        });\r\n\r\n        $modal.init = function() {\r\n\r\n          // Options: show\r\n          if(options.show) {\r\n            scope.$$postDigest(function() {\r\n              $modal.show();\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $modal.destroy = function() {\r\n\r\n          // Remove element\r\n          if(modalElement) {\r\n            modalElement.remove();\r\n            modalElement = null;\r\n          }\r\n          if(backdropElement) {\r\n            backdropElement.remove();\r\n            backdropElement = null;\r\n          }\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n\r\n        };\r\n\r\n        $modal.show = function() {\r\n          if(scope.$isShown) return;\r\n\r\n          if(scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n          var parent, after;\r\n          if(angular.isElement(options.container)) {\r\n            parent = options.container;\r\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\r\n          } else {\r\n            if (options.container) {\r\n              parent = findElement(options.container);\r\n              after = parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\r\n            } else {\r\n              parent = null;\r\n              after = options.element;\r\n            }\r\n          }\r\n\r\n          // Fetch a cloned element linked from template\r\n          modalElement = $modal.$element = modalLinker(scope, function(clonedElement, scope) {});\r\n\r\n          // Set the initial positioning.\r\n          modalElement.css({display: 'block'}).addClass(options.placement);\r\n\r\n          // Options: animation\r\n          if(options.animation) {\r\n            if(options.backdrop) {\r\n              backdropElement.addClass(options.backdropAnimation);\r\n            }\r\n            modalElement.addClass(options.animation);\r\n          }\r\n\r\n          if(options.backdrop) {\r\n            $animate.enter(backdropElement, bodyElement, null);\r\n          }\r\n          // Support v1.3+ $animate\r\n          // https://github.com/angular/angular.js/commit/bf0f5502b1bbfddc5cdd2f138efd9188b8c652a9\r\n          var promise = $animate.enter(modalElement, parent, after, enterAnimateCallback);\r\n          if(promise && promise.then) promise.then(enterAnimateCallback);\r\n\r\n          $modal.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n          // Focus once the enter-animation has started\r\n          // Weird PhantomJS bug hack\r\n          var el = modalElement[0];\r\n          requestAnimationFrame(function() {\r\n            el.focus();\r\n          });\r\n\r\n          bodyElement.addClass(options.prefixClass + '-open');\r\n          if(options.animation) {\r\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n\r\n          // Bind events\r\n          if(options.backdrop) {\r\n            modalElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('wheel', preventEventDefault);\r\n          }\r\n          if(options.keyboard) {\r\n            modalElement.on('keyup', $modal.$onKeyUp);\r\n          }\r\n        };\r\n\r\n        function enterAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.show', $modal);\r\n        }\r\n\r\n        $modal.hide = function() {\r\n          if(!scope.$isShown) return;\r\n\r\n          if(scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n          var promise = $animate.leave(modalElement, leaveAnimateCallback);\r\n          // Support v1.3+ $animate\r\n          // https://github.com/angular/angular.js/commit/bf0f5502b1bbfddc5cdd2f138efd9188b8c652a9\r\n          if(promise && promise.then) promise.then(leaveAnimateCallback);\r\n\r\n          if(options.backdrop) {\r\n            $animate.leave(backdropElement);\r\n          }\r\n          $modal.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          if(options.backdrop) {\r\n            modalElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('wheel', preventEventDefault);\r\n          }\r\n          if(options.keyboard) {\r\n            modalElement.off('keyup', $modal.$onKeyUp);\r\n          }\r\n        };\r\n\r\n        function leaveAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.hide', $modal);\r\n          bodyElement.removeClass(options.prefixClass + '-open');\r\n          if(options.animation) {\r\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n        }\r\n\r\n        $modal.toggle = function() {\r\n\r\n          scope.$isShown ? $modal.hide() : $modal.show();\r\n\r\n        };\r\n\r\n        $modal.focus = function() {\r\n          modalElement[0].focus();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $modal.$onKeyUp = function(evt) {\r\n\r\n          if (evt.which === 27 && scope.$isShown) {\r\n            $modal.hide();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function hideOnBackdropClick(evt) {\r\n          if(evt.target !== evt.currentTarget) return;\r\n          options.backdrop === 'static' ? $modal.focus() : $modal.hide();\r\n        }\r\n\r\n        function preventEventDefault(evt) {\r\n          evt.preventDefault();\r\n        }\r\n\r\n        return $modal;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest(scope) {\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n      }\r\n\r\n      function findElement(query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      var fetchPromises = {};\r\n      function fetchTemplate(template) {\r\n        if(fetchPromises[template]) return fetchPromises[template];\r\n        return (fetchPromises[template] = $q.when($templateCache.get(template) || $http.get(template))\r\n        .then(function(res) {\r\n          if(angular.isObject(res)) {\r\n            $templateCache.put(template, res.data);\r\n            return res.data;\r\n          }\r\n          return res;\r\n        }));\r\n      }\r\n\r\n      return ModalFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsModal', function($window, $sce, $modal) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function(key) {\r\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\r\n            scope[key] = $sce.trustAsHtml(newValue);\r\n          });\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsModal && scope.$watch(attr.bsModal, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.content = newValue;\r\n          }\r\n        }, true);\r\n\r\n        // Initialize modal\r\n        var modal = $modal(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', modal.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (modal) modal.destroy();\r\n          options = null;\r\n          modal = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.navbar', [])\r\n\r\n  .provider('$navbar', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      routeAttr: 'data-match-route',\r\n      strict: false\r\n    };\r\n\r\n    this.$get = function() {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsNavbar', function($window, $location, $navbar) {\r\n\r\n    var defaults = $navbar.defaults;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = angular.copy(defaults);\r\n        angular.forEach(Object.keys(defaults), function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Watch for the $location\r\n        scope.$watch(function() {\r\n\r\n          return $location.path();\r\n\r\n        }, function(newValue, oldValue) {\r\n\r\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\r\n\r\n          angular.forEach(liElements, function(li) {\r\n\r\n            var liElement = angular.element(li);\r\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\r\n            if(options.strict) {\r\n              pattern = '^' + pattern + '$';\r\n            }\r\n            var regexp = new RegExp(pattern, ['i']);\r\n\r\n            if(regexp.test(newValue)) {\r\n              liElement.addClass(options.activeClass);\r\n            } else {\r\n              liElement.removeClass(options.activeClass);\r\n            }\r\n\r\n          });\r\n\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$popover', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      container: false,\r\n      target: false,\r\n      placement: 'right',\r\n      template: 'popover/popover.tpl.html',\r\n      contentTemplate: false,\r\n      trigger: 'click',\r\n      keyboard: true,\r\n      html: false,\r\n      title: '',\r\n      content: '',\r\n      delay: 0,\r\n      autoClose: false\r\n    };\r\n\r\n    this.$get = function($tooltip) {\r\n\r\n      function PopoverFactory(element, config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        var $popover = $tooltip(element, options);\r\n\r\n        // Support scope as string options [/*title, */content]\r\n        if(options.content) {\r\n          $popover.$scope.content = options.content;\r\n        }\r\n\r\n        return $popover;\r\n\r\n      }\r\n\r\n      return PopoverFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPopover', function($window, $sce, $popover) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'contentTemplate', 'placement', 'container', 'target', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'customClass', 'autoClose'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function(key) {\r\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\r\n            scope[key] = $sce.trustAsHtml(newValue);\r\n            angular.isDefined(oldValue) && requestAnimationFrame(function() {\r\n              popover && popover.$applyPlacement();\r\n            });\r\n          });\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsPopover && scope.$watch(attr.bsPopover, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.content = newValue;\r\n          }\r\n          angular.isDefined(oldValue) && requestAnimationFrame(function() {\r\n            popover && popover.$applyPlacement();\r\n          });\r\n        }, true);\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!popover || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\r\n          newValue === true ? popover.show() : popover.hide();\r\n        });\r\n\r\n        // Initialize popover\r\n        var popover = $popover(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (popover) popover.destroy();\r\n          options = null;\r\n          popover = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$scrollspy', function() {\r\n\r\n    // Pool of registered spies\r\n    var spies = this.$$spies = {};\r\n\r\n    var defaults = this.defaults = {\r\n      debounce: 150,\r\n      throttle: 100,\r\n      offset: 100\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, dimensions, debounce, throttle) {\r\n\r\n      var windowEl = angular.element($window);\r\n      var docEl = angular.element($document.prop('documentElement'));\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      // Helper functions\r\n\r\n      function nodeName(element, name) {\r\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\r\n      }\r\n\r\n      function ScrollSpyFactory(config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        if(!options.element) options.element = bodyEl;\r\n        var isWindowSpy = nodeName(options.element, 'body');\r\n        var scrollEl = isWindowSpy ? windowEl : options.element;\r\n        var scrollId = isWindowSpy ? 'window' : options.id;\r\n\r\n        // Use existing spy\r\n        if(spies[scrollId]) {\r\n          spies[scrollId].$$count++;\r\n          return spies[scrollId];\r\n        }\r\n\r\n        var $scrollspy = {};\r\n\r\n        // Private vars\r\n        var unbindViewContentLoaded, unbindIncludeContentLoaded;\r\n        var trackedElements = $scrollspy.$trackedElements = [];\r\n        var sortedElements = [];\r\n        var activeTarget;\r\n        var debouncedCheckPosition;\r\n        var throttledCheckPosition;\r\n        var debouncedCheckOffsets;\r\n        var viewportHeight;\r\n        var scrollTop;\r\n\r\n        $scrollspy.init = function() {\r\n\r\n          // Setup internal ref counter\r\n          this.$$count = 1;\r\n\r\n          // Bind events\r\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\r\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\r\n          scrollEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', debouncedCheckPosition);\r\n          scrollEl.on('scroll', throttledCheckPosition);\r\n\r\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\r\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\r\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\r\n          debouncedCheckOffsets();\r\n\r\n          // Register spy for reuse\r\n          if(scrollId) {\r\n            spies[scrollId] = $scrollspy;\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.destroy = function() {\r\n\r\n          // Check internal ref counter\r\n          this.$$count--;\r\n          if(this.$$count > 0) {\r\n            return;\r\n          }\r\n\r\n          // Unbind events\r\n          scrollEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', debouncedCheckPosition);\r\n          scrollEl.off('scroll', debouncedCheckPosition);\r\n          unbindViewContentLoaded();\r\n          unbindIncludeContentLoaded();\r\n          if (scrollId) {\r\n            delete spies[scrollId];\r\n          }\r\n        };\r\n\r\n        $scrollspy.checkPosition = function() {\r\n\r\n          // Not ready yet\r\n          if(!sortedElements.length) return;\r\n\r\n          // Calculate the scroll position\r\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\r\n\r\n          // Calculate the viewport height for use by the components\r\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\r\n\r\n          // Activate first element if scroll is smaller\r\n          if(scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\r\n            return $scrollspy.$activateElement(sortedElements[0]);\r\n          }\r\n\r\n          // Activate proper element\r\n          for (var i = sortedElements.length; i--;) {\r\n            if(angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\r\n            if(activeTarget === sortedElements[i].target) continue;\r\n            if(scrollTop < sortedElements[i].offsetTop) continue;\r\n            if(sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\r\n            return $scrollspy.$activateElement(sortedElements[i]);\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.checkPositionWithEventLoop = function() {\r\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\r\n          // in this setTimeout call\r\n          setTimeout($scrollspy.checkPosition, 1);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $scrollspy.$activateElement = function(element) {\r\n          if(activeTarget) {\r\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\r\n            if(activeElement) {\r\n              activeElement.source.removeClass('active');\r\n              if(nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\r\n                activeElement.source.parent().parent().removeClass('active');\r\n              }\r\n            }\r\n          }\r\n          activeTarget = element.target;\r\n          element.source.addClass('active');\r\n          if(nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\r\n            element.source.parent().parent().addClass('active');\r\n          }\r\n        };\r\n\r\n        $scrollspy.$getTrackedElement = function(target) {\r\n          return trackedElements.filter(function(obj) {\r\n            return obj.target === target;\r\n          })[0];\r\n        };\r\n\r\n        // Track offsets behavior\r\n\r\n        $scrollspy.checkOffsets = function() {\r\n\r\n          angular.forEach(trackedElements, function(trackedElement) {\r\n            var targetElement = document.querySelector(trackedElement.target);\r\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\r\n            if(options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\r\n          });\r\n\r\n          sortedElements = trackedElements\r\n          .filter(function(el) {\r\n            return el.offsetTop !== null;\r\n          })\r\n          .sort(function(a, b) {\r\n            return a.offsetTop - b.offsetTop;\r\n          });\r\n\r\n          debouncedCheckPosition();\r\n\r\n        };\r\n\r\n        $scrollspy.trackElement = function(target, source) {\r\n          trackedElements.push({target: target, source: source});\r\n        };\r\n\r\n        $scrollspy.untrackElement = function(target, source) {\r\n          var toDelete;\r\n          for (var i = trackedElements.length; i--;) {\r\n            if(trackedElements[i].target === target && trackedElements[i].source === source) {\r\n              toDelete = i;\r\n              break;\r\n            }\r\n          }\r\n          trackedElements = trackedElements.splice(toDelete, 1);\r\n        };\r\n\r\n        $scrollspy.activate = function(i) {\r\n          trackedElements[i].addClass('active');\r\n        };\r\n\r\n        // Initialize plugin\r\n\r\n        $scrollspy.init();\r\n        return $scrollspy;\r\n\r\n      }\r\n\r\n      return ScrollSpyFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsScrollspy', function($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      link: function postLink(scope, element, attr) {\r\n\r\n        var options = {scope: scope};\r\n        angular.forEach(['offset', 'target'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        var scrollspy = $scrollspy(options);\r\n        scrollspy.trackElement(options.target, element);\r\n\r\n        scope.$on('$destroy', function() {\r\n          if (scrollspy) {\r\n            scrollspy.untrackElement(options.target, element);\r\n            scrollspy.destroy();\r\n          }\r\n          options = null;\r\n          scrollspy = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsScrollspyList', function($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      compile: function postLink(element, attr) {\r\n        var children = element[0].querySelectorAll('li > a[href]');\r\n        angular.forEach(children, function(child) {\r\n          var childEl = angular.element(child);\r\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$select', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'select',\r\n      prefixEvent: '$select',\r\n      placement: 'bottom-left',\r\n      template: 'select/select.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      multiple: false,\r\n      allNoneButtons: false,\r\n      sort: true,\r\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\r\n      placeholder: 'Choose among the following...',\r\n      maxLength: 3,\r\n      maxLengthHtml: 'selected',\r\n      iconCheckmark: 'glyphicon glyphicon-ok'\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n\r\n      function SelectFactory(element, controller, config) {\r\n\r\n        var $select = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $select = $tooltip(element, options);\r\n        var scope = $select.$scope;\r\n\r\n        scope.$matches = [];\r\n        scope.$activeIndex = 0;\r\n        scope.$isMultiple = options.multiple;\r\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\r\n        scope.$iconCheckmark = options.iconCheckmark;\r\n\r\n        scope.$activate = function(index) {\r\n          scope.$$postDigest(function() {\r\n            $select.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function(index, evt) {\r\n          scope.$$postDigest(function() {\r\n            $select.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function() {\r\n          return $select.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function(index) {\r\n          return $select.$isActive(index);\r\n        };\r\n\r\n        scope.$selectAll = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (!scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        scope.$selectNone = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $select.update = function(matches) {\r\n          scope.$matches = matches;\r\n          $select.$updateActiveIndex();\r\n        };\r\n\r\n        $select.activate = function(index) {\r\n          if(options.multiple) {\r\n            scope.$activeIndex.sort();\r\n            $select.$isActive(index) ? scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1) : scope.$activeIndex.push(index);\r\n            if(options.sort) scope.$activeIndex.sort();\r\n          } else {\r\n            scope.$activeIndex = index;\r\n          }\r\n          return scope.$activeIndex;\r\n        };\r\n\r\n        $select.select = function(index) {\r\n          var value = scope.$matches[index].value;\r\n          scope.$apply(function() {\r\n            $select.activate(index);\r\n            if(options.multiple) {\r\n              controller.$setViewValue(scope.$activeIndex.map(function(index) {\r\n                return scope.$matches[index].value;\r\n              }));\r\n            } else {\r\n              controller.$setViewValue(value);\r\n              // Hide if single select\r\n              $select.hide();\r\n            }\r\n          });\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $select.$updateActiveIndex = function() {\r\n          if(controller.$modelValue && scope.$matches.length) {\r\n            if(options.multiple && angular.isArray(controller.$modelValue)) {\r\n              scope.$activeIndex = controller.$modelValue.map(function(value) {\r\n                return $select.$getIndex(value);\r\n              });\r\n            } else {\r\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\r\n            }\r\n          } else if(scope.$activeIndex >= scope.$matches.length) {\r\n            scope.$activeIndex = options.multiple ? [] : 0;\r\n          }\r\n        };\r\n\r\n        $select.$isVisible = function() {\r\n          if(!options.minLength || !controller) {\r\n            return scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $select.$isActive = function(index) {\r\n          if(options.multiple) {\r\n            return scope.$activeIndex.indexOf(index) !== -1;\r\n          } else {\r\n            return scope.$activeIndex === index;\r\n          }\r\n        };\r\n\r\n        $select.$getIndex = function(value) {\r\n          var l = scope.$matches.length, i = l;\r\n          if(!l) return;\r\n          for(i = l; i--;) {\r\n            if(scope.$matches[i].value === value) break;\r\n          }\r\n          if(i < 0) return;\r\n          return i;\r\n        };\r\n\r\n        $select.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if(isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $select.$onKeyDown = function(evt) {\r\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Select with enter\r\n          if(!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\r\n            return $select.select(scope.$activeIndex);\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          if(evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n          else if(evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n          else if(angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n          scope.$digest();\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var _show = $select.show;\r\n        $select.show = function() {\r\n          _show();\r\n          if(options.multiple) {\r\n            $select.$element.addClass('select-multiple');\r\n          }\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n            if(options.keyboard) {\r\n              element.on('keydown', $select.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $select.hide;\r\n        $select.hide = function() {\r\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n          if(options.keyboard) {\r\n            element.off('keydown', $select.$onKeyDown);\r\n          }\r\n          _hide(true);\r\n        };\r\n\r\n        return $select;\r\n\r\n      }\r\n\r\n      SelectFactory.defaults = defaults;\r\n      return SelectFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsSelect', function($window, $parse, $q, $select, $parseOptions) {\r\n\r\n    var defaults = $select.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, placeholder: defaults.placeholder};\r\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'placeholder', 'multiple', 'allNoneButtons', 'maxLength', 'maxLengthHtml'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Add support for select markup\r\n        if(element[0].nodeName.toLowerCase() === 'select') {\r\n          var inputEl = element;\r\n          inputEl.css('display', 'none');\r\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\r\n          inputEl.after(element);\r\n        }\r\n\r\n        // Build proper ngOptions\r\n        var parsedOptions = $parseOptions(attr.ngOptions);\r\n\r\n        // Initialize select\r\n        var select = $select(element, controller, options);\r\n\r\n        // Watch ngOptions values before filtering for changes\r\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\r\n        scope.$watch(watchedOptions, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n          parsedOptions.valuesFn(scope, controller)\r\n          .then(function(values) {\r\n            select.update(values);\r\n            controller.$render();\r\n          });\r\n        }, true);\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\r\n          select.$updateActiveIndex();\r\n          controller.$render();\r\n        }, true);\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var selected, index;\r\n          if(options.multiple && angular.isArray(controller.$modelValue)) {\r\n            selected = controller.$modelValue.map(function(value) {\r\n              index = select.$getIndex(value);\r\n              return angular.isDefined(index) ? select.$scope.$matches[index].label : false;\r\n            }).filter(angular.isDefined);\r\n            if(selected.length > (options.maxLength || defaults.maxLength)) {\r\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\r\n            } else {\r\n              selected = selected.join(', ');\r\n            }\r\n          } else {\r\n            index = select.$getIndex(controller.$modelValue);\r\n            selected = angular.isDefined(index) ? select.$scope.$matches[index].label : false;\r\n          }\r\n          element.html((selected ? selected : options.placeholder) + defaults.caretHtml);\r\n        };\r\n\r\n        if(options.multiple){\r\n          controller.$isEmpty = function(value){\r\n            return !value || value.length === 0;\r\n          };\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (select) select.destroy();\r\n          options = null;\r\n          select = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.tab', [])\r\n\r\n  .provider('$tab', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      template: 'tab/tab.tpl.html',\r\n      navClass: 'nav-tabs',\r\n      activeClass: 'active'\r\n    };\r\n\r\n    var controller = this.controller = function($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'navClass', 'activeClass'], function(key) {\r\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // Publish options on scope\r\n      $scope.$navClass = self.$options.navClass;\r\n      $scope.$activeClass = self.$options.activeClass;\r\n\r\n      self.$panes = $scope.$panes = [];\r\n\r\n      // DEPRECATED: $viewChangeListeners, please use $activePaneChangeListeners\r\n      // Because we deprecated ngModel usage, we rename viewChangeListeners to \r\n      // activePaneChangeListeners to make more sense.\r\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\r\n\r\n      self.$push = function(pane) {\r\n        self.$panes.push(pane);\r\n      };\r\n\r\n      self.$remove = function(pane) {\r\n        var index = self.$panes.indexOf(pane);\r\n        var activeIndex = self.$panes.$active;\r\n\r\n        // remove pane from $panes array\r\n        self.$panes.splice(index, 1);\r\n\r\n        if (index < activeIndex) {\r\n          // we removed a pane before the active pane, so we need to \r\n          // decrement the active pane index\r\n          activeIndex--;\r\n        }\r\n        else if (index === activeIndex && activeIndex === self.$panes.length) {\r\n          // we remove the active pane and it was the one at the end,\r\n          // so select the previous one\r\n          activeIndex--;\r\n        }\r\n        self.$setActive(activeIndex);\r\n      };\r\n\r\n      self.$panes.$active = 0;\r\n      self.$setActive = $scope.$setActive = function(value) {\r\n        self.$panes.$active = value;\r\n        self.$activePaneChangeListeners.forEach(function(fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n    };\r\n\r\n    this.$get = function() {\r\n      var $tab = {};\r\n      $tab.defaults = defaults;\r\n      $tab.controller = controller;\r\n      return $tab;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTabs', function($window, $animate, $tab, $parse) {\r\n\r\n    var defaults = $tab.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsTabs'],\r\n      transclude: true,\r\n      scope: true,\r\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\r\n      templateUrl: function(element, attr) {\r\n        return attr.template || defaults.template;\r\n      },\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // DEPRECATED: ngModel, please use bsActivePane\r\n        // 'ngModel' is deprecated bacause if interferes with form validation\r\n        // and status, so avoid using it here.\r\n        if(ngModelCtrl) {\r\n          console.warn('Usage of ngModel is deprecated, please use bsActivePane instead!');\r\n\r\n          // Update the modelValue following\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\r\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function(modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            bsTabsCtrl.$setActive(modelValue * 1);\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n        if (attrs.bsActivePane) {\r\n          // adapted from angularjs ngModelController bindings\r\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\r\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\r\n\r\n          // Update bsActivePane value with change\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\r\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // watch bsActivePane for value changes\r\n          scope.$watch(attrs.bsActivePane, function(newValue, oldValue) {\r\n            bsTabsCtrl.$setActive(newValue * 1);\r\n          }, true);\r\n        }\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPane', function($window, $animate, $sce) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsTabs'],\r\n      scope: true,\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('tab-pane');\r\n\r\n        // Observe title attribute for change\r\n        attrs.$observe('title', function(newValue, oldValue) {\r\n          scope.title = $sce.trustAsHtml(newValue);\r\n        });\r\n\r\n        // Add animation class\r\n        if(bsTabsCtrl.$options.animation) {\r\n          element.addClass(bsTabsCtrl.$options.animation);\r\n        }\r\n\r\n        // Push pane to parent bsTabs controller\r\n        bsTabsCtrl.$push(scope);\r\n\r\n        // remove pane from tab controller when pane is destroyed\r\n        scope.$on('$destroy', function() {\r\n          bsTabsCtrl.$remove(scope);\r\n        });\r\n\r\n        function render() {\r\n          var index = bsTabsCtrl.$panes.indexOf(scope);\r\n          var active = bsTabsCtrl.$panes.$active;\r\n          $animate[index === active ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function() {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.timepicker', [\r\n  'mgcrea.ngStrap.helpers.dateParser',\r\n  'mgcrea.ngStrap.helpers.dateFormatter',\r\n  'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$timepicker', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'timepicker',\r\n      placement: 'bottom-left',\r\n      template: 'timepicker/timepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: true,\r\n      timeType: 'date',\r\n      timeFormat: 'shortTime',\r\n      modelTimeFormat: null,\r\n      autoclose: false,\r\n      minTime: -Infinity,\r\n      maxTime: +Infinity,\r\n      length: 5,\r\n      hourStep: 1,\r\n      minuteStep: 5,\r\n      iconUp: 'glyphicon glyphicon-chevron-up',\r\n      iconDown: 'glyphicon glyphicon-chevron-down',\r\n      arrowBehavior: 'pager'\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if(!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\r\n\r\n      function timepickerFactory(element, controller, config) {\r\n\r\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $timepicker.$options;\r\n        var scope = $timepicker.$scope;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function(date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        // View vars\r\n\r\n        var selectedIndex = 0;\r\n        var startDate = controller.$dateValue || new Date();\r\n        var viewDate = {hour: startDate.getHours(), meridian: startDate.getHours() < 12, minute: startDate.getMinutes(), second: startDate.getSeconds(), millisecond: startDate.getMilliseconds()};\r\n\r\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\r\n\r\n        var hoursFormat = $dateFormatter.hoursFormat(format),\r\n          timeSeparator = $dateFormatter.timeSeparator(format),\r\n          minutesFormat = $dateFormatter.minutesFormat(format),\r\n          showAM = $dateFormatter.showAM(format);\r\n\r\n        scope.$iconUp = options.iconUp;\r\n        scope.$iconDown = options.iconDown;\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function(date, index) {\r\n          $timepicker.select(date, index);\r\n        };\r\n        scope.$moveIndex = function(value, index) {\r\n          $timepicker.$moveIndex(value, index);\r\n        };\r\n        scope.$switchMeridian = function(date) {\r\n          $timepicker.switchMeridian(date);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $timepicker.update = function(date) {\r\n          // console.warn('$timepicker.update() newValue=%o', date);\r\n          if(angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $timepicker.$date = date;\r\n            angular.extend(viewDate, {hour: date.getHours(), minute: date.getMinutes(), second: date.getSeconds(), millisecond: date.getMilliseconds()});\r\n            $timepicker.$build();\r\n          } else if(!$timepicker.$isBuilt) {\r\n            $timepicker.$build();\r\n          }\r\n        };\r\n\r\n        $timepicker.select = function(date, index, keep) {\r\n          // console.warn('$timepicker.select', date, scope.$mode);\r\n          if(!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\r\n          if(!angular.isDate(date)) date = new Date(date);\r\n          if(index === 0) controller.$dateValue.setHours(date.getHours());\r\n          else if(index === 1) controller.$dateValue.setMinutes(date.getMinutes());\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n          if(options.autoclose && !keep) {\r\n            $timeout(function() { $timepicker.hide(true); });\r\n          }\r\n        };\r\n\r\n        $timepicker.switchMeridian = function(date) {\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            return;\r\n          }\r\n          var hours = (date || controller.$dateValue).getHours();\r\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $timepicker.$build = function() {\r\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\r\n          var i, midIndex = scope.midIndex = parseInt(options.length / 2, 10);\r\n          var hours = [], hour;\r\n          for(i = 0; i < options.length; i++) {\r\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\r\n            hours.push({date: hour, label: formatDate(hour, hoursFormat), selected: $timepicker.$date && $timepicker.$isSelected(hour, 0), disabled: $timepicker.$isDisabled(hour, 0)});\r\n          }\r\n          var minutes = [], minute;\r\n          for(i = 0; i < options.length; i++) {\r\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\r\n            minutes.push({date: minute, label: formatDate(minute, minutesFormat), selected: $timepicker.$date && $timepicker.$isSelected(minute, 1), disabled: $timepicker.$isDisabled(minute, 1)});\r\n          }\r\n\r\n          var rows = [];\r\n          for(i = 0; i < options.length; i++) {\r\n            rows.push([hours[i], minutes[i]]);\r\n          }\r\n          scope.rows = rows;\r\n          scope.showAM = showAM;\r\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\r\n          scope.timeSeparator = timeSeparator;\r\n          $timepicker.$isBuilt = true;\r\n        };\r\n\r\n        $timepicker.$isSelected = function(date, index) {\r\n          if(!$timepicker.$date) return false;\r\n          else if(index === 0) {\r\n            return date.getHours() === $timepicker.$date.getHours();\r\n          } else if(index === 1) {\r\n            return date.getMinutes() === $timepicker.$date.getMinutes();\r\n          }\r\n        };\r\n\r\n        $timepicker.$isDisabled = function(date, index) {\r\n          var selectedTime;\r\n          if(index === 0) {\r\n            selectedTime = date.getTime() + viewDate.minute * 6e4;\r\n          } else if(index === 1) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5;\r\n          }\r\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\r\n        };\r\n\r\n        scope.$arrowAction = function (value, index) {\r\n          if (options.arrowBehavior === 'picker') {\r\n            $timepicker.$setTimeByStep(value,index);\r\n          } else {\r\n            $timepicker.$moveIndex(value,index);\r\n          }\r\n        };\r\n\r\n        $timepicker.$setTimeByStep = function(value, index) {\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours(), hoursLength = formatDate(newDate, hoursFormat).length;\r\n          var minutes = newDate.getMinutes(), minutesLength = formatDate(newDate, minutesFormat).length;\r\n          if (index === 0) {\r\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\r\n          }\r\n          else {\r\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\r\n          }\r\n          $timepicker.select(newDate, index, true);\r\n        };\r\n\r\n        $timepicker.$moveIndex = function(value, index) {\r\n          var targetDate;\r\n          if(index === 0) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute);\r\n            angular.extend(viewDate, {hour: targetDate.getHours()});\r\n          } else if(index === 1) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep));\r\n            angular.extend(viewDate, {minute: targetDate.getMinutes()});\r\n          }\r\n          $timepicker.$build();\r\n        };\r\n\r\n        $timepicker.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          if(evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if(isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $timepicker.$onKeyDown = function(evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Close on enter\r\n          if(evt.keyCode === 13) return $timepicker.hide(true);\r\n\r\n          // Navigate with keyboard\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours(), hoursLength = formatDate(newDate, hoursFormat).length;\r\n          var minutes = newDate.getMinutes(), minutesLength = formatDate(newDate, minutesFormat).length;\r\n          var lateralMove = /(37|39)/.test(evt.keyCode);\r\n          var count = 2 + showAM * 1;\r\n\r\n          // Navigate indexes (left, right)\r\n          if (lateralMove) {\r\n            if(evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\r\n            else if(evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\r\n          }\r\n\r\n          // Update values (up, down)\r\n          var selectRange = [0, hoursLength];\r\n          if(selectedIndex === 0) {\r\n            if(evt.keyCode === 38) newDate.setHours(hours - parseInt(options.hourStep, 10));\r\n            else if(evt.keyCode === 40) newDate.setHours(hours + parseInt(options.hourStep, 10));\r\n            // re-calculate hours length because we have changed hours value\r\n            hoursLength = formatDate(newDate, hoursFormat).length;\r\n            selectRange = [0, hoursLength];\r\n          } else if(selectedIndex === 1) {\r\n            if(evt.keyCode === 38) newDate.setMinutes(minutes - parseInt(options.minuteStep, 10));\r\n            else if(evt.keyCode === 40) newDate.setMinutes(minutes + parseInt(options.minuteStep, 10));\r\n            // re-calculate minutes length because we have changes minutes value\r\n            minutesLength = formatDate(newDate, minutesFormat).length;\r\n            selectRange = [hoursLength + 1, hoursLength + 1 + minutesLength];\r\n          } else if(selectedIndex === 2) {\r\n            if(!lateralMove) $timepicker.switchMeridian();\r\n            selectRange = [hoursLength + 1 + minutesLength + 1, hoursLength + 1 + minutesLength + 3];\r\n          }\r\n          $timepicker.select(newDate, selectedIndex, true);\r\n          createSelection(selectRange[0], selectRange[1]);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function createSelection(start, end) {\r\n          if(element[0].createTextRange) {\r\n            var selRange = element[0].createTextRange();\r\n            selRange.collapse(true);\r\n            selRange.moveStart('character', start);\r\n            selRange.moveEnd('character', end);\r\n            selRange.select();\r\n          } else if(element[0].setSelectionRange) {\r\n            element[0].setSelectionRange(start, end);\r\n          } else if(angular.isUndefined(element[0].selectionStart)) {\r\n            element[0].selectionStart = start;\r\n            element[0].selectionEnd = end;\r\n          }\r\n        }\r\n\r\n        function focusElement() {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $timepicker.init;\r\n        $timepicker.init = function() {\r\n          if(isNative && options.useNative) {\r\n            element.prop('type', 'time');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if(isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $timepicker.destroy;\r\n        $timepicker.destroy = function() {\r\n          if(isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $timepicker.show;\r\n        $timepicker.show = function() {\r\n          _show();\r\n          // use timeout to hookup the events to prevent \r\n          // event bubbling from being processed imediately. \r\n          $timeout(function() {\r\n            $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n            if(options.keyboard) {\r\n              element.on('keydown', $timepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $timepicker.hide;\r\n        $timepicker.hide = function(blur) {\r\n          if(!$timepicker.$isShown) return;\r\n          $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n          if(options.keyboard) {\r\n            element.off('keydown', $timepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $timepicker;\r\n\r\n      }\r\n\r\n      timepickerFactory.defaults = defaults;\r\n      return timepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsTimepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\r\n\r\n    var defaults = $timepicker.defaults;\r\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, controller: controller};\r\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'autoclose', 'timeType', 'timeFormat', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!timepicker || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\r\n          newValue === true ? timepicker.show() : timepicker.hide();\r\n        });\r\n\r\n        // Initialize timepicker\r\n        if(isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\r\n        var timepicker = $timepicker(element, controller, options);\r\n        options = timepicker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function(date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        // Initialize parser\r\n        var dateParser = $dateParser({format: options.timeFormat, lang: lang});\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minTime', 'maxTime'], function(key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\r\n            timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\r\n            !isNaN(timepicker.$options[key]) && timepicker.$build();\r\n            validateAgainstMinMaxTime(controller.$dateValue);\r\n          });\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\r\n          timepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        function validateAgainstMinMaxTime(parsedTime) {\r\n          if (!angular.isDate(parsedTime)) return;\r\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\r\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if(!isValid) {\r\n              return;\r\n          }\r\n          controller.$dateValue = parsedTime;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function(viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          // Null values should correctly reset the model value & validity\r\n          if(!viewValue) {\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3 \r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            controller.$setValidity('date', true);\r\n            return null;\r\n          }\r\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\r\n          if(!parsedTime || isNaN(parsedTime.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to \r\n            // invalidate model value \r\n            return;\r\n          } else {\r\n            validateAgainstMinMaxTime(parsedTime);\r\n          }\r\n          if(options.timeType === 'string') {\r\n            return formatDate(parsedTime, options.modelTimeFormat || options.timeFormat);\r\n          } else if(options.timeType === 'number') {\r\n            return controller.$dateValue.getTime();\r\n          } else if(options.timeType === 'iso') {\r\n            return controller.$dateValue.toISOString();\r\n          } else {\r\n            return new Date(controller.$dateValue);\r\n          }\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function(modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if(angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if(angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if(options.timeType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\r\n          controller.$dateValue = date;\r\n          return getTimeFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function() {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getTimeFormattedString());\r\n        };\r\n\r\n        function getTimeFormattedString() {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (timepicker) timepicker.destroy();\r\n          options = null;\r\n          timepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$tooltip', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'tooltip',\r\n      prefixEvent: 'tooltip',\r\n      container: false,\r\n      target: false,\r\n      placement: 'top',\r\n      template: 'tooltip/tooltip.tpl.html',\r\n      contentTemplate: false,\r\n      trigger: 'hover focus',\r\n      keyboard: false,\r\n      html: false,\r\n      show: false,\r\n      title: '',\r\n      type: '',\r\n      delay: 0,\r\n      autoClose: false,\r\n      bsEnabled: true\r\n    };\r\n\r\n    this.$get = function($window, $rootScope, $compile, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\r\n\r\n      var trim = String.prototype.trim;\r\n      var isTouch = 'createTouch' in $window.document;\r\n      var htmlReplaceRegExp = /ng-bind=\"/ig;\r\n      var $body = angular.element($window.document);\r\n\r\n      function TooltipFactory(element, config) {\r\n\r\n        var $tooltip = {};\r\n\r\n        // Common vars\r\n        var nodeName = element[0].nodeName.toLowerCase();\r\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\r\n        $tooltip.$promise = fetchTemplate(options.template);\r\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n        if(options.delay && angular.isString(options.delay)) {\r\n          var split = options.delay.split(',').map(parseFloat);\r\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\r\n        }\r\n\r\n        // Support scope as string options\r\n        if(options.title) {\r\n          scope.title = $sce.trustAsHtml(options.title);\r\n        }\r\n\r\n        // Provide scope helpers\r\n        scope.$setEnabled = function(isEnabled) {\r\n          scope.$$postDigest(function() {\r\n            $tooltip.setEnabled(isEnabled);\r\n          });\r\n        };\r\n        scope.$hide = function() {\r\n          scope.$$postDigest(function() {\r\n            $tooltip.hide();\r\n          });\r\n        };\r\n        scope.$show = function() {\r\n          scope.$$postDigest(function() {\r\n            $tooltip.show();\r\n          });\r\n        };\r\n        scope.$toggle = function() {\r\n          scope.$$postDigest(function() {\r\n            $tooltip.toggle();\r\n          });\r\n        };\r\n        $tooltip.$isShown = scope.$isShown = false;\r\n\r\n        // Private vars\r\n        var timeout, hoverState;\r\n\r\n        // Support contentTemplate option\r\n        if(options.contentTemplate) {\r\n          $tooltip.$promise = $tooltip.$promise.then(function(template) {\r\n            var templateEl = angular.element(template);\r\n            return fetchTemplate(options.contentTemplate)\r\n            .then(function(contentTemplate) {\r\n              var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0]);\r\n              if(!contentEl.length) contentEl = findElement('[ng-bind=\"title\"]', templateEl[0]);\r\n              contentEl.removeAttr('ng-bind').html(contentTemplate);\r\n              return templateEl[0].outerHTML;\r\n            });\r\n          });\r\n        }\r\n\r\n        // Fetch, compile then initialize tooltip\r\n        var tipLinker, tipElement, tipTemplate, tipContainer, tipScope;\r\n        $tooltip.$promise.then(function(template) {\r\n          if(angular.isObject(template)) template = template.data;\r\n          if(options.html) template = template.replace(htmlReplaceRegExp, 'ng-bind-html=\"');\r\n          template = trim.apply(template);\r\n          tipTemplate = template;\r\n          tipLinker = $compile(template);\r\n          $tooltip.init();\r\n        });\r\n\r\n        $tooltip.init = function() {\r\n\r\n          // Options: delay\r\n          if (options.delay && angular.isNumber(options.delay)) {\r\n            options.delay = {\r\n              show: options.delay,\r\n              hide: options.delay\r\n            };\r\n          }\r\n\r\n          // Replace trigger on touch devices ?\r\n          // if(isTouch && options.trigger === defaults.trigger) {\r\n          //   options.trigger.replace(/hover/g, 'click');\r\n          // }\r\n\r\n          // Options : container\r\n          if(options.container === 'self') {\r\n            tipContainer = element;\r\n          } else if(angular.isElement(options.container)) {\r\n            tipContainer = options.container;\r\n          } else if(options.container) {\r\n            tipContainer = findElement(options.container);\r\n          }\r\n\r\n          // Options: trigger\r\n          bindTriggerEvents();\r\n\r\n          // Options: target\r\n          if(options.target) {\r\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\r\n          }\r\n\r\n          // Options: show\r\n          if(options.show) {\r\n            scope.$$postDigest(function() {\r\n              options.trigger === 'focus' ? element[0].focus() : $tooltip.show();\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $tooltip.destroy = function() {\r\n\r\n          // Unbind events\r\n          unbindTriggerEvents();\r\n\r\n          // Remove element\r\n          destroyTipElement();\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n\r\n        };\r\n\r\n        $tooltip.enter = function() {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'in';\r\n          if (!options.delay || !options.delay.show) {\r\n            return $tooltip.show();\r\n          }\r\n\r\n          timeout = setTimeout(function() {\r\n            if (hoverState ==='in') $tooltip.show();\r\n          }, options.delay.show);\r\n\r\n        };\r\n\r\n        $tooltip.show = function() {\r\n          if (!options.bsEnabled) return;\r\n\r\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\r\n          var parent, after;\r\n          if (options.container) {\r\n            parent = tipContainer;\r\n            if (tipContainer[0].lastChild) {\r\n              after = angular.element(tipContainer[0].lastChild);\r\n            } else {\r\n              after = null;\r\n            }\r\n          } else {\r\n            parent = null;\r\n            after = element;\r\n          }\r\n\r\n\r\n          // Hide any existing tipElement\r\n          if(tipElement) destroyTipElement();\r\n          // Fetch a cloned element linked from template\r\n          tipScope = $tooltip.$scope.$new();\r\n          tipElement = $tooltip.$element = tipLinker(tipScope, function(clonedElement, scope) {});\r\n\r\n          // Set the initial positioning.  Make the tooltip invisible\r\n          // so IE doesn't try to focus on it off screen.\r\n          tipElement.css({top: '-9999px', left: '-9999px', display: 'block', visibility: 'hidden'});\r\n\r\n          // Options: animation\r\n          if(options.animation) tipElement.addClass(options.animation);\r\n          // Options: type\r\n          if(options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\r\n          // Options: custom classes\r\n          if(options.customClass) tipElement.addClass(options.customClass);\r\n\r\n          // Support v1.3+ $animate\r\n          // https://github.com/angular/angular.js/commit/bf0f5502b1bbfddc5cdd2f138efd9188b8c652a9\r\n          var promise = $animate.enter(tipElement, parent, after, enterAnimateCallback);\r\n          if(promise && promise.then) promise.then(enterAnimateCallback);\r\n\r\n          $tooltip.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n          $$rAF(function () {\r\n            $tooltip.$applyPlacement();\r\n\r\n            // Once placed, make the tooltip visible\r\n            if(tipElement) tipElement.css({visibility: 'visible'});\r\n          }); // var a = bodyEl.offsetWidth + 1; ?\r\n\r\n          // Bind events\r\n          if(options.keyboard) {\r\n            if(options.trigger !== 'focus') {\r\n              $tooltip.focus();\r\n            }\r\n            bindKeyboardEvents();\r\n          }\r\n\r\n          if(options.autoClose) {\r\n            bindAutoCloseEvents();\r\n          }\r\n\r\n        };\r\n\r\n        function enterAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\r\n        }\r\n\r\n        $tooltip.leave = function() {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'out';\r\n          if (!options.delay || !options.delay.hide) {\r\n            return $tooltip.hide();\r\n          }\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'out') {\r\n              $tooltip.hide();\r\n            }\r\n          }, options.delay.hide);\r\n\r\n        };\r\n\r\n        var _blur;\r\n        $tooltip.hide = function(blur) {\r\n\r\n          if(!$tooltip.$isShown) return;\r\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\r\n\r\n          // store blur value for leaveAnimateCallback to use\r\n          _blur = blur;\r\n\r\n          // Support v1.3+ $animate\r\n          // https://github.com/angular/angular.js/commit/bf0f5502b1bbfddc5cdd2f138efd9188b8c652a9\r\n          var promise = $animate.leave(tipElement, leaveAnimateCallback);\r\n          if(promise && promise.then) promise.then(leaveAnimateCallback);\r\n\r\n          $tooltip.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          if(options.keyboard && tipElement !== null) {\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if(options.autoClose && tipElement !== null) {\r\n            unbindAutoCloseEvents();\r\n          }\r\n        };\r\n\r\n        function leaveAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\r\n          // Allow to blur the input when hidden, like when pressing enter key\r\n          if(_blur && options.trigger === 'focus') {\r\n            return element[0].blur();\r\n          }\r\n\r\n          // clean up child scopes\r\n          destroyTipElement();\r\n        }\r\n\r\n        $tooltip.toggle = function() {\r\n          $tooltip.$isShown ? $tooltip.leave() : $tooltip.enter();\r\n        };\r\n\r\n        $tooltip.focus = function() {\r\n          tipElement[0].focus();\r\n        };\r\n\r\n        $tooltip.setEnabled = function(isEnabled) {\r\n          options.bsEnabled = isEnabled;\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $tooltip.$applyPlacement = function() {\r\n          if(!tipElement) return;\r\n\r\n          // Determine if we're doing an auto or normal placement\r\n          var placement = options.placement,\r\n              autoToken = /\\s?auto?\\s?/i,\r\n              autoPlace  = autoToken.test(placement);\r\n\r\n          if (autoPlace) {\r\n            placement = placement.replace(autoToken, '') || defaults.placement;\r\n          }\r\n\r\n          // Need to add the position class before we get\r\n          // the offsets\r\n          tipElement.addClass(options.placement);\r\n\r\n          // Get the position of the target element\r\n          // and the height and width of the tooltip so we can center it.\r\n          var elementPosition = getPosition(),\r\n              tipWidth = tipElement.prop('offsetWidth'),\r\n              tipHeight = tipElement.prop('offsetHeight');\r\n\r\n          // If we're auto placing, we need to check the positioning\r\n          if (autoPlace) {\r\n            var originalPlacement = placement;\r\n            var container = options.container ? angular.element(document.querySelector(options.container)) : element.parent();\r\n            var containerPosition = getPosition(container);\r\n\r\n            // Determine if the vertical placement\r\n            if (originalPlacement.indexOf('bottom') >= 0 && elementPosition.bottom + tipHeight > containerPosition.bottom) {\r\n              placement = originalPlacement.replace('bottom', 'top');\r\n            } else if (originalPlacement.indexOf('top') >= 0 && elementPosition.top - tipHeight < containerPosition.top) {\r\n              placement = originalPlacement.replace('top', 'bottom');\r\n            }\r\n\r\n            // Determine the horizontal placement\r\n            // The exotic placements of left and right are opposite of the standard placements.  Their arrows are put on the left/right\r\n            // and flow in the opposite direction of their placement.\r\n            if ((originalPlacement === 'right' || originalPlacement === 'bottom-left' || originalPlacement === 'top-left') &&\r\n                elementPosition.right + tipWidth > containerPosition.width) {\r\n\r\n              placement = originalPlacement === 'right' ? 'left' : placement.replace('left', 'right');\r\n            } else if ((originalPlacement === 'left' || originalPlacement === 'bottom-right' || originalPlacement === 'top-right') &&\r\n                elementPosition.left - tipWidth < containerPosition.left) {\r\n\r\n              placement = originalPlacement === 'left' ? 'right' : placement.replace('right', 'left');\r\n            }\r\n\r\n            tipElement.removeClass(originalPlacement).addClass(placement);\r\n          }\r\n\r\n          // Get the tooltip's top and left coordinates to center it with this directive.\r\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\r\n          applyPlacementCss(tipPosition.top, tipPosition.left);\r\n        };\r\n\r\n        $tooltip.$onKeyUp = function(evt) {\r\n          if (evt.which === 27 && $tooltip.$isShown) {\r\n            $tooltip.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusKeyUp = function(evt) {\r\n          if (evt.which === 27) {\r\n            element[0].blur();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusElementMouseDown = function(evt) {\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Some browsers do not auto-focus buttons (eg. Safari)\r\n          $tooltip.$isShown ? element[0].blur() : element[0].focus();\r\n        };\r\n\r\n        // bind/unbind events\r\n        function bindTriggerEvents() {\r\n          var triggers = options.trigger.split(' ');\r\n          angular.forEach(triggers, function(trigger) {\r\n            if(trigger === 'click') {\r\n              element.on('click', $tooltip.toggle);\r\n            } else if(trigger !== 'manual') {\r\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              nodeName === 'button' && trigger !== 'hover' && element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n            }\r\n          });\r\n        }\r\n\r\n        function unbindTriggerEvents() {\r\n          var triggers = options.trigger.split(' ');\r\n          for (var i = triggers.length; i--;) {\r\n            var trigger = triggers[i];\r\n            if(trigger === 'click') {\r\n              element.off('click', $tooltip.toggle);\r\n            } else if(trigger !== 'manual') {\r\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              nodeName === 'button' && trigger !== 'hover' && element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n            }\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents() {\r\n          if(options.trigger !== 'focus') {\r\n            tipElement.on('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.on('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents() {\r\n          if(options.trigger !== 'focus') {\r\n            tipElement.off('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.off('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        var _autoCloseEventsBinded = false;\r\n        function bindAutoCloseEvents() {\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            // Stop propagation when clicking inside tooltip\r\n            tipElement.on('click', stopEventPropagation);\r\n\r\n            // Hide when clicking outside tooltip\r\n            $body.on('click', $tooltip.hide);\r\n\r\n            _autoCloseEventsBinded = true;\r\n          }, 0, false);\r\n        }\r\n\r\n        function unbindAutoCloseEvents() {\r\n          if (_autoCloseEventsBinded) {\r\n            tipElement.off('click', stopEventPropagation);\r\n            $body.off('click', $tooltip.hide);\r\n            _autoCloseEventsBinded = false;\r\n          }\r\n        }\r\n\r\n        function stopEventPropagation(event) {\r\n          event.stopPropagation();\r\n        }\r\n\r\n        // Private methods\r\n\r\n        function getPosition($element) {\r\n          $element = $element || (options.target || element);\r\n\r\n          var el = $element[0];\r\n\r\n          var elRect = el.getBoundingClientRect();\r\n          if (elRect.width === null) {\r\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\r\n            elRect = angular.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top });\r\n          }\r\n\r\n          var elPos;\r\n          if (options.container === 'body') {\r\n            elPos = dimensions.offset(el);\r\n          } else {\r\n            elPos = dimensions.position(el);\r\n          }\r\n\r\n          return angular.extend({}, elRect, elPos);\r\n        }\r\n\r\n        function getCalculatedOffset(placement, position, actualWidth, actualHeight) {\r\n          var offset;\r\n          var split = placement.split('-');\r\n\r\n          switch (split[0]) {\r\n          case 'right':\r\n            offset = {\r\n              top: position.top + position.height / 2 - actualHeight / 2,\r\n              left: position.left + position.width\r\n            };\r\n            break;\r\n          case 'bottom':\r\n            offset = {\r\n              top: position.top + position.height,\r\n              left: position.left + position.width / 2 - actualWidth / 2\r\n            };\r\n            break;\r\n          case 'left':\r\n            offset = {\r\n              top: position.top + position.height / 2 - actualHeight / 2,\r\n              left: position.left - actualWidth\r\n            };\r\n            break;\r\n          default:\r\n            offset = {\r\n              top: position.top - actualHeight,\r\n              left: position.left + position.width / 2 - actualWidth / 2\r\n            };\r\n            break;\r\n          }\r\n\r\n          if(!split[1]) {\r\n            return offset;\r\n          }\r\n\r\n          // Add support for corners @todo css\r\n          if(split[0] === 'top' || split[0] === 'bottom') {\r\n            switch (split[1]) {\r\n            case 'left':\r\n              offset.left = position.left;\r\n              break;\r\n            case 'right':\r\n              offset.left =  position.left + position.width - actualWidth;\r\n            }\r\n          } else if(split[0] === 'left' || split[0] === 'right') {\r\n            switch (split[1]) {\r\n            case 'top':\r\n              offset.top = position.top - actualHeight;\r\n              break;\r\n            case 'bottom':\r\n              offset.top = position.top + position.height;\r\n            }\r\n          }\r\n\r\n          return offset;\r\n        }\r\n\r\n        function applyPlacementCss(top, left) {\r\n          tipElement.css({ top: top + 'px', left: left + 'px' });\r\n        }\r\n\r\n        function destroyTipElement() {\r\n          // Cancel pending callbacks\r\n          clearTimeout(timeout);\r\n\r\n          if($tooltip.$isShown && tipElement !== null) {\r\n            if(options.autoClose) {\r\n              unbindAutoCloseEvents();\r\n            }\r\n\r\n            if(options.keyboard) {\r\n              unbindKeyboardEvents();\r\n            }\r\n          }\r\n\r\n          if(tipScope) {\r\n            tipScope.$destroy();\r\n            tipScope = null;\r\n          }\r\n\r\n          if(tipElement) {\r\n            tipElement.remove();\r\n            tipElement = $tooltip.$element = null;\r\n          }\r\n        }\r\n\r\n        return $tooltip;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest(scope) {\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n      }\r\n\r\n      function findElement(query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      var fetchPromises = {};\r\n      function fetchTemplate(template) {\r\n        if(fetchPromises[template]) return fetchPromises[template];\r\n        return (fetchPromises[template] = $q.when($templateCache.get(template) || $http.get(template))\r\n        .then(function(res) {\r\n          if(angular.isObject(res)) {\r\n            $templateCache.put(template, res.data);\r\n            return res.data;\r\n          }\r\n          return res;\r\n        }));\r\n      }\r\n\r\n      return TooltipFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTooltip', function($window, $location, $sce, $tooltip, $$rAF) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'contentTemplate', 'placement', 'container', 'target', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'backdropAnimation', 'type', 'customClass'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.title){\r\n          scope.title = '';\r\n        }\r\n\r\n        // Observe scope attributes for change\r\n        attr.$observe('title', function(newValue) {\r\n          if (angular.isDefined(newValue) || !scope.title) {\r\n            var oldValue = scope.title;\r\n            scope.title = $sce.trustAsHtml(newValue);\r\n            angular.isDefined(oldValue) && $$rAF(function() {\r\n              tooltip && tooltip.$applyPlacement();\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsTooltip && scope.$watch(attr.bsTooltip, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.title = newValue;\r\n          }\r\n          angular.isDefined(oldValue) && $$rAF(function() {\r\n            tooltip && tooltip.$applyPlacement();\r\n          });\r\n        }, true);\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!tooltip || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\r\n          newValue === true ? tooltip.show() : tooltip.hide();\r\n        });\r\n\r\n        // Enabled binding support\r\n        attr.bsEnabled && scope.$watch(attr.bsEnabled, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\r\n          if(!tooltip || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\r\n          newValue === false ? tooltip.setEnabled(false) : tooltip.setEnabled(true);\r\n        });\r\n\r\n        // Initialize popover\r\n        var tooltip = $tooltip(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if(tooltip) tooltip.destroy();\r\n          options = null;\r\n          tooltip = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$typeahead', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'typeahead',\r\n      prefixEvent: '$typeahead',\r\n      placement: 'bottom-left',\r\n      template: 'typeahead/typeahead.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      minLength: 1,\r\n      filter: 'filter',\r\n      limit: 6,\r\n      comparator: ''\r\n    };\r\n\r\n    this.$get = function($window, $rootScope, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      function TypeaheadFactory(element, controller, config) {\r\n\r\n        var $typeahead = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $typeahead = $tooltip(element, options);\r\n        var parentScope = config.scope;\r\n        var scope = $typeahead.$scope;\r\n\r\n        scope.$resetMatches = function(){\r\n          scope.$matches = [];\r\n          scope.$activeIndex = 0;\r\n        };\r\n        scope.$resetMatches();\r\n\r\n        scope.$activate = function(index) {\r\n          scope.$$postDigest(function() {\r\n            $typeahead.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function(index, evt) {\r\n          scope.$$postDigest(function() {\r\n            $typeahead.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function() {\r\n          return $typeahead.$isVisible();\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $typeahead.update = function(matches) {\r\n          scope.$matches = matches;\r\n          if(scope.$activeIndex >= matches.length) {\r\n            scope.$activeIndex = 0;\r\n          }\r\n        };\r\n\r\n        $typeahead.activate = function(index) {\r\n          scope.$activeIndex = index;\r\n        };\r\n\r\n        $typeahead.select = function(index) {\r\n          var value = scope.$matches[index].value;\r\n          // console.log('$setViewValue', value);\r\n          controller.$setViewValue(value);\r\n          controller.$render();\r\n          scope.$resetMatches();\r\n          if(parentScope) parentScope.$digest();\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $typeahead.$isVisible = function() {\r\n          if(!options.minLength || !controller) {\r\n            return !!scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $typeahead.$getIndex = function(value) {\r\n          var l = scope.$matches.length, i = l;\r\n          if(!l) return;\r\n          for(i = l; i--;) {\r\n            if(scope.$matches[i].value === value) break;\r\n          }\r\n          if(i < 0) return;\r\n          return i;\r\n        };\r\n\r\n        $typeahead.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n        };\r\n\r\n        $typeahead.$onKeyDown = function(evt) {\r\n          if(!/(38|40|13)/.test(evt.keyCode)) return;\r\n\r\n          // Let ngSubmit pass if the typeahead tip is hidden\r\n          if($typeahead.$isVisible()) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // Select with enter\r\n          if(evt.keyCode === 13 && scope.$matches.length) {\r\n            $typeahead.select(scope.$activeIndex);\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          else if(evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n          else if(evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n          else if(angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n          scope.$digest();\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $typeahead.show;\r\n        $typeahead.show = function() {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\r\n            if(options.keyboard) {\r\n              element.on('keydown', $typeahead.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var hide = $typeahead.hide;\r\n        $typeahead.hide = function() {\r\n          $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\r\n          if(options.keyboard) {\r\n            element.off('keydown', $typeahead.$onKeyDown);\r\n          }\r\n          hide();\r\n        };\r\n\r\n        return $typeahead;\r\n\r\n      }\r\n\r\n      TypeaheadFactory.defaults = defaults;\r\n      return TypeaheadFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTypeahead', function($window, $parse, $q, $typeahead, $parseOptions) {\r\n\r\n    var defaults = $typeahead.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'comparator'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Build proper ngOptions\r\n        var filter = options.filter || defaults.filter;\r\n        var limit = options.limit || defaults.limit;\r\n        var comparator = options.comparator || defaults.comparator;\r\n\r\n        var ngOptions = attr.ngOptions;\r\n        if(filter) ngOptions += ' | ' + filter + ':$viewValue';\r\n        if (comparator) ngOptions += ':' + comparator;\r\n        if(limit) ngOptions += ' | limitTo:' + limit;\r\n        var parsedOptions = $parseOptions(ngOptions);\r\n\r\n        // Initialize typeahead\r\n        var typeahead = $typeahead(element, controller, options);\r\n\r\n        // Watch options on demand\r\n        if(options.watchOptions) {\r\n          // Watch ngOptions values before filtering for changes, drop function calls\r\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\r\n          scope.$watch(watchedOptions, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\r\n              typeahead.update(values);\r\n              controller.$render();\r\n            });\r\n          }, true);\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          // console.warn('$watch', element.attr('ng-model'), newValue);\r\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\r\n          parsedOptions.valuesFn(scope, controller)\r\n          .then(function(values) {\r\n            // Prevent input with no future prospect if selectMode is truthy\r\n            // @TODO test selectMode\r\n            if(options.selectMode && !values.length && newValue.length > 0) {\r\n              controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\r\n              return;\r\n            }\r\n            if(values.length > limit) values = values.slice(0, limit);\r\n            var isVisible = typeahead.$isVisible();\r\n            isVisible && typeahead.update(values);\r\n            // Do not re-queue an update if a correct value has been selected\r\n            if(values.length === 1 && values[0].value === newValue) return;\r\n            !isVisible && typeahead.update(values);\r\n          });\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function(modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var displayValue = parsedOptions.displayValue(modelValue);\r\n          return displayValue === undefined ? '' : displayValue;\r\n        });\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          if(controller.$isEmpty(controller.$viewValue)) return element.val('');\r\n          var index = typeahead.$getIndex(controller.$modelValue);\r\n          var selected = angular.isDefined(index) ? typeahead.$scope.$matches[index].label : controller.$viewValue;\r\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\r\n          element.val(selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '').trim() : '');\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (typeahead) typeahead.destroy();\r\n          options = null;\r\n          typeahead = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}