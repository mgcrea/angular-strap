{"version":3,"sources":["angular-strap.js","typeahead/typeahead.js","helpers/compiler.js","dropdown/dropdown.js","tooltip/tooltip.js","timepicker/timepicker.js","tab/tab.js","select/select.js","scrollspy/scrollspy.js","popover/popover.js","navbar/navbar.js","modal/modal.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","datepicker/datepicker.js","collapse/collapse.js","button/button.js","aside/aside.js","alert/alert.js","affix/affix.js","module.js"],"names":["prefixEvent","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","defaults","animation","prefixClass","data","this","compile","controller","console","controllerAs","resolve","locals","bindToController","angular","forEach","value","isString","$injector","key","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","bsCompilerService","$inject","trigger","provider","container","keyboard","delay","minLength","filter","limit","autoSelect","comparator","trimValue","$get","$typeahead","parentScope","$resetMatches","$window","$rootScope","$tooltip","$$rAF","$timeout","$matches","config","$$postDigest","$scope","activate","$activeIndex","select","index","$select","evt","matches","$isVisible","safeDigest","update","$render","$emit","isDefined","onSelect","$setViewValue","length","isFunction","equals","$onMouseDown","preventDefault","stopPropagation","clientTop","active","offsetTop","clientBottom","highWatermark","scrollTop","Math","lowWatermark","clientHeight","keyCode","$$updateScrollTop","$digest","show","isUndefined","$element","hide","$onKeyDown","$$phase","$root","TypeaheadFactory","array","$filter","expression","directive","results","postLink","attr","restrict","require","falseValueRegExp","bsKey","charAt","toUpperCase","slice","test","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$watchCollection","values","watchOptions","$match","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","$viewValue","substring","displayValue","$formatters","push","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","label","destroy","$on","target","placement","titleTemplate","title","type","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","promise","$bsCompiler","split","clearTimeout","hoverState","onShow","leaveAnimateCallback","destroyTipElement","onHide","_tipToHide","triggers","nodeName","on","isTouch","toggle","enter","unbindTriggerEvents","$onFocusElementMouseDown","off","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","timeout","$isShown","tipScope","$destroy","$options","$promise","$new","toLowerCase","$id","map","parseFloat","$sce","trustAsHtml","$setEnabled","id","$hide","setEnabled","isEnabled","compileData","tipContainer","init","bindTriggerEvents","isElement","focus","onBeforeShow","after","parent","lastChild","display","visibility","clonedElement","addClass","version","prepend","$applyPlacement","minor","$animate","enterAnimateCallback","_blur","onBeforeHide","blur","leave","setViewport","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","query","querySelectorAll","isNative","tooltip","transclusion","$eval","dataTarget","hasOwnProperty","$observe","bsTooltip","bsShow","match","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","collapse","moveStart","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","$isBuilt","keep","Date","setHours","setMinutes","setSeconds","copy","midIndex","hours","disabled","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","targetEl","triggerHandler","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","_show","_hide","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","_tabsHash","_addTabControl","navClass","activeClass","$attrs","control","$activeClass","self","$panes","$activePaneChangeListeners","$push","pane","$active","$navClass","$remove","activeIndex","indexOf","splice","$setActive","name","fn","$pane","$onKeyPress","e","$isActive","$index","$tab","transclude","ngModelCtrl","bsTabsCtrl","tabKey","addTabControl","controllers","attrs","bsActivePane","parsedBsActivePane","assign","$parse","render","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","a","b","$apply","isArray","$getIndex","anchor","anchorCandidate","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","dataMultiple","inputEl","addEventListener","join","$isEmpty","spies","$document","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","content","$popover","PopoverFactory","requestAnimationFrame","bsPopover","popover","routeAttr","$navbar","liElements","li","liElement","pattern","path","RegExp","regexp","backdrop","size","zIndex","bodyElement","backdropCount","dialogBaseZindex","validSizes","ModalFactory","$modal","unbindBackdropEvents","modalElement","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","backdropBaseZindex","$show","bottom","destroyModalElement","z-index","defaultPrevented","customClass","backdropAnimation","bindBackdropEvents","which","lg","sm","modalClass","bsModal","modal","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","call","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","prototype","noop","indexOfCaseInsensitive","len","str","toString","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","today","getDateForAttribute","substr","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","service","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","hasClass","tAttrs","nextSibling","nodeType","parentNode","removeChild","dropdown","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$hasToday","$picker","$selectPane","$views","$mode","$toggleMode","$setToday","$clear","setMode","updateDisabledDates","disabledDateRanges","dateRanges","$setDisabledEl","mode","pristine","$updateSelected","built","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","shiftKey","altKey","onKeyDown","datepickerViews","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isTodayDisabled","isSelected","getDay","months","lastDate","actualMonth","firstYear","years","actualYear","Array","setYear","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$viewChangeListeners","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","actionEventHandler","bsCollapseToggle","bind","$registerTarget","action","toggleEvent","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","checked","toggleClass","v","AsideFactory","$aside","bsAside","aside","duration","dismissable","AlertFactory","$alert","bsAlert","alert","AffixFactory","inlineStyles","$affix","setWidth","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","pageYOffset","offsetBottom","elementHeight","initialAffixTop","affixed","unpin","$parseOffsets","affix","offsetUnpin","$onResize","initialTop","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"CAOA,SCIAA,EAAAA,EAAAC,GDHE,YAsgGA,SE/7FFC,GAAAC,EAAAD,EAAAA,EAAAA,EAAAA,EAAAA,GFygGI,QEh6FJE,GAAAC,EAAAA,GFi6FM,MEh6FNC,SAAAC,SAAAC,GAAAA,GAAAA,iBAAAA,IFm6FI,QAASC,GAAcC,GACrB,MAAIC,GAAcD,GAAkBC,EAAcD,GGzlGxDE,EAAAF,GAAAG,EAAAC,IAAAJ,GAIAK,MAAAA,IACAC,KAAAA,SAAAR,GACAS,MAAAA,GAAAC,OHqgGIC,KE/7FJC,QAAAV,SAAAP,GACAkB,EAAAA,UAAAlB,UAAAkB,KAAAA,EAAAA,YACAC,QAAAC,KAAAA,oGACApB,EAAAqB,YAAAA,EAAAA,SACArB,EAAAsB,SAAAA,GAEA,IAAAC,GAAAA,EAAAvB,YAKAwB,EAAAC,EAAAJ,UAAAK,GACAR,EAAAS,EAAAD,WACAL,EAAAO,EAAAA,aF47FUP,EE37FVrB,EAAAqB,YACAA,EAAAQ,EAAAD,WF47FUE,EAAoB9B,EAAQ8B,mBAAqBN,QAAQO,SACzDR,EAAmBvB,EAAQuB,gBE96FrC,IAVAC,QAAAQ,QAAAX,EAAAC,SAAAA,EAAAA,GAEAf,QAAAoB,SAAAD,GACAL,EAAAY,GAAAA,EAAAC,IAAA3B,GAEAc,EAAAY,GAAAA,EAAA3B,OAAAP,KF27FMyB,QAAQQ,OAAOX,EAASC,GEt7F9BtB,EACAqB,EAAAY,UAAAE,EAAAC,KAAAA,OAEA,CAAA,IAAAC,EFy7FQ,KAAM,IAAIC,OAAM,6CAFhBjB,GEt7FRkB,UAAAjC,EAAAP,GFy8FM,MEl8FNC,GAAAwC,gBAEAnB,EAAAY,UAAAE,EAAAC,KAAAf,EAAAY,UAAA3B,EAAAN,EAAAwC,iBAAAA,KACArC,SAAAsC,GACA,GAAAJ,GAAAb,QAAApB,QAAAqC,EAAA,GAKA,OAJAF,GAAAG,oBAAAL,EAAA,IAAAM,WAAAN,WACAM,KAAAA,EAAA,IAGA3C,EAAAD,GAAAA,aFi7FUC,EAAQwC,kBE36FlBnB,EAAAe,UAAAf,EAAAlB,KAAAkB,EAAAC,UAAAA,EAAAA,EAAAA,mBAAAA,KAAAA,SAAAA,GAEA,GAAAf,GAAAuB,QAAAA,QAAAR,EAAAW,IACAjC,EAAAuC,EAAA,sBAAAF,EAAA,IAAAM,WAAA,WAAAC,KAAAH,EAAA,GF66FU,OE56FVlC,GAAAA,aAAAsC,EAAAC,OAAAC,SF46FiBV,EAAW,GAAGW,aEr6F/Bb,EAAAC,IAAAf,GAAAlB,KAAA,SAAAmB,GFy6FQ,GEx6FRA,GAAAA,EAAAA,EAAAA,UACAlB,GAAAA,OACA6C,EAAA1C,EAAA2C,QAAAA,cAAAA,kBF06FQ,IEt6FR9C,GAAAc,QAAAd,QAAA,SAAAwC,KAAArC,EAAA4C,QAAAC,WFu6FYC,EEt6FZC,EAAAA,EFu6FQ,QACEhC,OEt6FVE,EFu6FUpB,QAASA,EACT6C,KEr6FV,SAAAzB,GFu6FY,GADAF,EEp6FZlB,OAAA8C,EACA9C,EAAAmD,CAEA,GAAAnC,GAAAA,EAAAF,EAAAI,GAAA,EACA4B,IFo6FgB1B,QAAQQ,OAAOsB,EAAWE,SAAUlC,EEh6FpD,IAAAmC,GAAAJ,QAAAK,SAAAC,GAAAA,EAAAA,GFm6FcvD,GAAQW,KAAK,0BAA2B0C,GACxCrD,EAAQmD,WAAWxC,KAAK,0BAA2B0C,GAC/CrC,IACF8B,EAAM9B,GAAgBqC,GAG1B,MAAOJ,GAAOO,MAAM,KAAMD,eAQlC,IAAInD,MAllGNqD,ECIFC,SAAA,KAAA,QAAA,YAAA,WAAA,cAAA,kBDHEtC,QCIFuC,OAAA,4BAAA,yBAAA,wCAAAC,SAAA,aAAA,WDHI,GCIJC,GAAAjD,KAAAJ,UACAsD,UAAA,UACAtB,YAAA,YACAuB,YAAA,aACAC,UAAA,cACAC,YAAA,+BACAC,QAAA,QACAC,WAAAA,EACAC,UAAAA,EACAC,MAAAA,EDHMN,MAAO,ECMbnD,UAAA0D,EAEAL,OAAA,gBDLMC,MCONK,EDNMJ,YCSNvE,EDRMwE,WCUNG,GDTMF,WCUNG,EDRI5D,MCWJkC,MAAA2B,UAAAA,aAAA,WAAA,QAAA,WAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GDVM,QCWNhC,GAAAiC,EAAAA,EAAAA,GDVQ,GCWRjC,MDVYlD,EAAUwB,QAAQQ,UAAWpB,EAAUwE,ECYnDlC,GAAA2B,EAAAA,EAAAA,EAEA3B,IAAAA,GAAAkC,EAAAlC,MACAA,EAAAmC,EAAAC,MDXQpC,GCYRyB,cAAAY,WDXUrC,EAAMiC,YACNjC,EAAMsC,aAAexF,EAAQuE,WAAa,EAAI,IAEhDrB,ECaRA,gBDZQA,ECaRyB,UAAAc,SAAAC,GDZUxC,EAAMmC,aAAa,WACjBV,EAAWY,SAASG,MAGxBxC,EAAMyC,QAAU,SAASD,EAAOE,GCkBxCjB,EAAAA,aAAA,WACAzB,EAAAiC,OAAAU,MDdQ3C,EAAM4C,WAAa,WCqB3BC,MAAAA,GAAA7C,cDlBQyB,EAAWqB,OAAS,SAASH,GCsBrClB,EAAAA,SAAAY,EACArC,EAAAsC,cAAAE,EAAAA,SDpBYxC,EAAMsC,aAAexF,EAAQuE,WAAa,EAAI,ICwB1DwB,EAAAL,GACAT,EAAAvD,EAAAwB,kBDpBQyB,ECuBRzD,SAAA+E,SAAAA,GACA/C,EAAA2B,aAAAA,GDrBQF,ECwBRuB,OAAAlG,SAAAH,GACA,GAAAsG,KAAA3E,EAAA,CDvBU,GCwBVxB,GAAAoG,EAAAA,SAAAV,GAAAf,KDvBUzD,GAAWmF,cAAc3E,GACzBR,EAAW+E,UC4BrBtB,EAAAA,gBACAC,GAAAR,EAAAlD,UD1BUgC,EC2BVgD,MAAAhD,EAAAiC,YAAAmB,UAAAA,EAAAA,EAAAA,GD1Bc9E,QAAQ2E,UAAUnG,EAAQoG,WAAa5E,QAAQ+E,WAAWvG,EAAQoG,WC6BhFpG,EAAAkD,SAAAiC,EAAAmB,EAAA9E,KDzBQmD,EC6BRe,WAAAA,WACA,MAAAA,GAAAxC,WAAAiC,EAGAO,EAAAA,SAAAA,QAAAA,QAAAA,SAAAA,EAAAA,aAAAA,EAAAA,WAAAA,QAAAA,EAAAA,YAFAlE,EAAAgF,SAAAtD,QAKAyB,EAAA8B,UAAAA,SAAA/E,GAEAkE,GAAAc,EACAd,KAAAe,EAAAA,EAAAA,SAAAA,OAAAA,MD9BgBnF,QAAQgF,OAAOtD,EAAMiC,SAASO,GAAOhE,MAAOA,KCkC5D,MAAAgE,ID9BQf,ECgCRiC,aAAAC,SAAAC,GD/BUlB,ECgCVc,iBD/BUd,ECgCVe,mBD9BQhC,ECkCRoC,kBAAAC,SAAAA,EAAAJ,GDjCU,GCkCV3C,EAAAA,IAAAgD,EAAAC,EAAA3D,SAAAU,OAAAgD,CDjCY,GAAIJ,GCkChBE,EAAAA,SAAAI,GAEAlD,EAAAgD,EAAAA,UDlCgBF,EAAeF,EAAOC,UAAYD,EAAOO,aACzCJ,EAAgB/C,EAAUgD,UAC1BE,EAAelD,EAAUgD,UAAYhD,EAAUmD,YCqC/DzC,IAAAqC,GAAApB,EAAAA,EACA3B,EAAAgD,UAAArB,KAAAyB,IAAAA,EAAApD,EAAAgD,UAAAhD,EAAAmD,cAGAzC,EAAAmB,IACAF,EAAAc,UAAAA,KDlCQ/B,ECwCRA,WAAAzB,SAAAsC,GDvCe,aCyCf6B,KAAAA,EAAAA,YACAnE,EAAAsC,cAAAA,KAAAA,EAAAA,SAAAA,KAAAA,EAAAA,eDxCYI,EAAIc,iBC0ChBxD,EAAAA,mBAEAsC,KAAAtC,EAAAsC,SAAAtC,EAAAiC,SAAAmB,ODxCY3B,EAAWc,OAAOvC,EAAMsC,cC4CpC8B,KAAAA,EAAAA,SAAA3C,EAAAA,aAAAzB,EACAA,EAAAqE,eD1CqC,KAAhB3B,EAAIyB,SAAkBnE,EAAMsC,aAAetC,EAAMiC,SAASmB,OAAS,EC+CxFkB,EAAAA,eACAA,QAAAC,YAAAvE,EAAAsC,gBACAgC,EAAAA,aAAAA,GD5CU7C,ECgDVA,kBAAAA,EAAA+C,SAAA,GAAAxE,EAAAsC,cD/CUtC,ECgDVyB,WD9CQ,IAAI6C,GCgDZ7C,EAAAvE,ID/CQuE,GAAW6C,KAAO,WAChBA,IACAtC,ECgDV,WD/CgBP,EAAW+C,WCkD3BC,EAAAhD,SAAAgD,GAAAA,YAAAA,EAAAA,cACAhD,EAAAT,UACAS,GAAA+C,EAAA/C,GAAAA,UAAA+C,EAAAE,cD9Ca,GAAG,GAER,ICiDRjD,GAAAA,EAAAY,IDtCQ,OAVAZ,GAAWgD,KAAO,WCkD1BA,EAAAA,UAAAA,EAAAA,SAAAA,IAAAA,YAAAA,EAAAA,cDhDc3H,EAAQkE,UCmDtBS,GAAAA,EAAAA,IAAAA,UAAAA,EAAAA,YAMAoB,EAAAA,YAEA7C,EAAA2E,SAAAC,IAIAC,KDvDepD,EC+Df,QAAAoB,GAAAiC,GACA9E,EAAA8E,SAAAxG,EAAA+E,OAAAyB,EAAA7H,MAAA0H,SAAA3E,EAAAqE,UD1DM,MADAQ,GC6DNE,SAAArH,ED5DamH,MAER1D,OC6DL,iBAAA2D,UAAAE,SAAA1D,GD5DI,MAAO,UAASwD,EAAOE,EAAY1D,GACjC,MC+DN2D,IAAA3G,QAAA+E,WAAAyB,EAAA7H,MAEAS,EAAA+D,KAAAA,SAAA/D,GAEA,MAAAqH,GAAA,UAAAG,EAAAF,EAAA1D,KAGAyD,EAAAI,UAAAnF,EAAA9C,EAAAkI,OD/DOH,UCuEPnI,eAAAA,UAAAA,SAAAA,KAAAA,aAAAA,gBAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GDtEI,GAAIY,GCuERsC,EAAAA,QDtEI,QACEqF,SCuEN9G,MDtEM+G,QCuENhH,UDtEMyB,KAAM,SAAkBC,EAAO9C,EAASkI,EAAMpH,GC0EpDd,EAAAqI,IAAAA,SACAjH,IAAAA,IACA0B,MAAA1B,EAIAA,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAA,YAAA,YAAAI,QAAAA,UAAAA,WAAAA,OAAAA,YAAAA,SAAAA,QAAAA,YAAAA,eAAAA,aAAAA,aAAAA,aAAAA,KAAAA,cAAAA,eAAAA,SAAAA,GACA6G,QAAAvC,UAAAtE,EAAA8G,MAAAC,EAAAA,GAAA/G,EAAAgH,KDzEQ,IC2ER7I,GAAAkD,eD1EQ1B,SAAQC,SAAU,OAAQ,YAAa,YAAa,UAAY,SAASI,GACnEL,QAAQ2E,UAAUmC,EAAKzG,KAAS4G,EAAiBK,KAAKR,EAAKzG,MAAO7B,EAAQ6B,IAAO,KCiF/FL,QAAA6C,SAAA7C,eAAAxB,SAAAqE,eAAAA,SAAAzD,YAAAyD,SAAAA,GACA,GAAAC,GAAAtE,KAAAsE,EAAAA,OAAA1D,GAAAA,cAAA0D,EAAAA,MAAAA,EACAE,SAAAA,UAAAxE,EAAAwE,MAEAuE,EAAAA,GAAAT,EAAAS,MAAAA,EAAAA,OAGA3I,EAAAoE,KAAAuE,iBAAA3I,EAAAoE,KAAAA,eAAAA,MD/EQ,IAAIH,GAAS7C,QAAQ2E,UAAUnG,EAAQqE,QAAUrE,EAAQqE,OAASzD,EAASyD,OCiFnFC,EAAAyE,EAAAA,OAAAnI,EAAA0D,MACA0E,EAAAA,EAAAC,YAAAF,EAAAA,WAGAG,EAAAvE,EAAAA,SAGA3E,KAEA+I,GAAAI,MAAAH,EAAAA,cACA9F,IAAAkG,GAAAD,IAAAA,IDnFY7E,ICsFZ4E,GAAAG,cAAAA,EDrFQ,IAAIL,GCsFZ/C,EAAAA,GDrFYiD,EAAYvE,EAAWvE,EAASc,EAAYlB,EAChD,IAAIA,EAAQsJ,aAAc,CACxB,GAAIH,GAAiBH,EAAcO,OAAO,GAAG1G,QAAQ,OAAQ,IAAIA,QAAQ,UAAW,IAAIM,MCyFlGD,GAAAsG,iBAAAC,EAAAC,SAAAC,EAAAA,GAEAzG,EAAA0G,SAAAF,EAAAA,GAAAA,KAAAA,SAAAA,GACAV,EAAAa,OAAAA,GAIA3I,EAAA4I,cDxFQ5G,EC4FRsG,OAAAH,EAAA/C,QAAAhC,SAAA+E,EAAAA,GD3FUnG,EC4FVgG,YAAAG,ED3FUL,EC6FV/C,SAAAA,EAAAA,GAAAA,KAAAA,SAAAA,GD5FY,MAAIjG,GAAQ8J,aAAeT,EAAO/C,QAAUoD,EAASpD,OAAS,MAC5DpF,GAAWmF,cAAcnF,EAAW6I,WAAWC,UAAU,EAAG9I,EAAW6I,WAAWzD,OAAS,KCqGzG2D,EAAAA,OAAA3F,IAAA+E,EAAAA,EAAAR,MAAA,EAAAvE,IACA4E,EAAAe,OAAAA,ODjGY/I,GAAW+E,eAGf/E,EAAWgJ,YAAYC,KAAK,SAASC,GCsG7C,GAAAH,GAAAjB,EAAAiB,aAAAG,EDpGU,OAAIH,GCwGdhE,EAGAzE,QAAApB,UAAAgK,IAAA,gBAAAA,GDvGmBA,EC0GnBC,KDtGQnJ,ECwGRQ,QAAA2I,WACA,GAAAC,EAAAlK,SAAAmK,EAAAA,YACA,MAAAnK,GAAAoK,IAAAC,GAEArK,IAAAA,GAAAsK,EAAAA,UAAAJ,EAAAK,aDvGcN,EAAqB,KAAV3E,EAAewD,EAAU5D,OAAOH,SAASO,GAAOkF,MAAQ1J,EAAW6I,UC2G5F7G,GAAA1B,QAAAkC,SAAA2G,GAAArB,EAAAiB,aAAAI,GAAAA,CACA,IAAAnB,GAAAA,EAAAA,EAAA2B,WAAAA,QAAAA,iBAAAA,IAAAA,GACA7K,EAAAA,EAAA,GAAAuK,eACArB,EAAAA,EAAA,GAAAuB,YDzGUrK,GAAQoK,IAAIxK,EAAQyE,aAAc,EAAQ/C,EAAQA,EAAMyB,QACxD/C,EAAQ,GAAGsK,kBAAkBJ,EAAIK,IAEnCzH,EAAM4H,IAAI,WAAY,WIjP9BrK,GAAAyI,EAAA2B,UAIAjK,EAAAI,KACAH,EAAA,YJoPEW,QI/OFuJ,OAAA,0BAAA,sBAAA,sCAAA/G,SAAA,WAAA,WJgPI,GI/OJgH,GAAAhK,KAAAJ,UACAb,UAAAA,UACAQ,YAAA,GACA0K,YAAAA,UACAlH,YAAA,UACAG,WAAA,EACAtB,QAAA,EACA4E,UAAA,MACA0D,YAAA,2BACAC,SAAA,GACAhH,eAAA,EACAiH,QAAAA,cACAC,UAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,MAAAA,GJgPML,KI/ONM,GJgPMtH,MI/ONuH,EJgPMN,WAAW,EACXC,WAAW,EI7OjBrK,yBAAA,EAEAuK,0BAAA,EACAC,UACAC,SAAAjK,OAEAkK,QAAAC,GJ+OI3K,MIzOJ0D,MAAAkH,UAAA5G,aAAA6G,cAAA5K,KAAAjB,iBAAAA,QAAAA,WAAAA,OAAAA,aAAAA,QAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GJ6OM,QIxON8L,GAAA3H,EAAA2H,GJkYQ,QIxKRC,KACAC,EAAAA,MAAAA,EAAAnM,YAAA,QAAAmF,GACAxD,QAAAxB,UAAAmE,EAAAnE,SAAA2H,QAAApB,WAAAvG,EAAAiM,SACAjM,EAAAgF,OAAAA,GJiNQ,QIpJRkH,KAQAlH,GJ6IU9B,EAAMgD,MAAMlG,EAAQH,YAAc,QAASmF,GIjJrDmH,QAAAA,UAAAA,EAAAA,SAAAA,QAAAA,WAAAA,EAAAA,SJmJYnM,EAAQoM,OAAOpH,GI/I3BA,IAAAqH,EAAAzG,CACA,GAAAA,GAAA,UAAA5F,EAAA+D,QAAA6B,MAAAc,GAAAA,GAAAA,MACAyF,MJmOQ,QIzHR/L,KJ0HU,GIzHVkM,GAAAC,EAAAxI,QAAA+H,MAAA/H,IJ0HUvC,SIzHVpB,QAAAoM,EAAAC,SAAA1I,GJ0H4B,UAAZA,GAAmC,gBAAZA,EACzB3D,EAAQoM,GAAGzI,EAASiB,EAAS0H,QACR,WAAZ3I,IACT3D,EAAQoM,GAAe,UAAZzI,EAAsB,aAAe,QAASiB,EAAS2H,OIvHhFvM,EAAAwM,GAAAA,UAAAA,EAAAA,aAAAA,OAAAA,EAAAA,OACA5M,WAAAsM,GAAA,UAAAR,GACA1L,EAAAkM,GAAAA,EAAAhG,aAAA,YAAAtB,EAAA6H,6BJ6HQ,QIxHRzM,KJ0HU,IIxHV,GADAA,GAAA0M,EAAA/I,QAAA+H,MAAA,KACAS,EAAAA,EAAAjG,OAAAyG,KAAAhJ,CJyHY,GIxHZ3D,GAAA0M,EAAAL,EJyH4B,WAAZ1I,GAAmC,gBAAZA,EACzB3D,EAAQ0M,IAAI/I,EAASiB,EAAS0H,QACT,WAAZ3I,IACT3D,EAAQ0M,IAAgB,UAAZ/I,EAAsB,aAAe,QAASiB,EAAS2H,OItHjFvM,EAAA4M,IAAAA,UAAAA,EAAAA,aAAAA,OAAAA,EAAAA,OACAjJ,WAAA/D,GAAA,UAAA+D,GACAkJ,EAAAT,IAAAC,EAAAzH,aAAAkI,YAAAA,EAAAA,4BAMA,QAAAC,KACA,UAAAnN,EAAA+D,QACAkJ,EAAAH,GAAAA,QAAA9H,EAAAA,UAEA5E,EAAA0M,GAAAA,QAAA9H,EAAAA,eAIA,QAAAoI,KACAC,UAAArN,EAAAqN,QAGAnI,EAAA4H,IAAA,QAAA9H,EAAAkI,UAKAI,EAAAd,IAAA,QAAAxH,EAAA2C,eAMA,QAAA4F,KACArI,EAAAkI,WACAH,EAAAH,GAAAA,QAAAU,GACAF,EAAAR,GAAAA,QAAA9H,EAAAA,MACAoI,GAAA,GJ+Ga,GAAG,GI3GhB,QAAAI,KACAC,IJ8GYR,EAAWH,IAAI,QAASU,GIzGpCF,EAAAI,IAAAA,QAAAhG,EAAAA,MACAA,GAAA1H,GJ6GQ,QIxGR2N,GAAAC,GACAH,EAAAI,kBJ0GQ,QInGRC,GAAAA,GJoGUpG,EAAWA,GAAa1H,EAAQ+K,QAAU3K,CIhGpD,IAAAyN,GAAAE,EAAAA,GAEAF,EAAAA,SAAArM,EAAAA,QAAAuM,EAAAJ,EAAAA,wBAAAK,IJmGU,KAAK,GAAIF,KAAKH,GACZE,EAAKC,GAAKH,EAAOG,EIlG7B,QAAAG,EAAAF,QAAAG,EAAA1M,QAAAQ,UAAA6L,GAAAM,MAAAA,EAAAC,MAAAC,EAAAA,KACAC,OAAAA,EAAAA,OAAAA,EAAAA,MACA,IAAAC,GAAAA,GAAAR,IAAAA,EAAAC,KAAAA,GAAAG,EAAAC,OAAAC,GAEAC,GJ2GYA,OAAQE,EAASC,EAASC,gBAAgBzH,WAAawH,EAASE,KAAK1H,UAAYS,EAASkH,KAAK,cAAgB,GIvG3HR,EAAAA,GACAL,MAAAjC,EAAAd,gBAAA6D,YAEAb,OAAAlC,EAAAgD,aACA,IJyGU,OIxGVV,SAAAA,UAAAA,EAAAA,EAAAA,EAAAA,GJ0GQ,QIxGRF,GAAAa,EAAAhB,EAAAA,EAAAA,GJyGU,GAAIK,GIvGdtC,EAAAd,EAAAc,MAAA,IJyGU,QAAQA,EAAM,IIxGxB,IAAA,QACAsC,GACAH,IAAAc,EAAAd,IAAAc,EAAAf,OAAAA,EAAAA,EAAAA,EACAE,KAAAa,EAAAb,KAAAa,EAAAhB,MAEA,MACA,KAAA,SACAK,GACAH,IAAAc,EAAAd,IAAAc,EAAAf,OACAE,KAAAa,EAAAb,KAAAc,EAAAA,MAAAA,EAAAA,EAAAA,EAEA,MACA,KAAA,OACAZ,GACAH,IAAAc,EAAAd,IAAAgB,EAAAA,OAAAA,EAAAA,EAAAA,EACAf,KAAAa,EAAAb,KAAAa,EAEA,MAGA,SACAX,GJ2GcH,IAAKc,EAASd,IAAMgB,EIvGlCnD,KAAAiD,EAAAb,KAAApC,EAAAiC,MAAA,EAAAiB,EAAA,GJ4GU,IIxGVlD,EAAA,GJyGY,MAAOsC,EAET,IIzGVF,QAAAE,EAAAA,IAAAW,WAAAA,EAAAb,GJ0GY,OIzGZpC,EAAA,IJ0Ga,IAAK,OIzGlBsC,EAAAF,KAAAa,EAAAb,IACA,MJ4Ga,KI1Gb,QACAE,EAAAtC,KAAAiD,EAAAb,KAAAa,EAAAhB,MAAAiB,MAKAZ,IAAAW,SAAAd,EAAAc,IAAAd,UAAAA,EAAAA,GJ4GY,OI3GZnC,EAAA,IJ4Ga,IAAK,MI3GlBsC,EAAAH,IAAAc,EAAAd,IAAAgB,EAAAF,EAAAf,MACA,MJ8Ga,KAAK,SI1GlBI,EAAAA,IAAAA,EAAAA,IAUA,MAAAc,GJ0GQ,QItGRC,GAAAD,EAAAA,GAEAd,GAAAA,GAAAH,EAAAA,GACAG,EAAAF,EAAAE,YAIAD,EAAAiB,EAAAA,aACAC,EAAAC,SAAAC,EAAAA,IAAAA,EAAAA,cAAAA,IACAtC,EAAAuC,SAAAA,EAAAA,IAAAA,EAAAA,eAAAA,GJmGcL,OIlGdlB,KAAAsB,EAAAtB,GJmGckB,MIlGdjB,KAAAqB,EAAArB,GJmGUE,EIlGVqB,IAAArB,EAAAH,IAAAyB,EJmGUtB,EAAOF,KAAOE,EAAOF,KAAOgB,EAC5Bf,EAAWiB,UAAUO,EAAKnO,QAAQQ,QAChCqN,MIlGZjB,SAAAmB,GAGAP,EAAAA,KACAC,IAAAA,KAAAA,MAAAU,EAAAC,KAAAA,KAEA5E,KAAAA,KAAAA,MAAAuE,EAAAN,MAAAA,KACAb,MAAAH,OAOAG,GAAAyB,EAEA,IAAAC,GAAAH,EAAAI,YACA3B,EAAA0B,EAAA5B,YAKAC,IAJA,QJ0FcnD,GI1FdiE,IAAAjB,IACAI,EAAAH,IAAAA,EAAAA,IAAAA,EAAAA,IAGAE,8CAAAC,KAAAA,GAAAD,CAEA,GAAA2B,GAAAD,EAAA7E,EAAAoD,EAAAY,EAAAC,EAUA,IATAa,EAAAE,KACA5B,EAAA6B,MAAAA,EAAAD,KAGAE,EAAAA,KAAAD,EAAAA,IJyFU9B,EAAWiB,UAAUO,EAAKvB,GIpFpC,wBAAAyB,KAAA7E,GAAA+D,CACA,GAAAe,GAAAA,aAAAA,KAAAA,GAAA7B,EAAA+B,EAAA,EAAAF,EAAA5B,KAAAH,EAAAiB,EAAA,EAAAc,EAAA7B,IAAAD,EAAAiB,EAAAf,EAAA8B,EAAA,cAAA,cJwFYE,GAAaD,EAAYN,EAAIQ,GAAsBH,KAGvD,QIvFRI,GAAA1C,EAAA1I,EAAAqL,EAAAA,GAEA,GAAAP,IACA7B,IAAAqC,EACApC,KAAAqC,EJwFU,KItFVT,EAAA7B,UAAAmC,MAAAA,EJuFU,IAAII,GItFdD,EAAAA,UAAAH,EAAAA,SAAAA,SAAAA,EACAN,EAAAM,EAAAnC,EAAAmC,UJuFU,IAAI,aAAatH,KAAKkC,GAAY,CAChC,GAAIsF,GItFhBvB,EAAAd,IAAAuC,EAAAJ,EAAA9B,OACAmC,EAAA1B,EAAAb,IAAAsC,EAAAA,EAAAA,OAAAA,CACAE,GAAAA,EAAAF,IACAV,EAAAW,IAAAA,EAAAL,IAAAA,EACAlC,EAAAkC,EAAAK,IAAAA,EAAAA,SJuFcX,EItFd7B,IAAAyC,EAAAN,IAAAA,EAAApC,OAAAuC,OJwFiB,CACL,GAAIE,GAAiB1B,EAASb,KAAOsC,EIpFjDE,EAAAZ,EAAAA,KAAAA,EAAAA,CJsFgBW,GAAiBL,EAAmBlC,KInFpD4B,EAAAI,KAAAA,EAAAS,KAAAC,EACArO,EAAA6N,EAAAX,QAEAoB,EAAArB,KAAAoB,EAAA1C,KAAAkC,EAAAO,MAAAA,GAMA5E,MAAAA,GJkFQ,QI/ER/L,GAAAoL,EAAAuF,EAAAC,GJgFU,GI/EVrD,GAAAA,EAAAA,yBAAAA,EAAAA,GJgFUsD,GAAOrB,IAAIoB,EAAe,OAAS,MAAO,IAAM,EAAId,EAAQa,GAAa,KAAKnB,IAAIoB,EAAe,MAAQ,OAAQ,IAEnH,QI9ERzD,KJ+EUpB,aAAa+E,GACT9L,EAAS+L,UAA2B,OAAf9D,II5EnC+D,EAAA5F,WACA4F,IJ+EgBhR,EAAQkE,UI3ExB+I,KJ+Ec+D,IACFA,EAASC,WI1ErBD,EAAAhM,MAMAiI,IAEA/J,EAAA2E,SJuEYoF,EAAajI,EAAS0C,SAAW,MA7gBrC,GIxOR1H,MAAAwH,EAAAsE,EAAAoF,SAAA1P,QAAAQ,UAAApB,EAAAwE,GAAAuC,EAAAmE,EAAAqF,SAAAtF,EAAA5K,QAAAjB,GJ2OYkD,EI3OZ8B,EAAAM,OAAAtF,EAAAkD,OAAAlD,EAAAkD,MAAAkO,QAAArM,EAAAqM,OJ4OY7E,EAAWnM,EAAQ,GAAGmM,SAAS8E,aItO3CrM,IAAAA,EAAAsM,OAAAtR,QAAAI,SAAAkI,EAAAnE,OAAA,CAGA,GAAAnE,GAAAkL,EAAA/G,MAAA2H,MAAA,KAAAyF,IAAAC,WACAtO,GAAAgI,MAAAuG,EAAAC,OAAA1R,GJsOYwH,KAAMsE,EAAM,GIlOxB5I,KAAAyO,EAAAA,IACAzO,EAAAmC,GJqOQL,EAASsM,IAAMtR,EAAQ4R,IAAMxR,EAAQkI,KAAK,OAAS,GAC/CtI,EAAQkL,QIlOpBhI,EAAA2O,MAAAJ,EAAAC,YAAA1R,EAAAkL,QJqOQhI,EInOR8B,YAAA2C,SAAAA,GJoOUzE,EAAMmC,aAAa,WACjBL,EAAS8M,WAAWC,MAGxB7O,EInOR8B,MAAAwC,WJoOUtE,EAAMmC,aAAa,WACjBL,EAAS2C,UAGbzE,EInOR8B,MAAA0H,WJoOUxJ,EAAMmC,aAAa,WACjBL,EAASwC,UI7NrBtE,EAAA8I,QAAAA,WAGA9I,EAAA8O,aAAAA,WACA/E,EAAAA,YAGArB,EAAAzL,SAAA+C,EAAAnC,UAAAA,CJ+NQ,II9NRiR,GACAhN,EJ+NYgN,EI5NZhN,EAGAiN,EACAjS,CJ4NQ4L,GI3NRpE,KAAAxH,SAAAmE,GJ4NU6N,EI3NVhS,EJ4NUgF,EAASkN,SAEXlN,EIpNRhF,KAAAiE,WACAgO,EAAAA,OAAA7R,QAAAA,SAAAA,EAAAA,SJqNYJ,EIpNZmE,OACA8N,KAAAA,EAAAjS,MJqNc2H,KIpNd3H,EAAAA,QAKAmS,SAAAA,EAAAA,UAGAF,EAAAlH,EACAA,QAAAvJ,UAAA4Q,EAAApS,WJiNYiS,EAAejS,EAAQiE,UI7MnCjE,EAAAiE,YACAf,EAAAmC,EAAArF,EAAAiE,YJgNUkO,IACInS,EI9Md+K,SJ+MY/K,EI9MZgF,OAAAwC,QAAAA,UAAAA,EAAAA,QAAAA,EAAAA,OAAAA,EAAAA,EAAAA,SJgNcxH,EAAQwH,MACVtE,EAAMmC,aAAa,WACO,UAApBrF,EAAQ+D,QI3M1BiB,EAAA6F,GAAAwH,QAMAlG,EAAAA,UJ6MQnH,EInMRgH,QAAA,WACAY,IJoMUT,IACAjJ,EAAM+N,YAERjM,EIlMRgH,MAAAA,WAKAhH,MJ8LU+G,cIlMV5H,GJmMU6H,EAAa,KI/LvBhH,EAAAwC,OAAAxH,EAAAmE,MAAAqD,UAIAsJ,EAAAtP,WAAA2E,WACAmM,OAAAtS,GAAAgF,EAAAA,QJgMahF,EAAQmE,MAAMqD,OIpM3BxH,EAAAqL,QJsMQrG,EI/LRuN,KAAAA,WACA,GAAAvS,EAAAiE,YAAAe,EAAA+L,SAAA,CJgMU7N,EI/LVsP,MAAAP,EAAAA,YAAAA,eAAAA,GACAzQ,QAAAyQ,UAAAQ,EAAAA,eAAAjR,QAAA+E,WAAAvG,EAAAsS,eJgMYtS,EI/LZuS,aAAAnS,EJiMU,II/LVmS,GJgMcA,CACAvS,GI/LdiE,WACAuO,EAAAP,EJiMcM,EIhMdA,EAAAnS,GAAAA,UJgMsBoB,QAAQpB,QAAQ6R,EAAa,GAAGQ,WIzLtDzN,OAKAiJ,EAAA,KAAAC,EAAA9N,GAAAsS,GAAAvG,IJ6LU6E,EI7LV2B,EAAArN,OAAA8L,OJ8LUnE,EAAajI,EAAS0C,SAAWsK,EAAY/O,KAAK+N,EAAU,SAAS4B,EAAe1P,MI3L9F+J,EAAAjN,KAEAiO,IAAAjO,UAEAkO,KAAAlO,UAKAyP,MAAA8C,OACAA,QAAAA,QJuLYI,WItLZ,WJwLc3S,EAAQa,WAAWoM,EAAW4F,SAAS7S,EAAQa,WIpL7DmE,EAAA+L,MAAAA,EAAAA,SAAA/Q,EAAAc,YAAA,IAAAd,EAAAmL,MACApF,EAAA7C,aAAAA,EAAAA,SAAAA,EAAAA,aAGA8B,EAKAuN,EAAA/Q,MAAAsR,GJiLYN,EI/KZO,QAAA9F,GJiLUjI,EAAS+L,SAAW7N,EAAM6N,UAAW,EI9K/ChL,EAAA7C,GAEA+B,EAAA+N,kBAEAxR,QAAAyL,QAAAgG,OAAA,EJ8KYC,EI7KZjG,MAAAuC,EAAAA,EAAAA,EAAAA,GJ+KY0D,EAASvG,MAAMM,EAAYuF,EAAQD,GAAOpS,KAAKgT,GAEjDpN,EI7KV/F,GJ8KUiF,EAAM,WACAgI,IACFA,EI7KdD,KJ8KgB2F,WAAY,YAEV3S,EAAQkE,WI3K1B,UAAAlE,EAAAoL,SACAiC,EAAAA,QJ8KgBL,QItKhBhN,EAAAiM,WJ2KYoB,MASJrI,EIxKRgH,MAAAA,WJ2KU,MAFAD,cIxKVpE,GJyKUqE,EAAa,MIvKvBhM,EAAAmE,OAAAwD,EAAAA,MAAAA,UAKAmJ,EAAAzE,WAAAA,WACA,QAAArH,GAEAA,EAAAA,QAEAhF,EAAAwB,MAAA2E,OJ+JmBnB,EAAS2C,OAQpB,IAAIyL,GIlKZA,CJoKQpO,GIhKRqH,KAAAY,SAAAA,GAEAA,EAAAA,WJgKU/J,EI7JV1B,MAAAA,EAAAsR,YAAA,eAAA9N,GACAkO,QAAAA,UAAAjG,EAAAA,eAAAf,QAAAA,WAAAA,EAAAA,eJ8JYlM,EI7JZqT,aAAArO,GJ+JUoO,EAAQE,EACRjH,EAAaY,EI3JvB8D,OAAA/L,IACAe,QAAA7C,QAAAA,OAAAA,EAGAlD,EAAAkE,MAAAA,EAAA+I,GJ4JciG,EAASK,MAAMtG,GAAY9M,KAAK+L,IAGpClH,EAAS+L,SAAW7N,EAAM6N,UAAW,EACrChL,EAAW7C,GIvJrBlD,EAAAkM,UAAAA,OAAAA,GACAhJ,IAEAlD,EAAAoM,WAAApH,OAAAA,GJyJYuI,MAeJvI,EInJRA,OAAA2H,SAAAA,GJoJc/G,GACFA,EAAIc,iBIhJhBuG,EAAAA,SACAA,EAAAA,QJoJYjI,EAAS2H,SAGb3H,EAASqN,MAAQ,WI/IzBrN,GAAAwO,EAAA,IACAxT,EAAAwL,GAAAA,SJmJQxG,EI7IRiI,WAAA,SAAA8E,GAGA/R,EAAAgL,UAAAhL,GJ6IQgF,EI3IRyO,YAAAC,SAAA5K,GAEA9I,EAAAyT,SAAAjI,GJ4IQxG,EAASgO,gBAAkB,WItInC/F,GAAAA,EAAAA,CAIA,GAAA0G,GAAAA,EAAAjG,UACAkG,EAAA3G,eACA4G,EAAA5G,EAAAA,KAAA2B,EAGA5J,KAGAgG,EAAAyI,EAAA5Q,QAAA6Q,EAAA,KAAA9S,EAAAoK,WJkIUiC,EIhIV6G,SAAAA,EAAApG,UJiIU,II/HViG,GAAAI,IACA/I,EAAAA,EAAA+I,KAAAA,eJgIcF,EI/Hd5G,EAAA8G,KAAAA,eJiIU,IADA/O,EI/HVgG,UAAA+I,EAAAA,UAAAlR,EAAA7C,EAAAwL,SAAAC,UAAAzL,EAAAwL,UJgIciI,EAAW,CI7HzB,GAAAM,GAAAA,EACA/I,EAAAA,EAAAhG,EAAAqL,UJ+HgB,UI9HhBvH,KAAAiL,IAAAA,EAAAJ,OAAAlE,EAAAmE,EAAAE,OACA9I,EAAAA,EAAAnI,QAAA,SAAA,OJ+HuB,MAAMiG,KAAKiL,IAAsBJ,EAAgB1F,IAAM4F,EAAYC,EAAiB7F,MI5H3GhB,EAAA+G,EAAAD,QAAAA,MAAAlB,WAIAoB,OAAAA,KAAAC,IAAAlJ,EAAA2I,KAAAA,EAAAC,EAAAC,KACAM,EAAAF,EAAAA,QAAAjJ,OAAAA,SJ4HuB,QAAQlC,KAAKiL,IAAsBJ,EAAgBlE,MAAQmE,EAAWE,EAAiB/F,QIzH9G/I,EAAAkI,EAAArK,QAAA+C,QAAAA,SAEAZ,EAAA2C,YAAAA,GAAAA,SAAAA,GJ4HU,GAAIsM,GAAcC,EAAoBlJ,EAAW2I,EAAiBC,EAAUC,EAC5EM,GAAeF,EAAajJ,KAE9BhG,EIzHRY,SAAA,SAAAA,GACA0N,KAAAlT,EAAAA,OAAAkT,EAAAA,WACA1N,EAAAe,OJ0HYf,EAAIe,oBAGR3B,EIxHRhF,cAAAsL,SAAAA,GAAA5E,KAAAd,EAAAc,QJ0HYtG,EAAQ,GAAGkT,OIzHvB1N,EAAA5F,oBJ6HQgF,EI3HRA,yBAAA,SAAAY,GACAxF,EAAAkL,yBJ4HY1F,EAAIc,iBAEF1G,EAAQuL,0BACV3F,EAAIe,kBIvHhB2F,EAAAA,SACA9K,EAAAC,GAAAA,OJ2HYrB,EIzHZA,GAAAoM,QJuKQ,IAAIY,IAAyB,CAuM7B,OAAOpI,GAET,QAASe,GAAW7C,GI9D1BiF,EAAAA,SAAAjF,EAAA4E,OAAA5E,EAAA4E,MAAAD,SAAA3E,EAAAqE,UAGAgB,QAAAA,GAAA6L,EAAAhU,GACA8C,MAAA1B,SAAApB,SAAAA,GAAAqO,GAAA4F,iBAAAD,IJ5dM,GIzONE,GAAAtP,6BAAA9B,KAAAlD,EAAAkD,UAAAkO,WAEA3E,EAAAF,eAAAA,GAAA8E,UAAAA,EACA/D,EAAAtN,QAAAmE,QAAA3C,EAAAG,SJkwBM,OI7DN4S,OJ+DKpM,UI7DLjF,aAAAA,UAAAA,YAAAA,OAAAA,SAAAA,WAAAA,QAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GJ8DI,OACEqF,SI9DN9G,MJ+DMyB,OI9DN,EJ+DMD,KAAM,SAAkBC,EAAO9C,EAASkI,EAAMkM,GI3DpD,GAAA/L,GACAjH,GACA0B,MAAA1B,EJ8DQA,SAAQC,SAAU,WAAY,cAAe,aAAc,eAAgB,gBAAiB,YAAa,YAAa,QAAS,UAAW,OAAQ,YAAa,oBAAqB,OAAQ,cAAe,MAAQ,SAASI,GACtNL,QAAQ2E,UAAUmC,EAAKzG,MAAO7B,EAAQ6B,GAAOyG,EAAKzG,KAExD,II1DR4G,GAAA5G,eJ2DQL,SI1DRA,SAAA2E,OAAAmC,aAAA,SAAAzG,GACA7B,QAAA6B,UAAAqB,EAAAuR,KAAA/L,EAAAA,KAAAA,EAAAA,MJ2DY1I,EAAQ6B,IAAO,KIrD3BL,QAAAA,SAAA2E,eAAAuO,SAAA,eAAA,UAAA,SAAA7S,GACA,GAAA4G,GAAAA,KAAAA,EAAAK,OAAA4L,GAAAA,cAAA7S,EAAAgH,MAAA,EACA7I,SAAA+K,UAAAzC,EAAAI,MJyDY1I,EIxDZ6B,GAAAqB,EAAAuR,MAAAnM,EAAAI,MJ2DQ,IAAIgM,GAAatU,EAAQkI,KAAK,cIpDtC9G,SAAAmT,UAAAA,KACAzR,EAAA4F,KAAA4L,GJsDY1U,EAAQ+K,QAAS,EIjD7B/K,EAAAwB,OAAA2E,GAGAjD,EAAA1B,eAAAmI,WJoDUzG,EInDV+B,MAAA,IJqDQqD,EAAKsM,SAAS,QAAS,SAASlL,GAC9B,GAAIlI,QAAQ2E,UAAUuD,KAAcxG,EAAMyR,eAAe,SAAU,CACjE,GAAIhL,GAAWzG,EAAMgI,KACrBhI,GAAMgI,MAAQuG,EAAKC,YAAYhI,GIjD3CkL,QAAAzO,UAAAwD,IACAD,EAAAA,WACA/B,GAAAA,EAAAA,uBJuDQW,EIhDRsM,SAAApT,WAAAkI,SAAAA,GACAlI,GAAAQ,EAAAkB,UJiDYqR,EIhDZ5M,SAGAW,EAAA9G,WJiDU0B,EIhDV+B,OAAAqD,EAAAuM,UAAA,SAAAnL,EAAAC,GACAnI,QAAA+S,SAAAA,GJiDc/S,QAAQQ,OAAOkB,EAAOwG,GI9CpCxG,EAAAgI,MAAAxB,EAIApB,QAAAwM,UAAAnL,IACAzG,EAAAsG,WACA+K,GAAA/S,EAAA2E,sBJiDa,GAEDmC,EI9CZiM,QJ+CUrR,EAAMsG,OAAOlB,EAAKwM,OAAQ,SAASpL,EAAUC,GACtC4K,GAAY/S,QAAQ2E,UAAUuD,KAC/BlI,QAAQG,SAAS+H,KAAWA,IAAaA,EAASqL,MAAM,wBI3CxEzM,KAAA,EACApF,EAAAsG,OAGA+K,EAAA/S,UJ+CY8G,EI3CZiM,WJ4CUrR,EAAMsG,OAAOlB,EAAK+C,UAAW,SAAS3B,EAAUC,GACzC4K,GAAY/S,QAAQ2E,UAAUuD,KAC/BlI,QAAQG,SAAS+H,KAAWA,IAAaA,EAASqL,MAAM,0BIxCxEzM,KAAA,EACApF,EAAAsG,YAAAgC,GAEA+I,EAAAf,YAAA9J,MAQAxG,EAAA4H,UACA5H,EAAAqR,OAAAA,EAAAA,SAAA1J,SAAAA,GACA7K,GAAAwB,QAAA2E,UAAAuD,IACA6K,EAAAf,YAAA9J,KJwCQ6K,EAAUvP,EAAS5E,EAASJ,GAC5BkD,EAAM4H,IAAI,WAAY,WKl5B9BrK,GAAA8T,EAAA1J,UAIAjK,EAAAI,KACAH,EAAA,YLq5BEW,QK94BFuC,OAAA,6BAAA,oCAAA,uCAAA,2BAAAC,SAAA,cAAA,WL+4BI,GK94BJC,GAAAjD,KAAAJ,UACAsD,UAAA,UACAtB,YAAA,OACAuB,YAAA,aAEA6Q,UAAA,cACAC,YAAA,iCACAC,QAAAA,QACAC,WAAA,EACAC,UAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,WAAAC,EACAlP,SAAA,OACAmP,WAAA,YACAC,SAAAA,KACAC,gBAAA,KACAC,WAAAA,EACAC,UAAAL,EAAAA,GACAM,UAAAN,EAAAA,GACAO,OAAAA,EL84BMN,SAAU,EK34BhBzU,WAAA,EAEA2U,WAAArB,EACAsB,cAAA,EACAC,OAAAjV,iCL44BMkV,SK34BNlV,mCL44BMmV,cAAe,QAEjB/U,MKz4BJ0D,MAAAsR,UAAAhR,YAAA5E,aAAA4B,OAAApB,iBAAAwE,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GL+4BM,QKx4BN6Q,GAAAC,EAAAA,EAAAC,GAcA,QAAAC,GAAAA,GACAC,GAAAA,GAAAC,IAAAC,EAAAA,UACAC,OAAAA,IAAAF,MAAAA,KAAAC,MAAAA,EAAAA,UAAAE,GAAAA,GLgnCQ,QKr1BRC,GAAAjR,EAAAA,GLs1BU,GAAIkR,GKr1BdC,EAAAxW,CLs1BU,IKr1BVA,EAAA,GAAAsK,gBAAAkM,CLs1BY,GAAIF,GKr1BhBlV,EAAAiG,GAAAA,iBACArH,GAAAyW,UAAAtM,GACAnK,EAAA0W,UAAArM,YAAAkM,GLs1BYD,EAASK,QAAQ,YAAaJ,GAC9BD,EAASjR,aKn1BrBuR,GAAAA,GAAAA,kBACA5W,EAAA,GAAAiS,kBAAAA,EAAAA,GLq1BqB7Q,QAAQiG,YAAYrH,EAAQ,GAAGmK,kBKh1BpD0M,EAAAjB,GAAAA,eAAA9D,EACA8D,EAAA9D,GAAAA,aAAAyE,GLo1BQ,QKj1BRvW,KLk1BUA,EKj1BV,GAAAiS,QL0kBQ,GAAI2D,GAAchR,EAAS5E,EAASoB,QAAQQ,UAAWpB,EAAUwE,IKt4BzER,EAAAsS,EAAAC,MAEAnX,EAAAgW,EAAAhW,SACAkD,EAAA8S,EAAAoB,OLu4BYC,EAAOrX,EAAQqX,KKl4B3BC,EAAAA,SAAAC,EAAApB,EAAAhB,GACA,MAAAqC,GAAAxX,WAAA4V,EAAAsB,EAAAA,EAAA/B,IAMAsC,EAAAC,EACAC,EAAArB,EAAAsB,aAAAA,EAAAA,GAAAA,OAAAA,GAAAA,MLo4BYtB,EAAYpV,EAAW2W,YAAcL,EKj4BjDrB,GAEAE,KAAAyB,EAAAC,WACAvB,SAAAwB,EAAAD,WAAAC,GACAC,OAAAC,EAAAH,aACAN,OAAAU,EAAAJ,aACAJ,YAAAS,EAAAL,mBAGA7U,EAAAmV,EAAAxC,kBAAAA,EAAAA,WAAAA,GACA3S,EAAAlD,EAAA8V,YAAAA,GAIA5S,EAAA6U,EAAArS,cAAAA,GACAsQ,EAAAvQ,EAAAC,cAAAA,GL83BYyS,EAAgBJ,EAAeI,cAAchC,GK53BzDjT,EAAAoV,EAAA5W,YAAAgE,GACAsQ,EAAAA,EAAAtU,OAAAgE,EL83BQxC,GAAMmV,QAAUrY,EAAQ6V,OK53BhC3S,EAAAqV,UAAAA,EAAAzC,SL83BQ5S,EK73BR8S,QAAAwC,SAAAA,EAAAjB,GL83BUvB,EAAYvQ,OAAO8R,EAAM7R,IAE3BxC,EKz3BR1B,WAAAiX,SAAAlB,EAAApI,GL03BU6G,EKz3BVA,WAAAuB,EAAAA,IL23BQrU,EKz3BRmT,gBAAAE,SAAAA,GL03BUP,EKz3BVuB,eAAAmB,IL23BQ1C,EKz3BR2B,OAAAJ,SAAAK,GL03BcpW,QAAQiX,OAAOlB,KAAUpI,MAAMoI,EAAKoB,YKx3BlD3C,EAAA4C,MAAAA,EL03BYpX,QKz3BZQ,OAAAgU,GACAA,KAAAA,EAAA4C,WL03BcX,OAAQV,EAAKmB,aACbjB,OAAQF,EAAKG,aKv3B3B1B,YAAAvQ,EAAAmS,oBAGA1W,EAAA2W,ULw3BsB7B,EAAY6C,UKr3BlC7C,EAAAyC,ULy3BQzC,EKp3BR9U,OAAA+E,SAAAA,EAAAA,EAAAA,KACAjG,EAAAqV,YAAAyD,MAAA5X,EAAA2W,WAAAc,cACAzT,EAAA2S,WAAA,UAAA7X,EAAAwX,YAAA,GAAAuB,MAAA,GAAAA,MAAA,KAAA,EAAA,ILs3BevX,QAAQiX,OAAOlB,KAAOA,EAAO,GAAIwB,MAAKxB,IAC7B,IAAV7R,EAAaxE,EAAW2W,WAAWmB,SAASzB,EAAKhB,YAAgC,IAAV7Q,EAAaxE,EAAW2W,WAAWoB,WAAW1B,EAAKmB,cAAkC,IAAVhT,GAAaxE,EAAW2W,WAAWqB,WAAW3B,EAAKG,cACzMxW,EAAWmF,cAAc7E,QAAQ2X,KAAKjY,EAAW2W,aKl3B3D7B,EAAAwC,UACAxY,EAAAkB,YAAA2W,GACA3S,EAAA,WLo3Bc8Q,EAAYrO,MAAK,MAIvBqO,EKn3BR9U,eAAA+E,SAAAA,GLo3BU,GAAK/E,EAAW2W,aAAc1I,MAAMjO,EAAW2W,WAAWc,WAA1D,CK52BV,GAAAS,IAAAA,GAAAA,EAAA9J,YAAAtP,UACAkB,GAAAmY,WAAAA,SAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,IACAnY,EAAAmV,cAAAA,QAAAA,KAAAA,EAAAA,aACAnV,EAAA+E,YLi3BQ+P,EK/2BR7L,OAAAA,WLg3BU,GK/2BVoN,GAGA+B,EAFA1O,EAAAsL,EAAAA,SAAA4B,SAAAA,EAAAA,OAAAA,EAAAA,IACAzN,ILi3BU,KAAK0C,EAAI,EAAGA,EAAI/M,EAAQsG,OAAQyG,IAC9BsJ,EAAO,GAAI0C,MAAK,KAAM,EAAG,EAAG3C,EAASC,MAAQ+C,EAAWrM,GAAK/M,EAAQyV,UK92BjF4D,EAAAE,MACAtB,KAAAA,EACArN,MAAAsL,EAAAlW,EAAAsG,GACA2R,SAAAjC,EAAAwD,OAAApD,EAAA6B,YAAAmB,EAAArM,GACAwM,SAAApP,EAAAA,YAAAA,EAAAA,ILk3BU,IK92BVmP,GADAjP,ILi3BU,KAAK0C,EAAI,EAAGA,EAAI/M,EAAQsG,OAAQyG,IAC9BkL,EAAS,GAAIc,MAAK,KAAM,EAAG,EAAG,EAAG3C,EAAS6B,QAAUmB,EAAWrM,GAAK/M,EAAQ0V,YK92BxF6D,EAAAE,MACAhC,KAAAA,EACA7M,MAAAsL,EAAAlW,EAAAsG,GACAmR,SAAAzB,EAAAwD,OAAAxD,EAAAyB,YAAA2B,EAAAA,GACAK,SAAAtP,EAAAA,YAAAA,EAAAA,ILk3BU,IK92BVmP,GADAjP,ILi3BU,KAAK0C,EAAI,EAAGA,EAAI/M,EAAQsG,OAAQyG,IAC9B0K,EAAS,GAAIsB,MAAK,KAAM,EAAG,EAAG,EAAG,EAAG3C,EAASqB,QAAU2B,EAAWrM,GAAK/M,EAAQ2V,YK72B3F8D,EAAAC,MACAnC,KAAAE,EACA7M,MAAAwN,EAAAX,EAAAU,GACAuB,SAAAvP,EAAAoP,OAAAxM,EAAAA,YAAAA,EAAAA,GL+2BcuM,SK92BdtD,EAAA2D,YAAAlC,EAAA,ILi3BU,IAAIiC,KK72BdxW,KAAAA,EAAAwW,EAAAA,EAAAA,EAAAA,OAAAA,IACAtB,EACAlV,EAAA0W,MAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,KAEA1W,EAAA8U,MAAAA,EAAAA,GAAAA,EAAAA,IAIAhC,GAAAA,KAAA6D,EACA3W,EAAA8S,YAAAwD,EL82BUtW,EK52BV0W,OAAArD,EL62BUrT,EAAM4W,MK52BhBpU,EAAA8T,OAAAH,EAAAD,GAAA7B,MAAAhB,WAAA,GL62BUrT,EK52BV8U,cAAAU,EL62BU1C,EK52BVtQ,UAAA,GL82BQsQ,EAAY6D,YAAc,SAAStC,EAAM7R,GACvC,MAAKsQ,GAAYwD,MAAwC,IAAV9T,EK12BzDsQ,EAAA2D,aAAA3D,EAAAtQ,MAAAA,WACAqU,IAAAA,EACArU,EAAAgT,eAAA1C,EAAAwD,MAAAd,aACAnB,IAAAwC,EACAxC,EAAA7R,eAAAsQ,EAAAwD,MAAA9B,aADAqC,QLu2ByC,GAQjC/D,EK32BR+D,YAAApB,SAAAA,EAAAvC,GL42BU,GAAI2D,EAQJ,OKl3BVA,KAAArU,EL42BYqU,EAAexC,EAAKoB,UAA8B,IAAlBvC,EAAS6B,OAAiC,IAAlB7B,EAASqB,OKz2B7E,IAAAuC,EACAD,EAAAhE,EAAAA,UAAA,KAAAK,EAAAC,KAAA,IAAAD,EAAAqB,OACAwC,IAAAjE,IL22BY+D,EK12BZxC,EAAAoB,UAAA,KAAAvC,EAAAC,KAAA,IAAAD,EAAA6B,QL42BiB8B,EAAiC,EAAlB/Z,EAAQsV,SAAeyE,EAAiC,EAAlB/Z,EAAQuV,SKv2B9ES,EAAAA,aAAAiE,SAAAvY,EAAAgE,GACAsQ,WAAAkE,EAAAA,cACAlE,EAAAkE,eAAA3D,EAAAA,GAEAP,EAAAkE,WAAAxC,EAAAA,IL42BQ1B,EKz2BRiE,eAAA,SAAAvY,EAAAgE,GL02BU,GKz2BVwU,GAAAjB,GAAAA,MAAAM,EAAAjK,OAAAtP,GL02BcqZ,EKz2Bd3T,EAAAA,WACAwU,EAAAhB,EAAAO,aL02BcA,EAAUS,EAAQxC,YKx2BhCjS,KAAAuQ,EL02BYkE,EAAQlB,SAASK,EAAQ/J,SAAStP,EAAQyV,SAAU,IAAM/T,GKv2BtE4W,IAAAA,EACA4B,EAAAC,WAAAA,EAAAA,SAAAA,EAAAA,WAAAA,IAAAA,GACA,IAAAzU,GACAyU,EAAAA,WAAApB,EAAAzJ,SAAA8G,EAAAC,WAAArW,IAAAA,GL02BUgW,EKx2BVmE,OAAAA,EAAA5D,GAAAA,IL02BQP,EKx2BRsC,WAAA,SAAA5W,EAAAgE,GLy2BU,GKx2BVyU,EACAnY,KAAAR,GLy2BY2Y,EKx2BZA,GAAAA,MAAAzB,KAAAA,EAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,OAAAA,EAAAA,OAAAA,EAAAA,QLy2BYlX,QAAQQ,OAAOoU,GACbC,KKx2Bd8D,EAAA5D,cAEAH,IAAApU,GLy2BYmY,EKx2BZA,GAAAA,MAAAzC,KAAAA,EAAAA,EAAAA,EAAAA,KAAAA,EAAAA,OAAAA,EAAAA,EAAAA,OAAAA,EAAAA,WAAAA,EAAAA,QLy2BYlW,QAAQQ,OAAOoU,GACb6B,OAAQkC,EAAWzB,gBAEF,IAAVhT,IKt2BrBsQ,EAAAvP,GAAAA,MAAAA,KAAA,EAAA,EAAAb,EAAAA,KAAAA,EAAAA,OAAAA,EAAAA,OAAAA,EAAAA,EAAAA,OAAAA,EAAAA,YAEApE,QAAAuJ,OAAAwB,GACA5F,OAAAA,EAAAA,gBLy2BUqP,EKr2BVoE,ULu2BQpE,EAAYvP,aAAe,SAASb,GAGlC,GKv2BV,UAAAwU,EAAAA,OAAAC,SAAAA,eAAAzU,EAAAc,iBLs2BUd,EAAIe,kBACA8F,EAAS,CKn2BvBuJ,GAAAA,GAAApO,QAAAxH,QAAAwF,EAAAA,OACAA,YAAAwU,EAAA,GAAA7N,SAAAzD,gBACApC,EAAAA,EAAAA,UAIA0T,EAAA/S,eAAA,WLq2BQ2O,EAAYpO,WAAa,SAAShC,GK/1B1C,GAAAsU,mBAAAlE,KAAAA,EAAAA,WAAAwD,EAAAA,WAAAA,EAAAA,OAAA,CAGA,GAFA5T,EAAAyT,iBACAzT,EAAA0U,kBACAJ,KAAAX,EAAAA,QAEA,WADAvD,GAAAuE,MAAAA,EAGA,IAAAC,GAAAA,GAAAzB,MAAA/C,EAAAwD,OACAiB,EAAAA,EAAAlE,WACAmE,EAAAtC,EAAAA,EAAAwB,GAAAtT,OAGAmU,EAAAA,EAAA/B,aACA6B,EAAAlT,EAAAiQ,EAAAA,GAAAA,OL+1BcmC,EAAUS,EAAQxC,aK11BhCiD,EAAAzE,EAAAoE,EAAAA,GAAAA,OACAM,EAAA,EACAhV,EAAAyB,UAAAuT,KAAAhV,EAAAyB,SACAzB,EAAAyB,EAAAuT,EAAAvT,EAAA,EAAAuS,CACAiB,KACAvD,KAAAwD,EAAAA,QAAAxD,EAAAA,EAAAc,EAAAd,EAAAA,EAAAA,EAAAc,EAAAA,KAAAA,EAAAA,UAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GL61BU,IK31BV8B,IAAAb,EAAAA,GAEAiB,EAAAA,CACA,MAAAK,EAAAA,UAAAL,EAAAA,IACAhD,KL01Bc1R,EK11BdyB,UAAAiQ,EAAA,EL21BU,IK11BV4C,GAAAU,IAAA3B,GAAA3J,EAEAiL,EAAAL,IAAAK,IAAArC,GAAA5R,IAAAA,GAAAA,CACAgU,KAAAK,GL01BYT,EKz1BZlB,SAAA6B,EAAAD,EAAAtL,SAAAtP,EAAAyV,SAAA,KACAyE,EAAAhB,EAAAO,EAAAmB,GAAA5a,OAEA+a,GAAA7E,EAAAA,IACAoE,IAAAK,GLy1BYT,EKx1BZjB,WAAA6B,EAAAF,EAAAtL,SAAAtP,EAAA0V,WAAA,KACA6E,EAAAE,EAAAzE,EAAAwC,GAAAA,OACAmC,GAAAL,EAAAE,EAAAA,ILy1BqBK,GKv1BrB7E,EAAAA,WAAAkE,EAAA5C,EAAAA,SAAAtX,EAAA2V,WAAA,KACAqF,EAAAL,EAAAT,EAAAS,GAAArU,OACA1B,GAAA2C,EAAAA,EAAAA,EAAAA,EAAAA,ILy1BqBuT,IKp1BrBE,GAAAA,EAAA1U,iBACAqU,GAAArU,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,ILu1BU0P,EKr1BVU,OAAAtW,EAAA6a,GAAAA,GLs1BUD,EKr1BVnE,EAAA,GAAA8D,EAAA,ILs1BU/V,EKr1BVkS,WLy2BQ,IKj1BR1W,GAAAwO,EAAAsD,ILk1BQ8D,GKj1BR1N,KAAA,WLk1BU,MKj1BVlI,IAAAJ,EAAAgX,WLk1BY5W,EAAQwO,KAAK,OAAQ,YKh1BjCqI,GAAAA,IAAAA,qBAAAA,eAGAiE,IACAlF,EAAAnL,KAAAA,OAAA,QACAzK,EAAAkU,KAAAA,WAAAU,QACA5U,EAAA0M,GAAAA,QAAAkK,QAEAkE,MAGA,IAAAC,GAAAnF,EAAAxO,OACAwO,GAAAxO,QAAA,WACA8M,GAAAlU,EAAAkI,WACA6S,EAAAA,IAAAA,QAAAA,GLi1BUD,IAEF,IAAIC,GK70BZ/a,EAAAA,IL80BQ4V,GAAYxO,KAAO,YK50B3BiF,GAAArM,EAAAkI,KAAA,aAAAlI,EAAAkI,KAAA,cL80BU6S,IK30BVjW,EAAAkW,WACApF,EAAAtO,UAAA4L,EAAAA,SAAAA,GAAAA,EAAAA,aAAAA,YAAAA,EAAAA,cACA0C,EAAAA,UACAA,GAAAtO,EAAAA,GAAAsO,UAAAtO,EAAA+E,aAEA,GAAArM,IL80BQ,IK50BRgb,GAAA9H,EAAAA,IAkBAgB,OL2zBQ0B,GAAYrO,KAAO,SAAS2L,GK10BpC0C,EAAAA,WL40BcA,EAAYtO,UAAUsO,EAAYtO,SAASoF,IAAIL,EAAU,aAAe,YAAauJ,EAAYvP,cKx0B/GwP,EAAAA,UACAA,GAAAA,EAAAA,IAAAA,UAAAA,EAAAA,YAOA9N,EAAAmL,KAGAgB,EL4gBM,GKz4BNA,GAAA1P,6BAAA1B,KAAAA,EAAAA,UAAAA,WACAuJ,EAAAzM,eAAAkR,GAAAA,UAAAA,CAgYA1I,OA/XA5H,GAAAoV,OAEApV,EAAAyW,KAAArX,EAAAqX,oBA4XA9O,EAAA3H,SAAAA,EACA4H,MLo0BKL,UKh0BLnI,gBAAAA,UAAAA,SAAAA,KAAAA,iBAAAA,cAAAA,cAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GLi0BI,GAAIY,GKh0BRsC,EAAAA,SLi0BQoR,EAAW,6BAA6BxL,KAAKhE,EAAQuW,UAAUC,UACnE,QACE/S,SKh0BN/G,MLi0BMgH,QAAS,UACTvF,KK9zBNwF,SAAAA,EAAArI,EAAAkI,EAAApH,GLm3BQ,QK9yBRA,GAAAqa,GAEA,GAAAC,QAAAA,OAAAC,GAAA,CL8yBU,GK7yBVC,GAAAvM,MAAAnP,EAAAsV,UAAA,GAAAyD,MAAA0C,EAAA9C,WAAAgD,YAAA,KAAA,EAAA,IAAA3b,EAAAsV,QL8yBciG,EAAapM,MAAMnP,EAAQuV,UAAY,GAAIwD,MAAK0C,EAAW9C,WAAWgD,YAAY,KAAM,EAAG,IAAM3b,EAAQuV,QK5yBvHrU,EAAA2W,GAAA4D,CL8yBUva,GAAW0a,aAAa,OAAQJ,GK1yB1Cta,EAAA2a,aAAAC,MAAAJ,GAEAxa,EAAAqW,aAAAA,MAAAA,GAEAwE,IL4yBU7a,EAAW2W,WAAa4D,IA+C1B,QAASO,KACP,OAAQ9a,EAAW2W,YAAc1I,MAAMjO,EAAW2W,WAAWc,WAAa,GAAKzC,EAAWhV,EAAW2W,WAAY7X,EAAQkV,YK76BnI1T,GAAAA,IACA0B,MAAA1B,ELg0BQA,SAAQC,SAAU,WAAY,cAAe,aAAc,eAAgB,YAAa,YAAa,QAAS,UAAW,WAAY,OAAQ,YAAa,YAAa,WAAY,aAAc,WAAY,kBAAmB,YAAa,WAAY,aAAc,aAAc,SAAU,gBAAiB,SAAU,WAAY,eAAgB,KAAM,cAAe,cAAe,eAAiB,SAASI,GAC9YL,QAAQ2E,UAAUmC,EAAKzG,MAAO7B,EAAQ6B,GAAOyG,EAAKzG,KAExD,IK5zBR4G,GAAA5G,eL6zBQL,SK5zBRA,SAAA2E,OAAAmC,YAAA,YAAA,YAAA,gBAAA,SAAAzG,GACA7B,QAAA6B,UAAAqB,EAAAuR,KAAA/L,EAAAA,KAAAA,EAAAA,ML6zBY1I,EAAQ6B,IAAO,KKvzB3BL,QAAAya,SAAAjG,eAAA5V,SAAAc,eAAAlB,UAAAA,SAAAA,GACAA,GAAAA,GAAAic,KAAA/K,EAAAA,OAAAA,GAAAA,cAAAA,EAAAA,MAAAA,EAEAmG,SAAArX,UAAAqX,EAAAA,MACAnB,EAAAA,GAAAhT,EAAAuR,MAAA8C,EAAApB,OAKA7N,IAAAtI,EAAAgV,WAAApU,EAAAoU,aAAAhV,EAAAkV,WAAA,QLwzBQ,IKvzBRhS,GAAAoF,EAAAlI,EAAAsJ,EAAAC,ELwzBQ3J,GKvzBRic,EAAAA,QLwzBQ,IKvzBR5E,GAAA7V,EAAAG,KACAuU,EAAAxM,SAAA6N,EAAApB,EAAAhB,GLwzBU,MKvzBV8G,GAAAzU,WAAAA,EAAAA,EAAAA,EAAAA,GLyzBYc,GKvzBZ2T,QLwzBU/Y,EAAMsG,OAAOlB,EAAKwM,OAAQ,SAASpL,EAAUC,GACtCsS,GAAeza,QAAQ2E,UAAUuD,KAClClI,QAAQG,SAAS+H,KAAWA,IAAaA,EAASqL,MAAM,2BKpzBxEmH,KAAAC,EACAhG,EAAAnW,OLuzBcic,EAAWtU,SAIjB,IAAIuU,GKlzBZhL,GLmzBUiF,OKlzBVnW,EAAAic,WLmzBU5E,KKlzBV+E,GLozBQ5a,SAAQC,SAAU,UAAW,WAAa,SAASI,GAC7CL,QAAQ2E,UAAUmC,EAAKzG,KK/yBrCqB,EAAAsG,SAAAC,EAAAA,SAAAC,GAEAuS,EAAAjW,SAAA9E,GAAA2W,EAAAA,oBAAAA,EAAAA,GACA1I,MAAA8M,EAAA/K,SAAArP,KAAAoa,EAAArD,SAEAwD,EAAAA,EAAAX,gBLkzBQvY,EK9yBRsY,OAAAA,EAAAE,QAAAA,SAAAH,EAAAA,GACAra,EAAA0a,OAAAA,EAAA/D,cACA3W,GL4zBQA,EKtyBRua,SAAAA,QAAAA,SAAAA,GLuyBU,GKtyBVva,ELuyBU,KKpyBV6a,EAEAK,MLmyBYlb,GAAW0a,aAAa,QAAQ,GKnyB5CQ,ILsyBU,IKnyBV7E,GAAA2E,QAAAG,OAAAA,GAAAZ,EAAAzb,EAAAmV,MAAA4G,EAAA7a,EAAA2W,WLoyBU,QKnyBV4D,GAAAvF,MAAAqB,EAAAnC,YLoyBYlU,EAAW0a,aAAa,QAAQ,GKlyB5CM,ILqyBUE,EKnyBVzD,GACA1D,WLmyBcjV,EKnyBdA,UACAuX,EAAAA,EAAAoB,qBAAA8C,EAAAzb,EAAAmV,UAAA,GACAe,EAAAjB,EAAAA,EAAAG,iBAAApV,EAAAkV,cLqyBUqC,EAAO2E,EAAWG,qBAAqBnb,EAAW2W,WAAY7X,EAAQmV,UAAU,GKlyB1FoC,WAAAvX,EAAA+Y,SLoyBmBxB,EAAKoB,UKhyBxB,SAAAzO,EAAAA,SAEAqN,EAAAA,UAAAA,IACAnN,QAAA5I,EAAAiG,SACA6U,EAAAA,cAEA/E,GAAAnN,MAAAA,OLkyBQlJ,EKhyBRgb,YAAAK,KAAAnS,SAAAA,GLiyBU,GAAImN,EAaJ,OAXEA,GKjyBZA,QAAA9P,YAAA2C,IAAA,OAAAA,EACAkS,IACA9a,QAAA4I,OAAAA,GLiyBmBA,EK7xBnB8R,WAAArE,EAAAA,SACAmE,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,iBL+xB0C,SAArBhc,EAAQiV,SK3xB7BhP,GAAAA,MAAA,IAAAA,GL8xBmB,GAAI8S,MAAK3O,GKxxB5BlJ,EAAAA,WAAA2W,EAAA1I,qBAAA0I,EAAAc,EAAAA,UL2xBiBqD,MAET9a,EKxxBR+a,QAAAA,WACAjc,EAAAA,IAAAgc,ML6xBQ9Y,EAAM4H,IAAI,WAAY,WM52C9BrK,GAAAwb,EAAApR,UAIAjK,EAAAI,KACAH,EAAA,YN+2CEW,QM12CFgb,OAAAA,yBAAAA,SAAAA,OAAAA,WAEA,GAAAC,GAAAA,KAAAA,UACA5b,UAAA2b,UN02CMjc,SAAU,mBMv2ChBmc,SAAAxb,WACAyb,YAAA3b,UAIAQ,KACAib,EAAAtW,SAAAyW,EAAA/a,GNu2CW2a,EAAU3a,KAAM2a,EAAU3a,GAAOgb,IMl2C5CvX,EAAAwX,KAAAA,WAAA5L,SAAAyL,EAAAA,EAAAA,GAEAI,GAAAA,GAAAC,IAKAD,GAAAE,SAAAA,QAAAA,KAAAA,GAEAF,QAAAG,SAAA,YAAAC,WAAAA,eAAAA,SAAAA,GACA3b,QAAAiG,UAAAA,EAAAuV,MAAAI,EAAAA,SAAAvb,GAAA+a,EAAA/a,MNg2CMyD,EAAO+X,UAAYN,EAAK7L,SAASwL,SACjCpX,EM91CN0X,aAAAG,EAAAA,SAAAA,YN+1CMJ,EAAKC,OAAS1X,EAAO0X,UM51C3BD,EAAAO,2BAAAH,EAAAA,wBN81CMJ,EM71CNG,MAAAxX,SAAAsX,GACAnW,QAAAA,YAAAmW,EAAAI,OAAAA,UACA9X,EAAAiY,WAAAA,EAAAA,MAAAA,GN+1CQR,EM71CRQ,OAAAA,KAAAR,IN+1CMA,EAAKO,QM71CXzW,SAAAA,GN81CQ,GAEI0W,GAFA7X,EM71CZqX,EAAAC,OAAAQ,QAAAL,GACAI,EAAAA,EAAAR,OAAAC,OAMAO,GAFAR,QAAAU,SAAA/X,GAEA6X,EAAAA,OAAAhM,IAAA,SAAA4L,GAGAI,MAAAA,GAAAA,ONy1CaC,QMx1Cb9X,GN01CwBqX,EAAKC,OAAOI,QAE5BL,EMt1CRA,OAAAW,OAAAX,EAAAC,GACAO,ENs1CY7X,EMr1CZqX,INu1CmBrX,IAAU6X,GAAeA,IAAgBR,EAAKC,OAAO1W,QAC9DiX,IMn1CVR,GAAAK,GAAA1b,EAAAA,EAAAA,OAAAA,OACAqb,EAAAE,WAAAA,EAAAA,OAAAA,GAAAU,MAAAC,GNu1CUb,EAAKW,cAGTX,EMp1CNW,WAAAV,EAAAI,WAAAS,SAAAd,GNq1CQA,EAAKC,OAAOI,QAAU1b,EMl1C9Bqb,EAAAe,2BAAAA,QAAA,SAAAC,GACAH,ONs1CMb,EAAKiB,UAAY1Y,EAAO0Y,UAAY,SAASH,EAAOI,GAClD,MAAOlB,GAAKC,OAAOI,UAAYS,EAAMF,MAAQZ,EAAKC,OAAOI,UAAYa,GMh1C7ElB,EAAAmB,YAAAA,EAAAA,YAAAA,SAAAA,EAAAA,IACAtd,KAAAA,EAAAA,SAAAA,KAAAA,EAAAA,UAAAA,KAAAA,EAAAA,SAAAA,KAAAA,EAAAA,WACAsd,EAAAhd,WAAAA,INs1CIF,MAAK0D,KAAO,WM90ChByD,GAAAA,KAOAjF,OALAgb,GAAAtd,SAAAsd,EAEAA,EAAAhd,WAAAA,EACAsH,EAAAA,cAAAiU,EACA0B,EAAAA,SAAA3B,EACA0B,KN+0CK/V,UM70CLpI,UAAA,UAAAuI,WAAAA,OAAAA,SAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GN80CI,GM70CJ1H,GAAA0H,EAAA/H,QN80CI,QM50CJ0C,SAAA,WAAAoF,UN80CM8V,YM50CNC,EN60CMlb,OM50CNmb,EN60CMnd,YMz0CNod,SAAA,WAAAA,SAAAxe,EAAAA,YN00CMC,YMz0CNwe,SAAAA,EAAAD,GN00CQ,MAAOhW,GAAK/H,UAAYK,EAASL,UAEnC0C,KMp0CNob,SAAApB,EAAAA,EAAAA,EAAAuB,GNq0CQ,GMp0CRJ,GAAA/X,EAAAgY,GNq0CYA,EAAaG,EAAY,EAa7B,IM90CRtU,KAAAkU,EAAAA,QAAAjU,EAAAmU,SAAAlU,GNm0CU8T,EMj0CVG,cAAAX,EAAAtT,OAAAA,GNm0CYgU,IACFC,EAAWpB,2BAA2B9S,KAAK,WM9zCrDsU,EAAAC,cAAAL,EAAArB,OAAAI,WAMAiB,EAAApB,YAAAA,KAAAA,SAAA9S,GN6zCY,MM5zCZwU,GAAAA,WAAAC,GN4zCmBxU,KAGPqU,EMzzCZC,aAAA,CN0zCU,GAAIC,GAAqBE,EAAOJ,EAAMC,aACtCL,GAAWpB,2BAA2B9S,KAAK,WACzCwU,EAAmBC,OAAO1b,EAAOmb,EAAWrB,OAAOI,WMnzC/Dla,EAAAsG,OAAAiV,EAAAC,aAAA,SAAAhV,EAAAC,GACAnB,EAAAkV,WAAAhU,KACA,SNyzCOvB,UM/yCPyM,UAAA,UAAA,WAAAjL,OAAAA,SAAAA,EAAAA,EAAAA,GNgzCI,OACEnB,SAAW,YAAa,WACxBtF,OM7yCNA,EN8yCMD,KM3yCNob,SAAAnN,EAAArQ,EAAA4d,EAAAD,GAwBAM,QAAAA,KNqyCU,GAAIpZ,GAAQ2Y,EAAWrB,OAAOQ,QAAQta,EACtCgQ,GAASmL,EAAWL,UAAU9a,EAAOwC,GAAS,WAAa,eAAetF,EAASie,EAAWnN,SAASyL,aAlBzG,GM3yCRvc,GAAAyS,EAAAwL,EN4yCQje,GAAQyS,SAAS,YMzyCzB4L,EAAA7J,SAAA,QAAA,SAAAlL,EAAAA,GACAxG,EAAAoW,MAAAA,EAAApW,YAAAwG,KAIA2U,EAAAA,KAAAnB,EAAAha,KAGAA,EAAAgO,SAAArQ,WACAwd,EAAAA,SAAAf,EAAApa,SAAAA,WAGAub,EAAA7J,SAAAkK,WAAAA,SAAAA,EAAAA,GACA5b,EAAAwC,SAAA2Y,EAAArB,MAAAA,KNuyCQqB,EAAWnB,MAAMha,GMnyCzBmb,EAAAA,IAAAA,WAAApB,WACA6B,EAAAA,QAAAA,KChNAtd,EAAAyb,2BAAA9S,KAAA,WAIAvJ,MAEAE,SP2/CEU,QOv/CFuC,OAAA,yBAAA,yBAAA,wCAAAC,SAAA,UAAA,WPw/CI,GOv/CJC,GAAAjD,KAAAJ,UACAsD,UAAA,UACAtB,YAAA,SACAuB,YAAA,UACA4a,UAAA,cACAC,YAAAA,yBACAC,QAAA,QACAC,WAAA,EACAC,UAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,UAAAA,EACAC,gBAAA,EACAC,MAAAA,EACA9S,UAAA,oCPw/CMyS,YAAa,gCOr/CnBne,QAAA0D,MAGA2a,SAAA/K,OACAgL,UAAA7S,EAEA8S,cAAAE,WPo/CMD,cOl/CN7Z,yBPm/CM+G,QOh/CN1M,EPk/CIgB,MO/+CJ0D,MAAAxB,UAAAoC,YAAAA,aAAAA,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GPk/CM,QO9+CNpC,GAAAsC,EAAAA,EAAAA,GP++CQ,GAAIG,MO7+CZzC,EAAAsC,QAAAA,UAAA5E,EAAAwE,EP++CQO,GAAUX,EAAS5E,EAASJ,EO7+CpCkD,IAAAA,GAAAwc,EAAA1f,MACAkD,GAAAyc,YACAzc,EAAA0c,SACA1c,EAAA2c,gBAGA3c,EAAA4c,aAAA,GP++CQ5c,EO7+CRyC,YAAAJ,EAAAG,SP8+CQxC,EAAMyc,oBAAsB3f,EAAQgf,gBAAkBhf,EAAQ+e,SAC9D7b,EAAM0c,eAAiB5f,EAAQwf,cO3+CvCtc,EAAAyC,SAAA3F,EAAA0F,QP6+CQxC,EO5+CRA,UAAAmC,EAAAga,SP6+CQnc,EO5+CRyC,UAAAF,SAAAC,GP6+CUxC,EAAMmC,aAAa,WACjBM,EAAQJ,SAASG,MAGrBxC,EAAMyC,QAAU,SAASD,EAAOE,GOz+CxC1C,EAAA8a,aAAA,WACArY,EAAAA,OAAAqY,MP6+CQ9a,EOz+CR4C,WAAAiH,WP0+CU,MOz+CV7J,GAAA8a,cP2+CQ9a,EAAM8a,UAAY,SAAStY,GACzB,MAAOC,GAAQqY,UAAUtY,IOt+CnCxC,EAAA6c,WAAAA,WACA,IAAA,GAAAhT,GAAA,EAAAA,EAAA7J,EAAAiC,SAAAmB,OAAAyG,IACA7J,EAAA8a,UAAAjR,IACA7J,EAAAyC,QAAAoH,IAOApH,EAAAA,YAAA,WACAzC,IAAAA,GAAAiC,GAAAA,EAAAA,EAAAU,EAAAA,SAAAA,OAAAA,IACAF,EAAAqa,UAAAA,IPs+Cc9c,EAAMyC,QAAQoH,IAIpBpH,EOp+CRzC,OAAAsC,SAAAiY,GPq+CUva,EAAMiC,SOp+ChBU,EPq+CUF,EOp+CVzC,sBPs+CQyC,EOp+CR3F,SAAAif,SAAAzZ,GAUAtC,MAVAlD,GAAAigB,UPs+CgBta,EAAQqY,UAAUtY,GACpBxC,EOt+CdsC,aAAAiY,OAAAva,EAAAsC,aAAAgY,QAAA9X,GAAA,GPw+CcxC,EAAMsC,aAAa2E,KAAKzE,GAEtB1F,EAAQif,MAAM/b,EAAMsC,aAAayZ,KAAK,SAASgB,EAAGC,GOp+ClEva,MAAAF,GAAAya,KPw+CYhd,EAAMsC,aAAeE,EOr+CjCya,EAAA3a,cPy+CQG,EOv+CR3F,OAAA+e,SAAArZ,GPw+CU,KOv+CVxE,QAAAA,YAAAmF,IAAAb,EAAAtC,GAAAsC,GAAAtC,EAAAwC,SAAAA,QPu+CU,CAGA,GAAIhE,GAAQwB,EAAMiC,SAASO,GAAOhE,KAClCwB,GOv+CVid,OAAAjd,WPw+CYyC,EAAQJ,SAASG,GACb1F,EOv+ChB+e,SACA7d,EAAAlB,cAAAkD,EAAAsC,aAAA+L,IAAA,SAAA7L,GACAxE,MAAAA,SAAAmF,YAAAA,EAAA3E,SAAAR,IACA,KPy+CuBgC,EAAMiC,SAASO,GAAOhE,UAG3B1B,EAAQ0M,OOp+C1BxG,EAAAlG,cAAAH,IAAAqB,EAAAwE,YAAAC,EAAAA,GAEA3F,EAAAoG,cAAAV,GPu+CcC,EAAQgC,UAGZzE,EOl+CV1B,MAAAA,EAAA4e,YAAAxW,UAAAA,EAAAlE,EAAAC,GACAzC,QAAAsC,UAAAA,EAAAtE,WAAA0I,QAAA2H,WAAA7P,EAAAA,WPm+CY1B,EOl+CZoG,SAAAT,EAAA0a,EAAA3e,KPq+CQiE,EOl+CRzC,mBAAAsC,WPm+CcxF,EAAQ+e,SACNvd,QOl+ChB4e,QAAAlf,EAAA0I,aACA1G,EAAA1B,aAAAN,EAAA0I,YAAAA,IAAA1G,SAAAiC,GACAjC,MAAAsC,GAAAA,UAAAG,KPq+CczC,EAAMsC,gBO99CpBM,QAAAA,UAAA5E,EAAA0I,cAAA1G,EAAAiC,SAAAmB,OACApD,EAAAlD,aAAAoE,EAAAlD,UAAAA,EAAA0I,aPm+Cc1G,EAAMsC,aAAe,IAI3BG,EO/9CR3F,WAAA+e,WPg+CU,MO/9CV/e,GAAAkD,WAAAsC,EPk+CiBtC,EAAMiC,SAASmB,QAAUpF,EAAW6I,WAAWzD,QAAUtG,EAAQoE,UAF/DlB,EAAMiC,SAASmB,QAI1BX,EO99CRD,UAAAA,SAAAA,GACA,MAAA1F,GAAA0F,SACAhE,KAAAF,EAAAgF,aAAArB,QAAAO,GAEAA,EAAAA,eAAAA,GAGAC,EAAAc,UAAAA,SAAA/E,GAEAkE,GAAAc,EACAd,KAAAe,EAAAA,EAAAA,SAAAA,OAAAA,MAEA8F,QAAAjG,OAAAtD,EAAAiC,SAAAO,GAAAhE,MAAAA,KP69CU,MO39CV4e,IP69CQ3a,EO19CRc,aAAA8Z,SAAAnG,GP69CU,GAFAxU,EO19CVc,iBP29CUd,EAAIe,kBACA8F,EO19Cd6T,CP29CY,GOz9CZC,GPy9CgBnG,EAAW5Y,QAAQpB,QAAQwF,EAAImF,OAEnC,IAA4B,MAAxBnF,EAAImF,OAAOwB,SOv9C3B,IPw9Cc,GAAIgU,GAAkBnG,EAAS5H,UOx9C7C8N,GAAAC,EAAAja,OAAA,GACA+T,MAAA7Y,EAAA8e,GAAAjG,WP09CkBiG,EOz9ClBC,GP29CgBA,EAAkBA,EAAgB/N,QOr9ClD5K,GACApG,QAAApB,QAAA0I,GAAAlD,eAAA,SAGAA,EAAAc,eAAAA,WP29CQf,EOr9CRiC,WAAAD,SAAAA,GPs9CU,MAAK,eAAemB,KAAKlD,EAAIyB,UOl9CvC0X,IAAAnZ,EAAA5F,UACA4F,EAAAc,iBPo9CYd,EAAIe,mBO/8ChB3G,EAAAqH,UAAA7B,IAAAI,EAAA1C,QAIAqE,EAAAA,OPg9CevH,EAAQ+e,UAA6B,KAAhBnZ,EAAIyB,SAAkC,IAAhBzB,EAAIyB,aO18C9DrH,EAAAwd,WP88CgC,KAAhB5X,EAAIyB,SAAkBnE,EAAMsC,aAAe,EAAGtC,EAAMsC,eAAyC,KAAhBI,EAAIyB,SAAkBnE,EAAMsC,aAAe,EAAGtC,EAAMsC,aAAetC,EAAMiC,SAASmB,OAAS,EAA4B,KAAhBV,EAAIyB,SAAkBnE,EAAMsC,aAAetC,EAAMiC,SAASmB,OAAS,EAAGpD,EAAMsC,eAAyBhE,QAAQiG,YAAYvE,EAAMsC,gBAAetC,EAAMsC,aAAe;AO38CvWG,EAAA6a,YALAC,EAAAhb,OAAAvC,EAAAsC,ePo8CU,QAgBFG,EO58CR+a,MAAAA,WP68CU,GO58CV3V,GAAAA,EAAAsH,UAAAA,SP68CU,OAAOsO,GAAGnD,QAAQ,SAAW,GAAKmD,EAAGnD,QAAQ,YAAc,GAAKmD,EAAGnD,QAAQ,SAAW,GOv8ChG7X,EAAAwV,iBAAA3T,SAAAA,GACA,OAAA7B,EAAA,GAAAib,cAAAC,UACA1F,EAAAA,iBACA4C,EAAA/d,2BACA2F,EAAAA,OAAA+B,SP48CQ,IOv8CR/B,GAAA+B,EAAAA,IPw8CQ/B,GOv8CR3F,KAAAA,WPw8CUmb,IACInb,EAAQ+e,UACVpZ,EOv8CZ+B,SAAAmL,SAAA,mBAGA3N,EAAAkW,WACAzV,EAAAgC,SAAA6E,GAAAC,EAAA,aAAA,YAAA9G,EAAAc,cACAzG,EAAA+e,UACA7b,EAAAsC,GAAAA,UAAAG,EAAAiC,aAEAjC,GAAAA,GPw8CQ,IOt8CRvF,GAAA0M,EAAAnF,IAoBA,OPm7CQhC,GAAQgC,KAAO,YOr8CvByT,EAAA2D,UAAAvd,QAAAiG,YAAAvG,EAAA0I,ePu8CY1G,EAAMsC,aAAe,IAEvBG,EAAQ+B,SAASoF,IAAIL,EAAU,aAAe,YAAa9G,EAAQc,cOl8C7EgZ,EAAA7e,UACAR,EAAAqf,IAAAA,UAAAA,EAAAA,YAMAtX,GAAA,IAIAxC,EPgvCM,GO9+CNzC,GAAAiC,6BAAAA,KAAAA,EAAAA,UAAAA,WACAsH,EAAAsS,eAAAja,GAAA2J,UAAA6F,CAgQArR,OADAuF,GAAA5H,SAAAA,EACA6e,MP+7CKtX,UO57CLjF,YAAAA,UAAAA,SAAAA,KAAAA,UAAAA,gBAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GP67CI,GAAItC,GO77CRue,EAAAve,QP87CI,QACE2H,SO97CN9G,MP+7CM+G,QO97CNhH,UP+7CMyB,KAAM,SAAkBC,EAAO9C,EAASkI,EAAMpH,GO37CpD,GAAAuH,IACAjH,MAAAC,EACA0d,YAAAhZ,EAAAmC,YP87CQ9G,SAAQC,SAAU,WAAY,cAAe,aAAc,eAAgB,YAAa,YAAa,QAAS,UAAW,WAAY,OAAQ,YAAa,cAAe,iBAAkB,YAAa,gBAAiB,UAAW,WAAY,gBAAiB,YAAa,KAAM,OAAQ,YAAa,cAAe,cAAe,UAAY,SAASI,GACtVL,QAAQ2E,UAAUmC,EAAKzG,MAAO7B,EAAQ6B,GAAOyG,EAAKzG,KAExD,IO17CR4G,GAAA5G,eP27CQL,SO17CRA,SAAA2E,OAAAmC,YAAA,iBAAA,QAAA,SAAAzG,GACA7B,QAAA6B,UAAAqB,EAAAuR,KAAA/L,EAAAA,KAAAA,EAAAA,MP27CY1I,EAAQ6B,IAAO,KOp7C3BL,QAAAA,SAAA2E,eAAA2a,SAAA,eAAA,SAAA,YAAA,SAAAjf,GACA,GAAA4G,GAAAA,KAAAA,EAAAK,OAAAgY,GAAAA,cAAAjf,EAAAgH,MAAA,EACA7I,SAAA+e,UAAAzW,EAAAI,MPw7CY1I,EOv7CZ6B,GAAAqB,EAAAuR,MAAAnM,EAAAI,MP07CQ,IAAIoY,GAAe1gB,EAAQkI,KAAK,gBOz6CxC,IAXAlI,QAAA+F,UAAAoG,KACAwU,EAAA3gB,KAAAA,GACA2gB,EAAAvR,UAAA,EAEAuR,EAAAxO,SAAAnS,GAOAJ,WAAAyF,EAAAA,GAAAE,SAAAvF,cAAAJ,CAEA,GAAAyF,GAAAgb,CACArgB,GAAAoP,IAAAwR,UAAAA,QPi7CU5gB,EAAUoB,QAAQpB,QAAQ,gFO76CpC2gB,EAAA5X,MAAAA,GPg7CQ,GO76CRH,GAAAa,EAAA3I,EAAAA,WAEAuE,EAAAO,EAAAqD,EAAAA,EAAAA,EACAnI,GAAAA,SP66CUd,EAAQ,GAAG4gB,iBAAiB,OAAQvb,EAAO+a,iBOx6CrDtd,IAAAA,GAAAuG,EAAAF,OAAAG,GAAAA,QAAAC,OAAAA,IAAAA,MP26CQzG,GOz6CRuC,OAAAua,EAAAA,SAAAA,EAAAA,GACA9e,EAAA+E,SAAAA,EAAAA,GAAAA,KAAAA,SAAAA,GACAR,EAAAO,OAAAqD,GAGAnI,EAAA+E,cAGA,GPu6CQ/C,EOt6CRlD,OAAAA,EAAA+e,QAAAvd,SAAA4e,EAAAlf,GPu6CUuE,EOt6CV4E,qBPu6CUnJ,EOt6CVwE,YPu6CW,GACHxE,EOt6CRmD,QAAA7C,WPu6CU,GOt6CV6I,GACAA,CPu6CcrK,GOt6Cd+e,UAAAvd,QAAA4e,QAAAlf,EAAA0I,cPu6CYS,EOt6CZA,EAAA4W,YAAA1P,IAAA,SAAA7P,GPw6Cc,MADAgE,GAAQD,EAAO4a,UAAU3e,GOr6CvC,KAAAgE,EAAAD,EAAAH,OAAAH,SAAAO,GAAAkF,OAAA,IACAlF,OAAAD,QAAA4a,WPw6CchW,EOv6CdA,EAAA3E,QAAA1F,EAAAyF,WAAAN,EAAAO,WPu6CyB2E,EAAS/D,OAAS,KAAOtG,EAAQuf,eAAiB3e,EAAS2e,eAE3DlV,EAAS4W,KAAK,QOl6CvCvb,EAAAhE,EAAAA,UAAA4E,EAAAsD,aPs6CYS,EAAqB,KAAV3E,EAAeD,EAAOH,OAAOH,SAASO,GAAOkF,OAAQ,GOj6C5E1H,EAAAN,MAAAyH,GAAArK,EAAAmf,cAAAnf,EAAAkf,WAAAte,EAAAse,aAEAlf,EAAA+e,WACAtZ,EAAAyb,SAAA,SAAAxf,GPo6CY,OAAQA,GAA0B,IAAjBA,EAAM4E,SAG3BpD,EAAM4H,IAAI,WAAY,WQ3zD9BrK,GAAAgF,EAAAoF,UAKAsW,EAAAngB,KAEAJ,EAAAI,YR4zDEQ,QQtzDFkD,OAAAA,4BAAA,kCAAA,sCAAA0c,SAAArc,aAAAoJ,WRuzDI,GQrzDJgT,GAAAE,KAAA7f,WACAZ,EAAAY,KAAAA,UACA8f,SAAAC,IAIAC,SAAAjV,IRmzDM6B,OQlzDN,IRozDIpN,MQjzDJ0D,MAAA+c,UAAAA,YAAArc,aAAAA,aAAAA,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GRqzDM,QQ/yDNsc,GAAAC,EAAAA,GACA,MAAAC,GAAAD,GAAAA,UAAAvhB,EAAA,GAAAJ,SAAA4R,gBAAAA,EAAAA,cRizDM,QQ7yDNuP,GAAAU,GR8yDQ,GQ7yDR7hB,GAAAmhB,QAAAS,UAAAA,EAAAA,ER8yDa5hB,GAAQI,UAASJ,EAAQI,QAAUmhB,EQ3yDhD,IAAAO,GAAAA,EAAAA,EAAAA,QAAAA,QAGAC,EAAAA,EAAAA,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,SAAAA,EAAAA,EACA,IAAAC,EAAAA,GAEA,MADAd,GAAAe,GAAAA,UACAC,EAAAA,EAEA,IACAC,GAEAC,EAOArhB,EAGAshB,EACAC,EACAb,EACAL,EACAK,EAjBAa,KAKAtb,EAAAA,EAAAA,oBAEA6a,IA+JA7e,OR+oDQ6e,GQlyDRM,KAAAA,WACAL,KAAAA,QAAAA,EACAC,EAAAA,EAAAjd,KAAAA,cAAA/E,EAAAshB,UACAc,EAAAA,EAAAA,KAAAA,cAAAA,EAAAA,UAGAV,EAAAE,GAAAA,QAAA5gB,KAAAwhB,4BRiyDUnB,EQhyDVO,GAAAA,SAAAE,GRiyDUJ,EAASlV,GAAG,SAAU+V,GACtBH,EAAwBd,EAAStgB,KAAKyhB,aAAcziB,EAAQshB,UQ7xDtEQ,EAAA/c,EAAA+F,IAAA,qBAAAsX,GAGAphB,EAAA6gB,EAAAA,IAAAA,wBAAAA,GACAO,IACAR,IR6xDYT,EAAMS,GAAYE,IAGtBA,EQ1xDRhV,QAAA,WACAiV,KAAAA,UACAC,KAAAA,QAAAA,IR6xDUN,EAAS5U,IAAI,QAAS9L,KAAKwhB,4BAC3BnB,EAASvU,IAAI,SAAUwV,GQxxDjCR,EAAAY,IAAAA,SAAAA,GAGAX,IAGA9a,IAGAob,SAGApb,GAAAA,KRoxDQ6a,EQ/wDR/U,cAAAmV,WRgxDU,GQ/wDVA,EAAAza,OR+wDU,CAGA,GAFAR,GQ/wDVkb,EAAAD,EAAAA,YAAAR,EAAA9S,KAAA,eAAA,ERgxDUyT,EQ/wDVpb,KAAAib,IAAAA,EAAAnV,YAAA4V,EAAA/T,KAAA,iBACA3H,EAAAib,EAAAjb,GAAAA,WAAAib,IAAAA,EAAA,GAAAnX,OACA,MAAA+W,GAAAc,iBAAAV,EAAAnV,GRixDU,KAAK,GAAIA,GAAImV,EAAe5b,OAAQyG,KQ5wD9C+U,IAAAA,QAAAU,YAAAA,EAAAzV,GAAAjG,YAAA,OAAAob,EAAAnV,GAAAjG,WAGA+b,IAAAH,EAAA3V,GAAAhC,UR4wDgB9D,EAAYib,EAAenV,GAAGjG,WQvwD9Cgb,EAAAc,EAAAA,IAAA3b,EAAA7G,EAAAA,EAAAA,GAAAA,WACA,MAAA+hB,GAAAS,iBAAAV,EAAAnV,MR2wDQ+U,EQxwDRlB,2BAAA,WRywDUiC,WQxwDVtW,EAAAqU,cAAAkC,IR0wDQhB,EAAWc,iBAAmB,SAASxiB,GACrC,GAAI+hB,EAAc,CAChB,GAAIvB,GAAgBkB,EAAWiB,mBAAmBZ,EQvwD9DA,KACA/hB,EAAAyS,OAAAmB,YAAA,UACAzH,EAAAnM,EAAA0iB,OAAAvW,OAAAnM,EAAA0iB,EAAAtQ,OAAAA,SAAAA,SAAA,OACApS,EAAAoS,OAAAA,SAAAK,SAAAmB,YAAA,WAKAmO,EAAAF,EAAA5d,ORwwDUjE,EQvwDV0iB,OAAA/X,SAAAA,UACAwB,EAAAnM,EAAA0iB,OAAA,OAAAvW,EAAAnM,EAAA0iB,OAAAtQ,SAAAA,SAAA,ORwwDYpS,EAAQ0iB,OAAOtQ,SAASA,SAASK,SAAS,WAG9CiP,EQnwDRkB,mBAAAvU,SAAAwU,GRowDU,MQnwDVC,GAAApc,OAAAkc,SAAAA,GACA,MAAAhjB,GAAAA,SAAAkjB,IRowDa,IAELpB,EQjwDRzT,aAAAvH,WRkwDUtF,QQhwDVC,QAAAwgB,EAAA/B,SAAAA,GACA,GAAA8C,GAAAlc,EAAAA,cAAAA,EAAAA,ORiwDYoc,GAAepc,UAAYkc,EAAgB7U,EAAWC,OAAO4U,GAAe/U,IAAM,KQ9vD9FqU,EAAAA,QAAAA,OAAAA,EAAAA,YAAAA,EAAAA,WAAAA,EAAAA,EAAAA,UAIAR,EAAAqB,EAAApY,OAAAA,SAAA+X,GACAb,MAAA9X,QAAA8X,EAAAA,YAAAlX,KAAAA,SAAAA,EAAAA,GAAA+X,MAAAA,GAAAA,UAAAA,EAAAA,YRiwDUR,KAEFR,EQ/vDRsB,aAAAA,SAAAA,EAAAA,GACAnB,EAAAA,MACAlX,OAAAkX,ERgwDYa,OQ/vDZM,KRkwDQtB,EAAWuB,eAAiB,SAAStY,EAAQ+X,GAE3C,IAAK,GQhwDfb,GRgwDmBlV,EAAIkV,EAAgB3b,OAAQyG,KQ7vD/C+U,GAAAA,EAAA/U,GAAAhC,SAAAgC,GAAAA,EAAAA,GAAAA,SAAAA,EAAAA,CACAkV,EAAAA,CR+vDc,OAGJA,EAAgBxE,OAAO2F,EAAU,IAEnCtB,EAAWvc,SAAW,SAASwH,GQpvDvC5E,EAAA4E,GAAA8F,SAAA,WAGAtK,EAAA2J,OACA4P,ERonDM,GQ/yDNT,GAAArhB,QAAAwB,QAAAQ,GACA2gB,EAAA3iB,QAAAI,QAAAJ,EAAAI,KAAAmhB,oBACAA,EAAAI,QAAApV,QAAAvM,EAAAI,SAAAuO,KR+6DM,OQpvDNzL,ORsvDKiF,UQrvDL3G,eAAA,aAAA,WAAAK,aAAAA,aAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GRsvDI,OACE0G,SAAU,MACVtF,KQpvDNqgB,SAAAxB,EAAA9hB,EAAAA,GACAsjB,GAAAA,IAEApgB,MAAA4H,ERqvDQtJ,SQnvDR8hB,SAAAD,SAAAA,UAAAtY,SAAA3K,GACAkjB,QAAAzY,UAAAA,EAAAA,MAAAA,EAAAA,GAAAA,EAAAA,KRqvDQ,IQnvDR7K,GAAA8hB,EAAA9hB,ERovDQsjB,GQnvDRA,aAAAtjB,EAAA+K,OAAA3K,GRovDQ8C,EAAM4H,IAAI,WAAY,WAChBwY,IACFA,EAAUD,eAAerjB,EAAQ+K,OAAQ3K,GQ7uDrD+H,EAAA0C,WAGAtC,EAAA,KACAtH,EAAA,YRivDOkH,UQ7uDPob,mBAAA,aAAAjb,WAAA,aAAAib,aAAA,SAAAxe,EAAAuc,EAAAnT,EAAA2T,GR8uDI,OACEvZ,SAAU,IACVtH,QAAS,SAAkBb,EAASkI,GAClC,GAAI/E,GAAWnD,EAAQ,GAAGiU,iBAAiB,eSz+DnD7S,SAAAf,QAAA8C,EAAA,SAAAigB,GAIA5iB,GAAAA,GAAAA,QAAAA,QAAAA,EACAC,GAAA2R,SAAAlK,KAAA,eAAA,IAAAA,KAAA,cAAAib,EAAAjb,KAAA,gBT4+DE9G,QSp+DFzB,OAAAA,0BAAA,2BAAAiE,SAAA,WAAA,WTq+DI,GSp+DJxB,GAAAA,KAAA5B,UACAmD,UAAA,UACAG,YAAA,GACAtB,WAAA,EACAsI,QAAA,EACAuY,UAAA,QACAtf,YAAA,2BACAiH,iBAAA,ETq+DMrH,QAAS,QSl+Df/C,UAAA0D,EAEA9B,MAAA,ETm+DMsI,MSh+DNlL,GTi+DMyjB,QS/9DNC,GTg+DMvf,MS79DNnE,ET89DMoL,WS79DNsY,ET+9DI1iB,MS59DJ0D,MAAAgf,WAAAA,SAAAA,GT69DM,QAASC,GAAevjB,EAASgF,GSz9DvC,GAAApF,GAAA2jB,QAAAA,UAAAA,EAAAA,GT29DYD,EAAW1e,EAAS5E,EAASJ,ESh9DzCuI,OALAJ,GAAAsb,UAEAG,EAAAA,OAAAA,QAAA9e,EAAA8e,SAGArb,EAEAtF,MAAA0gB,OTs9DKxb,USl9DLnI,aAAAA,UAAAA,OAAAA,WAAAA,SAAAA,EAAAA,EAAAA,GTm9DI,GAAI4jB,GSn9DR1gB,EAAAA,uBAAAA,EAAAA,UTo9DI,QACEqF,SSp9DN9G,MTq9DMyB,OSp9DN,ETq9DMD,KAAM,SAAkBC,EAAO9C,EAASkI,GSj9D9C,GAAAG,GACAjH,GACA0B,MAAA1B,EAIAA,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAA,kBAAAI,YAAAA,YAAAA,QAAAA,UAAAA,OAAAA,YAAAA,cAAAA,YAAAA,KAAAA,cAAAA,cAAAA,aAAAA,SAAAA,GACA6G,QAAAvC,UAAAtE,EAAA8G,MAAAC,EAAAA,GAAA/G,EAAAgH,KTk9DQ,ISh9DR7I,GAAAkD,eTi9DQ1B,SAAQC,SAAU,OAAQ,YAAa,aAAe,SAASI,GACzDL,QAAQ2E,UAAUmC,EAAKzG,KAAS4G,EAAiBK,KAAKR,EAAKzG,MAAO7B,EAAQ6B,IAAO,KS58D/FL,QAAAA,SAAA2E,eAAAuO,SAAA,eAAA,UAAA,SAAA7S,GACA,GAAA4G,GAAAA,KAAAA,EAAAK,OAAA4L,GAAAA,cAAA7S,EAAAgH,MAAA,EACA7I,SAAA+K,UAAAzC,EAAAI,MT+8DY1I,ES98DZ6B,GAAAqB,EAAAuR,MAAAnM,EAAAI,MTi9DQ,IAAIgM,GAAatU,EAAQkI,KAAK,cS38DtC9G,SAAAC,UAAAiT,KACApM,EAAAQ,KAAA4L,GACApM,EAAAsM,QAAA/S,ET88DY7B,ES58DZwB,OAAA2E,GT+8DQ3E,QAAQC,SAAU,QAAS,WAAa,SAASI,GAC3CyG,EAAKzG,IACPyG,EAAKsM,SAAS/S,EAAK,SAAS6H,EAAUC,GACpCzG,EAAMrB,GAAO4P,EAAKC,YAAYhI,GAC1BlI,QAAQ2E,UAAUwD,ISz8DpCrB,EAAA,WACAkB,GAAAqa,EAAA7Q,wBAMA1K,EAAA9G,WT28DU0B,ES18DV0gB,OAAAA,EAAAA,UAAA,SAAAla,EAAAC,GACAnI,QAAAsiB,SAAAA,GT28DctiB,QAAQQ,OAAOkB,EAAOwG,GSx8DpCxG,EAAAugB,QAAA/Z,EAIApB,QAAAwM,UAAAnL,IACAzG,EAAA,WACA4gB,GAAAtiB,EAAA2E,sBT28Da,GAEDmC,ESx8DZwb,QTy8DU5gB,EAAMsG,OAAOlB,EAAKwM,OAAQ,SAASpL,EAAUC,GACtCma,GAAYtiB,QAAQ2E,UAAUuD,KAC/BlI,QAAQG,SAAS+H,KAAWA,IAAaA,EAASqL,MAAM,wBSr8DxEzM,KAAA,EACApF,EAAAsG,OAEAsa,EAAAtiB,UT08DY8G,ESt8DZwb,WTu8DU5gB,EAAMsG,OAAOlB,EAAK+C,UAAW,SAAS3B,GAC/Boa,GAAYtiB,QAAQ2E,UAAUuD,KAC/BlI,QAAQG,SAAS+H,KAAWA,IAAaA,EAASqL,MAAM,0BSn8DxEzM,KAAA,EACApF,EAAAsG,YAAAgC,GAEAsY,EAAAtQ,YAAA9J,MAQAxG,EAAA4H,UACA5H,EAAA4gB,OAAAA,EAAAA,SAAAjZ,SAAAA,GACA7K,GAAAwB,QAAA2E,UAAAuD,IACAoa,EAAAtQ,YAAA9J,KTm8DQoa,EAAUJ,EAAStjB,EAASJ,GAC5BkD,EAAM4H,IAAI,WAAY,WUnmE9BrK,GAAAqjB,EAAAjZ,UAIAjK,EAAAI,KACA2b,EAAA,YVsmEEnb,QUhmEFf,OAAA,4BAAAuD,SAAA,UAAA,WVimEI,GUjmEJpD,GAAAA,KAAAA,UVkmEM+b,YAAa,SACboH,UAAW,mBU9lEjB5b,QAAAA,EAIAnH,MAAA0D,KAAA,WACA6D,OACAtF,SAAArC,MVgmEKuH,UU3lEL3G,YAAA2E,UAAAtE,YAAAA,UAAAA,SAAAA,EAAAA,EAAAA,GV4lEI,GAAIjB,GAAWojB,EAAQpjB,QACvB,QACE2H,SUxlEN,IVylEMtF,KUvlEN,SAAA0G,EAAAA,EAAAA,EAAAA,GVwlEQ,GUtlER3J,GAAAikB,QAAA7jB,KAAAQ,EVulEQY,SUrlERA,QAAAC,OAAAwiB,KAAAA,GAAAC,SAAAA,GAEA1iB,QAAA2iB,UAAA3iB,EAAApB,MAAA8jB,EAAAA,GAAAA,EAAAA,MVslEQhhB,EUplERsG,OAAAxJ,WVqlEU,MUplEVokB,GAAAC,QVqlEW,SAAS3a,EAAUC,GACpB,GUplEVsa,GAAA7jB,EAAAkkB,GAAAF,iBAAA,MAAApkB,EAAA+jB,UAAA,IVqlEUviB,SUnlEV+iB,QAAAzb,EAAAY,SAAAwa,GVolEY,GUnlEZC,GAAAtR,QAAA7S,QAAA2c,GVolEgByH,EUnlEhBD,EAAA7b,KAAAtI,EAAA+jB,WAAAlhB,QAAA,IAAA,MACAshB,GAAAnQ,SVolEcoQ,EAAU,IAAMA,EAAU,IAE5B,IAAIG,GAAS,GAAID,QAAOF,EAAS,IAC7BG,GAAOzb,KAAKY,GACdya,EAAUtR,SAAS7S,EAAQ2c,aW3oEzClc,EAAAuT,YAAAhU,EAAA2c,sBXopEEnb,QW1oEFwJ,OAAA,wBAAA,sBAAA,sCAAAhH,SAAA,SAAA,WX2oEI,GW1oEJjE,GAAAiB,KAAAJ,UACAL,UAAA,UACAiC,kBAAA,UACAyB,YAAA,GACA7D,YAAA,QACAokB,YAAA,QACAtgB,UAAA,MACAtB,YAAA,uBACA4E,SAAA,GACAid,iBAAA,EACAC,WAAA,EX2oEMtkB,QAAS,KWxoEfY,UAAA0D,EAEAR,UAAAzC,EACAmB,MAAAghB,EACApc,MAAAmd,EAEAF,KAAAG,KACAF,OAAAG,KXyoEI7jB,MWtoEJ0D,MAAAogB,UAAAA,aAAAA,cAAAA,WAAAA,WAAAA,OAAAA,aAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GXipEM,QAASC,GAAa3f,GAoIpB,QWrlER4f,KAEA9hB,EAAAA,MAAAgD,EAAAlG,YAAAH,QAAAmlB,GACAxjB,QAAA2E,UAAAnG,EAAAiM,SAAAzK,QAAA+E,WAAAvG,EAAAiM,SXqlEYjM,EAAQiM,OAAO+Y,GAyBnB,QAAS9Y,KW3kEjBhJ,EAAAlD,MAAAa,EAAAA,YAAA,QAAAmkB,GACAL,QAAAA,UAAA3Q,EAAAhU,SAAAc,QAAAyF,WAAAvG,EAAAa,SX6kEYb,EAAQoM,OAAO4Y,GWzkE3BA,EAAA,UAAA1e,QAAA,GACAqe,EAAA5T,YAAA/Q,EAAAc,YAAA,SX6kEcd,EW3kEda,WACAmkB,EAAAxd,YAAAA,EAAAA,YAAAA,SAAAA,EAAAA,WA2BA,QAAAyd,KACAjlB,EAAAwkB,WACAU,EAAApY,GAAAA,QAAAqY,GACAC,EAAAtY,GAAAA,QAAAqY,GACAC,EAAAtY,GAAAA,QAAAuY,IAIA,QAAArY,KACAhN,EAAAkE,WACAghB,EAAA1Y,IAAA,QAAAwY,GXmkEYI,EAAgBtY,IAAI,QAASqY,GAC7BC,EAAgBtY,IAAI,QAASuY,IAGjC,QWjkERH,KXkkEcllB,EAAQkE,UACVghB,EAAa1Y,GAAG,QAASwY,EAAO9X,UAGpC,QW9jERlN,KACAglB,EAAA3S,UX+jEY6S,EW9jEZpY,IAAA,QAAAkY,EAAA9X,UXikEQ,QAASiY,GAAoBvf,GW5jErCA,EAAAyf,SAAAA,EAAAA,gBACA3e,WAAAA,EAAAA,SX8jEYse,EAAO3S,QW1jEnB2S,EAAAA,QX+jEQ,QAASK,GAAoBzf,GWzjErCA,EAAA0f,iBX4jEQ,QW1jERA,KX2jEcN,EAAOjU,UAA6B,OAAjBmU,IWxjEjCD,IACAC,KX2jEcI,IACFA,EAAWrU,WWvjEvBqU,EAAAN,MAMAE,IAEAhiB,EAAAA,SXojEYgiB,EAAeF,EAAOtd,SAAW,MWz2E7C,GAAA1H,MACA6kB,EAAAA,EAAAvV,SAAAtP,QAAA0kB,UAAA9jB,EAAAwE,GACAmgB,EAAAA,EAAAA,SAAAV,EAAA5jB,QAAAjB,GXioEYkD,EAAQ8hB,EAAO1f,OAAStF,EAAQkD,OAASlD,EAAQkD,MAAMkO,QAAUrM,EAAWqM,MW3nExF4T,GAAAhlB,SAAA4R,EAAA5R,YAGAyB,EAAAwC,UAAA,QX4nEYjE,EAAQ0kB,SWvnEpBxhB,EAAAoM,SAAAtP,EAAA0kB,OAAA,IACAxhB,EAAA2hB,EAAA,IX0nEQG,EAAO1T,IAAMtR,EAAQ4R,IAAM5R,EAAQI,SAAWJ,EAAQI,QAAQkI,KAAK,OAAS,GAC5E7G,GAAU,QAAS,WAAa,SAASI,GWvnEjD2jB,EAAA3jB,KAAAqB,EAAArB,GAAA4P,EAAAC,YAAA1R,EAAA6B,OX0nEQqB,EWxnER8hB,MAAAxd,WXynEUtE,EAAMmC,aAAa,WACjB2f,EAAOrd,UAGXzE,EWxnER8hB,MAAAtY,WXynEUxJ,EAAMmC,aAAa,WACjB2f,EAAOxd,UWlnEnBtE,EAAAgiB,QAAAA,WACAhiB,EAAAoiB,aAAAA,WACAF,EAAAA,YXwnEQJ,EWvnERjU,SAAA7N,EAAA6N,UAAA,CXwnEQ,IWxnER7C,GAAAuX,EAAAhW,EX2nEY2V,EAAkB5jB,QAAQpB,QAAQ,eAAiBJ,EAAQc,YAAc,eA0M7E,OWp0ER8K,GAAA4D,KACAwC,SAAAA,QACAgT,IAAAA,MX4nEU9W,KAAM,MWznEhB8W,OAAA9S,MAGAzC,MAAAzP,QX0nEQ4L,EWxnERoZ,KAAAxd,SAAAA,GXynEUwK,EAAcjR,EACdikB,EAAO9S,SWpnEjB8S,EAAAna,KAAAA,WAGA6a,EAAAA,MAGAxiB,EAAAkiB,aAAA,WACAA,EAAAA,UXsnEQJ,EAAOna,QAAU,WW9mEzBma,IACAA,IAEAI,EAAA5S,SACA4S,EAAA7S,MXgnEUrP,EW9mEVsP,YXgnEQwS,EAAOxd,KW9mEf,WX+mEU,IW9mEVwd,EAAAhlB,SX8mEU,CACA,GW9mEVwS,GACAD,CXuoEU,IAxBI/Q,QW9mEd4Q,UAAApS,EAAAiE,YX+mEYuO,EW9mEZA,EAAAvO,UX+mEYsO,EW9mEZA,EAAAvS,UAAAI,GAAAA,UAAAA,QAAAA,QAAAA,EAAAA,UAAAA,GAAAA,WAAAA,MXgnEgBJ,EAAQiE,WW3mExBihB,EAAAA,EAAAQ,EAAAA,WAIAJ,EAAAA,EAAAN,IAAA1f,EAAA8L,GAAAA,UAAAA,QAAAA,QAAAA,EAAAA,GAAAA,WAAAA,OAIApR,EAAAwkB,KAEAU,EAAAA,EAAA1V,SACA4V,GAAA5V,IXymEU8V,EWzmEVK,EAAAJ,OAAAA,OX0mEUL,EAAeF,EAAOtd,SAAWsK,EAAY/O,KAAKqiB,EAAY,SAAS1S,EAAe1P,MWvmEhG0hB,EAAAA,WXymEYM,EAAa1V,KWtmEzBtM,UAAAgD,EAAA,GAAArG,IXymEYulB,EAAgB5V,KWtmE5BhO,UAAA2E,EAAA3E,GAAA8Q,IXymEYsS,MWpmEZlS,EAAAA,MAAA1S,EAAAH,YAAA,eAAAmlB,GAAAY,iBXsmEU,CWlmEVV,QAAAA,UAAArS,EAAA7S,eAAA6lB,QAAAA,WAAAA,EAAAA,eXsmEY7lB,EAAQsS,aAAa0S,GAEvBE,EWnmEV9kB,KXomEYsS,QAAS,UWhmErBG,SAAAhS,EAAAA,WACAb,EAAAA,aXkmEYklB,EWjmEZE,SAAAvS,EAAA7S,aAEAklB,EAAAA,MAAArS,EAAA7S,EAAAa,OXkmEYW,QAAQpB,QAAQmC,EAAY,gBAAiB2iB,EAAa,KAAKrS,SAASiS,EAAW9kB,EAAQykB,OW9lEvGvR,EAAAvG,YXimEgB3M,EAAQwkB,UW5lExBhjB,EAAAyR,SAAAjT,EAAA8lB,mBX+lEYZ,EW7lEZrS,SAAA7S,EAAAa,YX+lEcb,EAAQwkB,UW3lEtBQ,EAAAjU,MAAAA,EAAAA,EAAA,MAIA1C,QAAA6W,QAAAA,OAAA,EACAtB,EAAAA,MAAAA,EAAApR,EAAAD,EAAAY,GX4lEYD,EAASvG,MAAMuY,EAAc1S,EAAQD,GAAOpS,KAAKgT,GWvlE7D6R,EAAAhlB,SAAAa,EAAAkQ,UAAA,EX0lEUhL,EWzlEV4e,EX0lEU,IAAItW,GAAK6W,EAAa,EWtlEhCa,GAAAA,WACA/Y,EAAAA,UAGA2X,EAAAxR,SAAAA,EAAAA,YAAAA,SACAjQ,EAAAlD,WACA2kB,EAAAxe,SAAAnG,EAAAiM,YAAAzK,SAAA+E,EAAAvG,WXwlEU+lB,IACA/Y,OAQFgY,EAAOrd,KAAO,WWhlEtBnG,EAAAsR,WACAI,EAAAA,MAAAK,EAAA2R,YAAAhZ,eAAAA,GAAAA,mBXolEc1K,QAAQ2E,UAAUnG,EAAQqT,eAAiB7R,QAAQ+E,WAAWvG,EAAQqT,eW/kEpFrT,EAAAA,aAAAglB,GAGA9R,QAAAK,QAAA6R,OAAAA,EXglEYlS,EAASK,MAAM2R,EAAchZ,GW7kEzCnG,EAAA7C,MAAAA,GAAAA,KAAAA,GAIAiK,EAAAA,WX8kEYyX,IW3kEZ1R,EAAAhH,MAAAA,IAEA8Y,EAAAxjB,SAAA2E,EAAAnG,UAAAoM,EX6kEUrG,EW5kEVqG,GX6kEU6Y,IW3kEV9X,OAgBA6X,EAAA3S,OAAA,WACA6S,EAAAA,SX2kEYF,EAAOrd,OWpkEnBqd,EAAAgB,QXykEQhB,EAAO3S,MAAQ,WACb6S,EAAa,GAAG7S,SAElB2S,EWpkERhlB,SAAAwkB,SAAA5e,GACA,KAAAsf,EAAAA,OAAAF,EAAAG,WACAC,EAAAA,OACAA,EAAAA,oBXwnEeJ,EAET,QAASjf,GAAW7C,GW3iE1BiF,EAAAA,SAAAjF,EAAA4E,OAAA5E,EAAA4E,MAAAD,SAAA3E,EAAAqE,UAGAgB,QAAAA,GAAA6L,EAAAhU,GACA8C,MAAA1B,SAAApB,SAAAA,GAAAqO,GAAA4F,iBAAAD,IX8yDM,GWtoEN6R,GAAAzkB,QAAAC,QACAykB,EAAAphB,EAAA8e,uBAAA9e,EAAA+d,WXuoEU8B,EAAcnjB,QAAQpB,QAAQ0E,EAAQ2J,SAASE,MWpoEzDiW,EAAAG,EAEAF,EAAAG,KAGAO,EAAArU,KACA4T,GACAmB,GAAA/iB,WAEAgjB,GAAA,WXw3EM,OWziENlmB,OX2iEKmI,UW3iEL/H,WAAAA,UAAAA,OAAAA,SAAAA,SAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GX4iEI,OACEmI,SAAU,MACVrF,OW7iEN1B,EX8iEMyB,KW7iEN,SAAAkD,EAAAtE,EAAA7B,EAAA6B,GX8iEQ,GAAI7B,IW1iEZkD,MAAAlD,EACAA,QAAA6lB,EX4iEUre,MAAM,EWviEhBhG,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAAI,kBAAAA,YAAAA,WAAAA,WAAAA,OAAAA,YAAAA,YAAAA,oBAAAA,KAAAA,cAAAA,cAAAA,cAAAA,aAAAA,OAAAA,UAAAA,SAAAA,GACAL,QAAA2E,UAAAmC,EAAAzG,MAAAA,EAAA4G,GAAAA,EAAAK,MAIAtH,EAAAC,aACAzB,EAAA0I,YAAA7G,EAAAskB,WXyiEQ,IWviERnmB,GAAAkD,eXwiEQ1B,SAAQC,SAAU,WAAY,WAAY,OAAQ,aAAe,SAASI,GACpEL,QAAQ2E,UAAUmC,EAAKzG,KAAS4G,EAAiBK,KAAKR,EAAKzG,MAAO7B,EAAQ6B,IAAO,KAEvFL,QWriER8G,SAAA,eAAA,SAAA,eAAA,UAAA,SAAAzG,GXsiEU,GWriEVyG,GAAAsM,KAAA/S,EAAA8G,OAAAe,GAAAA,cAAAC,EAAAA,MAAAA,EACAzG,SAAArB,UAAA6P,EAAAA,MXsiEY1R,EAAQ6B,GAAOqB,EAAMuR,MAAMnM,EAAKI,OWhiE5ClH,QAAA8G,SAAA,QAAA,WAAA,SAAAzG,GACAqB,EAAAsG,IACAlB,EAAA9G,SAAAkC,EAAAA,SAAAgG,EAAAC,GACAnI,EAAAA,GAAAQ,EAAAkB,YAAAwG,OXuiEYpB,EWniEZ8d,SXoiEUljB,EAAMsG,OAAOlB,EAAK8d,QAAS,SAAS1c,EAAUC,GWhiExD0c,QAAArB,SAAAhlB,GAGAI,QAAAkI,OAAAvE,EAAA2F,GAIA2c,EAAAA,QAAAxb,IAEAwb,EX+hEQ,IAAIA,GAAQrB,EAAOhlB,EACnBI,GAAQoM,GAAGlE,EAAKvE,SAAW,QAASsiB,EAAM3Z,QAC1CxJ,EAAM4H,IAAI,WAAY,WYt9E9BgI,GAAAA,EAAAG,UACAzR,EAAA,KAIAoiB,EAAAA,YZy9EMpiB,QY58ENsR,QAAAG,MAAA,GAAAzR,QAAAsR,QAAAwT,IAAA,IZ68EI9kB,QY58EJ+kB,OAAAA,MAAAA,QAAA3U,SAAAA,UAAAA,WAAAA,SAAAA,EAAAA,GZ68EM,GAAIgS,GAAwB9e,EAAQ8e,uBAAyB9e,EAAQ0hB,6BAA+B1hB,EAAQ2hB,yBY18ElHF,EAAA3I,EAAAA,sBAAAA,EAAAA,4BAAAA,EAAAA,yBAAAA,EAAAA,kCACA8I,IAAAxhB,EACAyhB,EAAAD,EAAA,SAAA9I,GZ48EQ,GY38ER1Y,GAAAA,EAAA0hB,EZ48EQ,OAAO,YACLL,EAAqB3U,KYv8E/B,SAAA+U,GZ08EQ,GAAIC,GAAQ1hB,EAAS0Y,EAAI,OAAO,EAChC,OAAO,Ya1+Efnd,EAAAomB,OAAAD,IAQA5lB,Obs+EM2lB,GAAIG,UAAYJ,Eat+EtBhiB,Kb0+EElD,Qan+EFf,OAAAT,0CAAAoF,SAAAA,gBAAAA,Wbo+EI,Gan+EJ6D,GAAAA,KAAA8d,Ubo+EMxC,Oaj+ENxP,+Kbm+EI/T,Maj+EJ0D,MAAAsiB,SAAAA,KAAAA,SAAAA,EAAAA,Gbk+EM,Qah+ENC,GAAAA,EAAAA,GbkgFQ,Qax9ERvlB,GAAAwB,EAAA5B,Gby9EU,Max9EV+H,GAAAkI,IAAA,SAAAwD,EAAArP,Gby9EY,Gaz9EZhE,GAAAgE,EAAAkF,IAIA3B,Obw9EY3H,GAAO0lB,GAAajS,EACpBnK,EAAQsc,EAAUhkB,EAAO5B,GACzBI,EAAQylB,EAAQjkB,EAAO5B,Iaz9EnCsJ,MAAA3B,Eb49EcvH,MAAOA,Eax9ErB0lB,MAAAA,KAnDA,GAAAC,MAEAF,EAAAA,QAAAA,UAAAA,EAAAA,EACAle,GAAAY,UAEAZ,IAAAA,GACAA,EACAie,EACAF,EACAC,EACAI,EACAF,CCxBA5a,Odu/EQtD,Ga99ER4V,KAAA9J,Wb+9EU9L,EAAcM,OAASwL,EAAQzM,EAAKyM,MAAM/U,EAAQukB,Qa59E5Dtb,EAAAY,EAAAA,EAAA,IAAAkL,EAAA7R,IACA8jB,EAAA9kB,EAAA2H,IAAA3G,EAAAA,Gb89EU+jB,Ea59EVzlB,EAAA4e,Gb69EUiH,Ea59EVhe,EAAAA,EAAAA,IAAAA,Ib69EU8d,EAAUtI,EAAO9J,EAAM,GAAKA,EAAM,GAAKiS,GACvCnd,Ea59EVZ,EAAA8d,EAAAA,Kb89EQ9d,EAAcY,SAAW,SAAS3G,EAAOhC,GACvC,MAAOiB,GAAGD,KAAK2H,EAAS3G,EAAOhC,IAAaf,KAAK,SAASkJ,GAKxD,Ma/9EZJ,SAAAgB,QAAAA,KACA/G,MAEA+F,EAAAie,QAAAhkB,EAAAA,OAAAA,EAAAA,EAAAA,Mb49EmB+F,EAAc8d,WAGzB9d,Eax9ER3H,aAAAA,SAAAA,Gby9EU,Gax9EV4B,Kb09EU,OADAA,Gax9EVxB,GAAAA,EACAJ,EAAA0lB,IC3DApJ,EAAAA,OAOArR,EdgiFM,MAAO6a,OAGX5lB,QcvhFFpB,OAAAA,wCAAAknB,QAAA,aAAA,WdsnFI,Qcp+EJC,GAAAC,Gdq+EM,GAAIA,GAAapnB,EAAQqnB,cc39E/BzZ,EAAA5N,EAAAA,cAAAsnB,CACA,IAAAhmB,EAAAtB,EAAAwP,aAAAA,MAAAA,GAAAA,eACA,MAAA8X,IAAAnb,EAAAgb,EAAA,SAAA,WAAA3J,EAAApO,IAAA+X,EAAA,aACA7lB,EAAA8N,EAAA+X,Yd89EM,Oc59EN7lB,IAAAtB,EAAAsO,gBdu3EI,GcvhFJhN,MdwhFQ6K,EcvhFRob,EAAAA,SAAAC,SAAAxnB,EAAAud,GdwhFM,McvhFNjc,GAAAimB,UAAAC,EAAAxnB,SAAAwO,gBAAAA,EAAAA,cd8oFI,OArHAgP,GAAGpO,IcvhFP9N,SAAAtB,EAAAwO,EAAAA,GdwhFM,GAAIlN,EAQJ,OANEA,GcxhFRtB,EAAAynB,adwhFgBznB,EAAQ0nB,aAAalZ,Gc/gFrC+Y,EAAAC,iBACAG,EAAA3nB,iBAAAwN,GAAAA,GAEAxN,EAAA4nB,MAAApZ,GAEAZ,KAAA+Z,EAAA/Z,WAAA5N,IAAAwP,EAAAA,GdkhFIgO,EAAGxP,OchhFP2Z,SAAA7Z,GdihFM,GAAI6Z,GAAU3nB,EAAQwN,wBAClB4Z,EAAapnB,EAAQqnB,actgF/B7J,QACA7P,MAAAka,EAAAA,OAAAA,EAAAA,YACAja,OAAAka,EAAAA,QAAAA,EAAAA,aACAja,IAAAka,EAAAA,KAAAA,EAAAA,aAAAA,EAAAA,gBAAAA,YAAAA,EAAAA,gBAAAA,WAAAA,GACAja,KAAAka,EAAAA,MAAAA,EAAAA,aAAAA,EAAAA,gBAAAA,aAAAA,EAAAA,gBAAAA,YAAAA,Kd0gFIxK,EcvgFJxO,UAAAiZ,SAAAA,EAAAA,EAAAA,GACA,GAAAtZ,GACAuZ,EACA/Y,EAGAR,EACA3O,EdsgFUmoB,EcngFVC,EACAL,EAAA3Y,EAAAA,IAAApP,EAAA,YACAmoB,EAAA3K,QAAAxd,QAAAA,GACAioB,IAKAA,YAAAA,IACAJ,EAAAA,MAAArK,SAAA7O,YdkgFMyZ,EchgFNP,EAAAA,OAAAA,GdigFME,EchgFNvK,EAAApO,IAAApP,EAAA,OdigFMmoB,EchgFN/W,EAAAA,IAAAA,EAAA2W,QdigFME,GchgFNE,aAAA/W,GAAA,UAAAzC,KAAAoZ,EAAAI,GAAA/K,QAAA,QAAA,GdigFU6K,Gc9/EVJ,EAAA1hB,EAAAA,SAAAvG,GACAA,EAAAA,EAAAyoB,IdggFQP,EAAUD,EAAY/Z,Oc5/E9BqB,EAAAtB,WAAAA,IAAAua,Ed+/EQN,EAAU1W,WAAW+W,IAAe,Gc5/E5ChZ,QAAArB,WAAAA,Kd+/EQlO,EAAUA,EAAQyoB,KAAKroB,EAAS2M,EAAGyb,Ic3/E3CC,OAAAzoB,EAAAqP,Md8/EQE,Ec7/ERtB,IAAAjO,EAAAiO,IAAAua,EAAAva,IAAAma,GAEA,OAAAna,EAAAsB,Od8/EQA,Ec7/ERrB,KAAAqB,EAAArB,KAAAsa,EAAAta,KAAAga,Gd+/EU,SAAWloB,GACbA,EAAQqP,MAAMoZ,KAAKH,EAAS/Y,Gcn/EpC+Y,EAAAI,KAAAza,IAAAsB,EAAAtB,IAAA,KAAAC,KAAAqB,EAAArB,KAAA,Qd2/EI0P,Ect/EJ7O,SAAA3O,SAAAA,Gdu/EM,Gc3+ENuoB,GACAD,EAVAta,Gdq/EQH,Icn/ER,EAGA0a,KAAAA,EA4BA,Ody9E0C,UAAhC/K,EAAGpO,IAAIpP,EAAS,Yc5+E1BsoB,EAAAA,EAAAza,yBd++EQ0a,EAAiBC,EAAoBxoB,Gc1+E7CgO,EAAAwP,EAAAxP,OAAAhO,GACA2N,EAAA3N,EAAA2P,UACA/B,EAAA4B,EAAAA,OAAAA,IAEA1B,EAAAA,KAAAwa,EAAAA,IAAAA,EAAAlZ,kBAAA,Gd4+EQkZ,EAAiBxa,MAAQ0P,EAAGpO,IAAImZ,EAAgB,mBAAmB,Kcj+E3E5a,MAAAyZ,EAAApnB,YACA4N,OAAAuZ,EAAAA,aACAtZ,IAAA1B,EAAAgb,IAAAA,EAAAtZ,IAAA2P,EAAApO,IAAAgY,EAAA9Y,aAAAA,GACAR,KAAAqZ,EAAAA,KAAAA,EAAAA,KAAAA,EAAA/X,IAAApP,EAAAoP,cAAA+X,Kdg/EI3J,Ec59EJ5P,OAAAtM,SAAAA,EAAAA,Gd69EM,GAAIA,GAAQtB,EAAQwP,YAMpB,Ocz9EN7B,GACArM,GAAAA,EAAAtB,IAAAA,EAAA2P,aAAAA,GAAAA,EAAAA,IAAAA,EAAAA,gBAAAA,GAEArO,GAAAkc,EAAApO,IAAApP,EAAA,cAAA,GAAAwd,EAAApO,IAAApP,EAAA,iBAAA,GAAAwd,EAAApO,IAAApP,EAAA,kBAAA,GAAAwd,EAAApO,IAAApP,EAAA,qBAAA,GAEAsB,Gds9EIkc,Ecp9EJ7P,MAAArM,SAAAA,EAAAA,Gdq9EM,GAAIA,GAAQtB,EAAQ2P,WezpF1B,ODuMA2X,Gdo9EQhmB,GAASkc,EAAGpO,IAAIpP,EAAS,cAAc,GAAQwd,EAAGpO,IAAIpP,EAAS,eAAe,Ge7pFtFsB,GAAAkc,EAAAiL,IAAAA,EAAAC,eAAAA,GAAAA,EAAAA,IAAAA,EAAAA,gBAAAA,GAAAA,EAAAA,IAAAA,EAAAA,mBAAAA,GAAAA,EAAAA,IAAAA,EAAAA,oBAAAA,GAEApnB,GAEAkc,IfiqFEpc,Qe/pFFf,OAAAqQ,sCAAAwW,QAAA,YAAA,WAAA,SAAApiB,GfgqFI,Me/pFJA,UAAA2hB,EAAA/V,EAAAA,GfgqFM,GAAIA,GAAU,IACd,Oe/pFNA,YfgqFQ,Ge/pFRA,GAAA9P,KACA+nB,EAAAD,UACAD,EAAAjlB,IAAAmlB,CAkBA,Of8oFYjY,IACF5L,Ee/pFV2hB,OAAA/V,GfiqFQA,Ee/pFRlN,EAAAolB,WfgqFUlY,EAAU,Ke9pFpBA,GfgqFY+X,EAAKjlB,MAAMolB,EAASD,IexpFhCzB,GAAA,GACA2B,GACAnY,EAAAA,MAAAkY,EAAAD,GAEAjY,Of6pFOwW,Qe1pFPxW,YAAA,WAAA,SAAA5L,Gf2pFI,Me1pFJ,UAAAlF,EAAAkpB,EAAAA,Gf2pFM,GAAIpY,Ge1pFVlN,If4pFM,OADK5D,KAASA,MezpFpB8Q,Wf2pFQ,Ge1pFRA,GAAA9P,KACA+nB,EAAA/oB,Sf2pFa8Q,KACC9Q,EAAQkpB,WAAY,GACtBL,Ee1pFZM,MAAAH,EAAAD,Gf4pFUjY,EAAU5L,EAAS,WACjB4L,EAAU,KACN9Q,EAAQopB,YAAa,GgB7sFrC3oB,EAAAmD,MAAAolB,EAAAD,IAOAM,GAAA,ShB8sFE7nB,QgBzsFFR,OAAAyY,wCAAAzV,SAAA,eAAA,kBAAA,SAAAslB,GhB0sFI,QgBzsFJC,KhB0sFMvoB,KAAKqoB,KAAO,KgBvsFlBG,KAAAA,MAAAC,EAAAzoB,KAAAuoB,IAAAA,EhB0sFMvoB,KAAKqY,MAAQ,EgBzsFnBmQ,KAAAA,QAAAC,EAAAzoB,KAAAyY,QAAA/X,EhB4sFMV,KAAKuoB,aAAe,EAwCtB,QgBltFJG,MhBmtFI,QgBltFJ1hB,GAAAqJ,GhBmtFM,OgBntFNlC,MAAApC,WAAAA,KAAAA,SAAAA,GhBqtFI,QAAS4c,GAAuB3hB,EAAOtG,GgBhtF3C,IAAAd,GAHAgpB,GAAA5hB,EAAA1B,OhBqtFUujB,EAAMnoB,EAAMooB,WAAWzY,cgBltFjCzQ,EAAAI,EAAAJ,EAAAI,EAAAJ,IACAuV,GAAAA,EAAApJ,GAAAsE,gBAAAwY,EACAE,MAAAhd,EAKA,OAAAid,GhB+pFIR,EgB7sFJjQ,UAAA7X,gBAAAA,SAAAA,GhB8sFMV,KAAKuoB,aAAe7nB,GAEtB8nB,EgB/sFJnQ,UAAA3X,WAAAA,SAAAA,GhBgtFMV,KAAKyY,QAAU/X,GAEjB8nB,EgBjtFJxoB,UAAAqY,WAAAA,SAAAA,GhBktFMrY,KAAKuY,QAAU7X,GAEjB8nB,EgBntFJS,UAAAvoB,SAAAA,SAAAA,GhBotFMV,KAAKqY,MAAQ3X,GAEf8nB,EgBrtFJU,UAAAxoB,SAAAA,WhBstFM,MAAOV,MAAKqY,OAEdmQ,EgBvtFJH,UAAA3nB,QAAAA,SAAAA,GhBwtFMV,KAAKipB,IAAMvoB,GAEb8nB,EgBxtFJH,UAAAc,SAAAA,SAAAA,GACAnpB,KAAAkpB,MAAAxoB,GhB0tFI8nB,EgBxtFJnQ,UAAA3X,YAAA6U,SAAAA,GACAvV,KAAAuY,KAAAA,GhB0tFIiQ,EgBxtFJD,UAAAA,SAAA3R,SAAAA,GAaA,MAZA5W,MAAAqoB,KAAAroB,EAAAA,chBytFMA,KAAKkpB,MAAQxoB,EAAM0oB,WgBttFzBZ,KAAAA,IAAAC,EAAAA,UACAzoB,KAAAqY,MAAAN,EAAA/X,WhBwtFMA,KAAKuY,QAAU7X,EAAMgX,agBrtF3B1X,KAAAqpB,QAAAb,EAAAC,aAEAzoB,KAAAuoB,aAAAG,EAAAA,kBAGAY,MhBqtFId,EAAUC,UAAUc,OAAS,WgBjtFjC,MAAAZ,IAAAA,MAAAA,KAAAA,KAAAA,KAAA3hB,MAAAtG,KAAAA,IAAAA,KAAAA,MAAAA,KAAAA,QAAAA,KAAAA,QAAAA,KAAAA,chBotFI,IgBltFJ2oB,GAAA3oB,EAAAooB,UAkBAlpB,EAAAub,KAAAA,UhBgtFMhG,OgB7sFNqU,YhB8sFMT,QgB7sFNU,EhB+sFIzpB,MAAK0D,MgB7sFT1E,UAAA+pB,aAAA,SAAAW,EAAAC,GhB8sFM,GgB7sFNC,GAAA,SAAAxlB,GhBy1FQ,QgB9qFRylB,GAAA1U,GACA,GAAA2U,GAAAA,EAAAC,EACA,OAAAC,GAAAC,GhBgrFQ,QgB7qFRzpB,GAAA2U,GhB8qFU,GgB7qFV+U,GAAAC,EAAAhV,GACAiV,EAAAC,EAAAD,QAAAA,MAAAA,QhB8qFcP,EgB7qFd,kBAEAC,EAAAC,EAAAzkB,MAAAyG,GhB6qFcie,EgB5qFdlf,OAAAkf,KAAAA,GhB6qFcM,IAWJ,OAVA9pB,SAAQC,QAAQqpB,EAAa,SAASM,GgB3qFhDE,GAAAA,EAAAF,GhB6qFcA,EAAOC,EAAuBD,OAE9B,KAAK,GAAIre,GAAI,EAAGA,EAAIie,EAAa1kB,OAAQyG,IgBzqFvDqe,EAAAG,EAAAA,MAAAA,EAAAC,IAAAA,KAAAA,KAAAA,EAAAA,IAaAF,GAAAH,KAAAA,KhBkqFiBG,EAAerK,KAAK,IAE7B,QgB/pFRuK,GAAAA,GhBgqFU,MAAOA,GAAK3oB,QAAQ,MAAO,UAAUA,QAAQ,KAAM,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,OAAQ,SAEtO,QgB9pFRmoB,GAAAC,GACA,MAAAQ,SAAAC,KAAAA,GhBgqFQ,QgB5pFRD,GAAAD,GhB6pFU,MAAOA,GAAK3oB,QAAQ,WAAY,MAElC,QAAS8oB,GAAoBD,GgBvpFrC,IAAA,GAFAV,GAAAY,OAAAzV,KAAAA,GACAsV,EAAAI,EACAC,EAAAA,EAAAA,EAAAA,EAAAL,OAAAA,IhB2pFYA,EAAKA,EAAG3f,MAAM,KAAOiB,EAAI,KAAKkU,KAAK,IAAMuJ,EAAUQ,EAAaje,IAAM,IgBvpFlF,OAAAie,IAAAA,QAAAA,IAAAe,EAAAd,KAAAT,MhB2pFQ,QgBzpFRwB,GAAAA,GACA,GAAAC,GAAAA,EAAAA,EACA,OAAAC,GAAAA,GhB2pFQ,QgBzpFRC,GAAAA,GhBiqFU,IgB9pFV,GAEAD,GACAE,EAEAD,EhBupFcC,EgB5pFdpB,EAAAgB,OAAAK,KAAAA,GACAJ,EAAAD,GAAAA,QAAA,cAAA,KAOAG,KhBspFqE,QAAnDH,EAAcK,EAAYC,KAAKZ,KgBnpFjDvP,EAAAjK,EAAAA,GACAga,EAAA/P,EAAAA,GhBqpFYiQ,EAAgBG,EAASL,GgBjpFrCC,EAAAnC,KAAAA,EhBopFU,OAAOmC,GArMT,GgBxpFRhQ,GACAqQ,EAtDAC,EAAA1C,QAAA/nB,UAAApB,EAAAwE,GACAsnB,KACAC,GACAC,IAAA,WACAC,GAAA7sB,aACAigB,EAAAjgB,EAAA+pB,OAAA,cAAA,mBACA+C,GAAAA,aACAC,EAAAA,EAAArC,OAAAsC,cAAAC,mBACAC,GAAA,mBACAC,EAAAntB,EAAA+pB,OAAA,iBAAA,oBACAqD,GAAAA,oBACAC,EAAAA,EAAA3C,OAAAsC,eAAAM,iBACAC,EAAAA,QACAC,KAAAxtB,EAAA+pB,iBAAA0D,IAAAxM,KAAA,KACAyM,IAAAA,EAAAV,iBAAAC,SAAAhM,KAAA,KACA0M,GAAA,yBACAC,EAAA5tB,EAAA+pB,OAAA,yBAAA,2BhB8sFUqD,KAAM1C,EAAQsC,iBAAiBa,MAAM5M,KAAK,KgB3sFpDoM,IAAAd,EAAAA,iBAAAA,WAAAA,KAAAA,KACA9B,GAAAA,gBACAngB,EAAAA,EAAA4O,OAAAA,eAAAA,iBACA4U,KAAAzD,gCACAO,GAAAP,WACAoC,EAAApC,EAAApR,OAAAA,wBAAAA,kBAEA0T,GACAC,IAAAvC,EAAArR,gBACA6T,GAAAxC,EAAArR,WACA8T,EAAAA,EAAApD,WACAqD,GAAAA,EAAArD,WACAwD,EAAAA,EAAA7C,WACA8C,GAAA9C,EAAA0D,SACA9N,EAAAoK,EAAArR,ShB6sFU4T,GgB7sFVvC,EAAAhR,ShB8sFUwT,EgB9sFVxC,EAAArpB,ShB+sFU8rB,KAAMpD,EgB9sFhB0D,IAAAA,EhBgtFUF,GgBhtFV7C,EAAArpB,QhBitFUmsB,EAAG9C,EAAM0D,QgBhtFnBV,EAAAA,SAAA3rB,GAAA,GAAA2X,GAAA2U,KAAAA,WAAArE,EhBmtFY,OAAO3oB,MAAKgY,SAAStX,EAAMqT,MAAM,OAASsE,EAAQ,GAAKA,IAEzD+T,KgBptFV,SAAAY,GhBqtFY,MAAOhtB,MAAKgtB,SAASrE,EAAuBe,EAAQsC,iBAAiBa,MAAOnsB,KAE9E2rB,IgBttFV,SAAAW,GhButFY,MAAOhtB,MAAKgtB,SAASrE,EAAuBe,EAAQsC,iBAAiBM,WAAY5rB,KgBrtF7FisB,GAAA,SAAAjsB,GAAA,MAAAV,MAAA2a,SAAAA,EAAAja,EAAA,IACAksB,EAAA,SAAAlsB,GAAA,MAAAV,MAAAU,SAAA,EAAAA,EAAA4E,IhB4tFUonB,KAAMrD,EAAM1O,YgBxtFtBgS,GAAAM,SAAAA,GACAzB,MAAAA,MAAAA,YAAAA,IAAAA,EAAAA,IAGArQ,EAAAA,SAAA+R,GACAD,MAAAE,KAAAA,EAAAA,GAAAD,IAAA/R,EAAAA,OAAA+R,KAAAA,YAAAA,IAAAA,EAAAA,GAAAA,KAAAA,YAAAA,EAAAA,ICnHA,OjBg1FQ/R,GgBvtFR8R,KAAAnlB,WhBwtFUqT,EAAY+R,QAAUxD,EAAQsC,iBAAiBhtB,EAAQmW,SAAWnW,EAAQmW,OgBrtFpFgG,EAAAA,EAAAA,EAAAiS,SAEA5B,EAAArW,EAAAuU,EAAAsC,UhButFQ7Q,EgBrtFRkS,QAAAlY,SAAAgY,GACA,MAAAG,SAAAA,OAAAnY,IAAAyV,MAAAA,EAAAzV,WACAtQ,EAAAA,KAAAwoB,IhButFQlS,EgBptFR5E,MAAA6W,SAAAjf,EAAAif,EAAAzV,EAAAxD,GACAgB,IAAApJ,EAAAlH,EAAAS,iBAAA6P,IAAAA,GACA3U,QAAA8sB,OAAAvhB,KAAAuhB,EAAAA,EAAA/W,EAAA1R,GAAAsW,EAAA+R,QAAA/Y,GhBqtFU,IAAIkZ,GAAclY,EAASgY,EAAgBhY,GAAU8X,EgBltF/D/T,EAAAqQ,EAAAA,EAAAA,GAAAA,EAGAjb,EAAAiI,EAAA+U,KAAApS,EhBktFU,KgBjtFVrU,EAAA,OAAA,CAGA,KAAA,GhB+sFc0R,GAAO6W,IAAajf,MAAMif,EAASzV,YAAa,GAAI6Q,IAAY+E,SAASH,IAAY,GAAI5E,IAAY+E,SAAS,GAAIxV,MAAK,KAAM,EAAG,EAAG,IgB/sFjJmB,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,EAAAA,IhBitFgBoU,EAAavhB,IAAIuhB,EAAavhB,GAAG0b,KAAKlR,EAAM1R,EAAQkH,EAAI,GgB7sFxE,IAAAwK,GAAAA,EAAAA,QAEA,OAAA7V,UAAAA,EAAAuoB,IAAA,MAAA/P,EAAAsU,WACAC,EAEAvU,GhBgtFQiC,EgB9sFRuS,oBAAA,SAAA7sB,EAAAH,GhB+sFU,GgB9sFV6V,EhB+sFU,IgB9sFV/V,UhB8sFcE,EgB9sFdC,CACA4V,GAAAA,GAAA1V,GAAAkX,KhB+sFYxB,GgB9sFZ,GAAAwB,MAAA0V,EAAAtE,cAAAsE,EAAArE,WAAAqE,EAAAD,WAAA,YAAA3sB,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,YAAAA,EAAA,EAAA,QhBgtFY0V,GgB/sFZ/V,QAAAE,SAAAA,IAAAA,EAAAA,MAAAA,UhB+sFmB,GAAIqX,MAAKrX,EAAMitB,OAAO,EAAGjtB,EAAM4E,OAAS,IgB5sF3DiR,EAAAA,GhB8sFmB,GAAIwB,MAAKzJ,SAAS5N,EAAO,KgB3sF5CktB,QAAAA,SAAAA,IAAAltB,IAAAA,EAAAG,OACAsV,YAAAA,IAAAA,EAAAA,KAAAA,EAAAA,GAGA,GAAA4B,MAAAA,EhB6sFU,OgB3sFV5B,IhB6sFQgF,EgB3sFRyS,oBAAAltB,SAAAia,EAAAA,GhB4sFU,GAAIxE,EgBprFd,OhBsrFYA,GgB5sFZtV,QAAAsV,GACA,GAAA4B,OAAA4C,YAAA,KAAA,EAAA,GACAQ,QAAAA,SAAAza,IAAAqX,EAAAhE,MAAA,UhB4sFmB,GAAIgE,MAAKrX,EAAMitB,OAAO,EAAGjtB,EAAM4E,OAAS,IAAIqV,YAAY,KAAM,EAAG,GgBzsFpFxE,EAAAA,GhB2sFmB,GAAI4B,MAAKzJ,SAAS5N,EAAO,KAAKia,YAAY,KAAM,EAAG,GgB/rFtEkT,QAAAA,SAAAA,IAAAtX,IAAA7V,EAAA6V,OACA,YAAAA,IAAA/B,EAAAA,KAAAA,EAAAA,GhBksFmB2G,EAAYI,MAAM7a,EAAO,GAAIqX,MAAK,KAAM,EAAG,EAAG,KgBrrFjEoD,EAAAE,qBAAA,SAAA9E,GACA,MAAAA,IAIAA,EAAApC,SAAAA,EAAAA,WAAA,GAAAoC,EAAAhB,WAAA,EAAA,GACAgB,GAJA,MhB8rFQ4E,EAAYE,qBAAuB,SAAS9E,EAAMpC,EAAU2Z,GgBvrFpE,MAAAvX,IAYAkU,GAAAI,QAAAA,IACAtU,EAAAoU,GAAAA,MAAAA,EAAAA,WhBgrFYpU,EAAK0B,WAAW1B,EAAKmB,cAAgBoW,EAAO,GAAK,GAAKvX,EAAKwX,sBgB5qFvE7D,GhBwqFmB,MiBn5FnBlqB,EAAAguB,OACAtE,EAKA1pB,OAAAiuB,QjBu9FEztB,QiBn9FF0tB,OAAAA,2CAAA7X,QAAAA,kBAAAA,UAAAA,aAAAA,SAAAA,EAAAA,GjB69FI,QiB98FJ8X,GAAAja,GjB+8FM,MAAO,wCAAwCoX,KAAKnW,GAAQtN,MAAM,GAVpE7H,KiBn9FJguB,iBAAAhC,WjBo9FM,MAAOtC,GAAQ9Y,IAEjB5Q,KiBl9FJiuB,kBAAA,SAAA9Y,EAAAkB,GjBm9FM,MAAOqT,GAAQsC,iBAAiB7W,IAAWA,GAE7CnV,KiBh9FJkuB,cAAAC,SAAAja,GjBi9FM,MAAOwV,GAAQsC,iBAAiBC,UAKlCjsB,KiB58FJ8W,YAAAqX,SAAAja,GjB68FM,MAAOia,GAAgBja,GAAY,IAErClU,KiB18FJkX,cAAAiX,SAAAja,GjB28FM,MAAOia,GAAgBja,GAAY,IAErClU,KiBx8FJmX,cAAAgX,SAAAja,GjBy8FM,MAAOia,GAAgBja,GAAY,IAErClU,KiBt8FJgX,cAAAmX,SAAAja,GjBu8FM,MAAOia,GAAgBja,GAAY,IAErClU,KiBr8FJoX,YAAAuS,SAAAxU,GjBs8FM,QAASgZ,EAAgBja,GAAY,IE7/F3C1T,KAAAA,OAAA,SAAA0T,GAGA,QAAArR,EAAA1B,GAAAP,IF+/FIZ,KEh8FJkV,WAAA3V,SAAAgX,EAAApB,EAAAnW,EAAAA,GFi8FM,MEh8FNmB,GAAAoW,EAAApB,EAAAhB,OFm8FE3T,QAAQf,OAAO,0BAA2B2uB,QAAQ,cAAevrB,GAwFjErC,QGvlGFuC,OAAA,2BAAA,2BAAAC,SAAA,YAAA,WHwlGI,GGvlGJC,GAAAjD,KAAAJ,UACAsD,UAAA,UACAtB,YAAA,WACAuB,YAAA,WHwlGM6G,UAAW,cGrlGjBhK,YAAA,6BAEA+C,QAAAwd,QACAtd,WAAAorB,EAEAnrB,UAAAorB,EHqlGM1sB,MGnlGN2sB,EHolGMprB,MGjlGNnE,EHmlGIgB,MG/kGJuuB,MAAAA,UAAAnvB,aAAAJ,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GHklGM,QG5kGNsvB,GAAAjoB,EAAAjC,GHynGQ,QAASoqB,GAAY5pB,GGnjG7BuC,MAAAA,GAAA4C,SAAA3K,EAAA,GAEAwF,EAAAmF,SAAA3K,EAAA,IAAAmvB,EAAA5nB,OAFAQ,OHugGQ,GG5kGRonB,MACAvvB,EAAAwB,QAAAQ,UAAApB,EAAAwE,EH6kGQmqB,GAAUjqB,OAAStF,EAAQkD,OAASlD,EAAQkD,MAAMkO,QAAUrM,EAAWqM,OACvEme,EG5kGRvqB,EAAA8D,EAAAzB,EH6kGQ,IG5kGRzB,GAAAc,EAAAA,QH6kGQ6oB,GG5kGR5oB,WAAAA,SAAAA,GAGA,GAAA8oB,MAAAA,KAAAjuB,EAAAA,SAEA,WADA+tB,GAAAjpB,MH6kGU,IG1kGV,UAAA+oB,KAAAA,EAAAA,SH0kGU,CACAzpB,EAAIc,iBGvkGdd,EAAAA,iBAGA6pB,IAAAA,GAAA/pB,QAAA2M,QAAAA,EAAAA,SAAAA,GAAAA,iBAAAA,sBHukGU,IAAKod,EAAMnpB,OAAX,CGjkGV,GAAAkB,EACA+nB,SAAA/nB,QAAAioB,EAAA,SAAAphB,EAAAtB,GACAvF,GAAAA,EAAAA,KAAAA,EAAAA,YAAAA,EAAAA,KAIAtD,KAAA0B,EAAA5F,SAAAuvB,EAAAA,EAAA7nB,IAAA,KAAA6nB,EAAA7nB,SAAAhC,EAAA6pB,EAAA3nB,OAAAA,EAAAA,IAAAA,QAAAA,YAAAA,KAAAA,EAAAA,GHikGU6nB,EGhkGVlO,GAAA/U,GAAA,GAAA6F,UHkkGQ,IGhkGR7K,GAAAkoB,EAAAC,IHikGQJ,GAAU/nB,KAAO,WG9jGzBA,IACA+nB,EAAA5nB,WACA4nB,EAAAA,UAAAA,EAAA7nB,UAAA6nB,EAAA7nB,SAAA8E,GAAA,UAAA+iB,EAAA3nB,YACA2Z,EAAAvhB,GAAAkE,QAAAA,IACAqd,GAAAA,GACAmO,EAAAC,SAAA,aAAAD,EAAA1b,SAAAA,QHikGQ,IAAIrM,GAAO4nB,EAAU5nB,IG7jG7B4nB,GAAA1kB,KAAA0kB,WACAA,EAAA1kB,WACA0W,EAAArd,UAAAsrB,EAAAA,UAAAA,EAAAA,SAAAA,IAAAA,UAAAA,EAAAA,YACA3kB,EAAAA,IAAAA,QAAAA,GH+jGc6kB,EAASC,SAAS,aAAaD,EAAS1b,YAAY,QG1jGlErM,KH6jGQ,IG3jGRkD,GAAAE,EAAA3K,OAiBA8C,OH2iGQqsB,GAAU1kB,QAAU,WGzjG5B0W,EAAAgO,IAAAA,QAAAA,GH2jGU1kB,KG7iGV0kB,EHggGM,GG/kGNhO,GAAAmO,QAAAtvB,QAAAoS,EAAAA,SAAAA,MAIA+c,EAAA3nB,QAAA6hB,UAAA7jB,iBAAAA,QAAAA,UAAAA,uBAAAA,QAAAA,UAAAA,oBAAAA,QAAAA,UAAAA,mBAAAA,QAAAA,UAAAA,gBHgoGM,OGhjGNgqB,OHkjGKznB,UGhjGL,cAAA0nB,UAAAA,OAAAC,YAAA,SAAAhrB,EAAA2M,EAAA8d,GHijGI,OACEhnB,SAAU,MACVrF,OGhjGN,EHijGMjC,QGhjGN2uB,SAAArvB,EAAAsvB,GHijGQ,IGhjGRD,EAAA7vB,WAAAA,CHkjGU,IADA,GGhjGV8vB,GAAAE,EAAAC,GAAAA,YHijGiBH,GAAwC,IAAzBA,EAAYC,UAChCD,EAAcA,EAAYA,WG3iGtC7vB,IAAAA,EAAAA,UAAAA,MAAAA,KAAAA,QAAAA,kBAAAA,IACAkD,EAAAA,SAAAA,EAAAA,UH8iGY0sB,EAAO7vB,YAAcD,EG5iGjC0B,EAAAC,WAAAuuB,YAAAH,IHgjGQ,MG3iGRpnB,UAAAvF,EAAA9C,EAAAkI,GACA9G,GAAAA,IACA0B,MAAA1B,EAIAA,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAA,YAAAI,YAAAA,QAAAA,UAAAA,WAAAA,OAAAA,YAAAA,KAAAA,aAAAA,SAAAA,GACA6G,QAAAvC,UAAAtE,EAAA8G,MAAAC,EAAAA,GAAA/G,EAAAgH,KH2iGU,IGziGV7I,GAAAkD,eH0iGU1B,SAAQC,SAAU,OAAQ,aAAe,SAASI,GAC5CL,QAAQ2E,UAAUmC,EAAKzG,KAAS4G,EAAiBK,KAAKR,EAAKzG,MAAO7B,EAAQ6B,IAAO,KAEvFL,QGviGVgI,SAAAlB,eAAA,SAAAoB,eAAAC,UAAAA,SAAAA,GHwiGY,GGviGZzG,GAAAugB,KAAA/Z,EAAAA,OAAAA,GAAAA,cAAAA,EAAAA,MAAAA,EACAlI,SAAA2E,UAAAmC,EAAAI,MHwiGc1I,EAAQ6B,GAAOqB,EAAMuR,MAAMnM,EAAKI,OGhiG9CxF,EAAAsG,YHoiGYtG,EGniGZsG,OAAAymB,EAAAA,WAAA9pB,SAAAuD,EAAAC,GACAzG,EAAA1B,QAAAG,IACA,EHqiGU,IAAIsuB,GGniGdV,EAAAnvB,EAAAJ,EHoiGcsI,GGniGd2nB,QHoiGY/sB,EAAMsG,OAAOlB,EAAKwM,OAAQ,SAASpL,EAAUC,GACtCsmB,GAAazuB,QAAQ2E,UAAUuD,KAChClI,QAAQG,SAAS+H,KAAWA,IAAaA,EAASqL,MAAM,yBGhiG1EjK,KAAA,EACAmlB,EAAAA,OAEAA,EAAAtoB,UHqiGUzE,EAAM4H,IAAI,WAAY,WAChBmlB,GAAUA,EAASplB,UkBztGnCpK,EAAA,KAOAG,EAAAI,alB0tGEQ,QkBltGFyC,OAAA,6BAAA,oCAAA,uCAAA,2BAAAD,SAAA,cAAA,WlBmtGI,GkBltGJE,GAAAlD,KAAAJ,UACAgC,UAAA,UACAuB,YAAA,aAEA6Q,UAAA,cACAkb,YAAA,iCACAC,QAAAA,QACAhb,WAAA,EACAib,UAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,WAAAA,EACAC,SAAAA,OACAC,WAAAA,YACAC,SAAAA,KACArb,gBAAA,KACAsb,UAAAnb,KACAob,YAAApb,MACAqb,WAAA,OACAC,iBAAA,YACAC,gBAAA,OACAC,cAAAA,EACAC,WAAA,EACAC,UAAA1b,EAAAA,GACA2b,UAAA3b,EAAAA,GACA4b,UAAA,ElBktGMN,QAAS,EkB/sGf9vB,UAAA0D,EAEAssB,mBAAA,GACAC,UAAAxkB,EACAykB,UAAAtwB,EAEAuwB,SAAAE,mClB+sGMD,UkB7sGNE,oClB+sGItwB,MkB7sGJ0D,MAAA1E,UAAAsxB,YAAApgB,aAAAA,OAAAA,iBAAAA,kBAAAA,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GlBitGM,QkB1sGNogB,GAAAC,EAAAC,EAAAA,GAqKAF,QAAAA,GAAAjjB,GACAA,EAAAhE,SAAAiK,EAAAU,YAAA3G,EAAAkJ,MlBkrGQ,QkBhrGRnX,KlBirGUA,EkBhrGV,GAAAiS,QAxKA,GAAA+D,GAAAmb,EAAAnb,EAAAA,QAAAA,UAAAA,EAAAA,IACAlT,EAAAlD,EAAA6wB,MACA3tB,EAAAuuB,EAAAN,SACAjuB,EAAAwuB,EAAA1xB,MACAkD,GAAAyuB,YAAA3xB,EAAAixB,WAAAA,EAAAA,QACA/tB,IAAAA,GAAAlD,EAAAkxB,EACAI,GAAAM,OAAAN,EAAApuB,KAIAA,IAAAA,GAAAyC,EAAA4R,QlBwsGQrU,GkBvsGRoW,MAAAA,EAAAuX,UlBwsGQ3tB,EkBvsGRouB,UAAA7rB,EAAA8R,SlBwsGQrU,EAAMwuB,WAAa1xB,EAAQoxB,UkBtsGnCluB,EAAA2uB,UAAAA,EAAAZ,SlBwsGQ/tB,EkBvsGRouB,UAAAO,EAAAnwB,QlBwsGQ,IAAIkwB,GAAUN,EAAYQ,OAAO5uB,EAAM6uB,MkBtsG/C7uB,GAAA8uB,QAAAA,SAAAza,EAAA+B,GACAgY,GlBwsGUA,EAAY7rB,OAAO8R,IAErBrU,EkBvsGRlD,YAAAqV,SAAA3T,GlBwsGU4vB,EkBvsGVA,YAAA5vB,IlBysGQwB,EAAM8uB,YkBvsGd,WlBwsGUV,EkBvsGVA,SAAApuB,EAAA6V,MAAA,GAAAuY,EAAAQ,OAAAxrB,SlBysGQpD,EAAM+uB,UAAY,WkBtsG1BC,EAAAA,WACAZ,EAAAjc,QAAAA,GACAic,EAAAa,OAAAA,GAAApZ,QlBysGYuY,EkBvsGZ7rB,OAAA,GAAAsT,OAAA,IlB0sGQ7V,EAAMgvB,OAAS,WkBnsGvBZ,EAAAtrB,WAEAsrB,EAAA7Y,QAAAlB,GACA+Z,EAAA9X,OAAAA,OlBqsGY8X,EAAY7rB,OAAO,MAAM,IkB9rGrC6rB,EAAAc,OAAAA,SAAAA,GACApyB,QAAAqyB,OAAAA,KAAAC,MAAAA,EAAAA,aACAhB,EAAA9X,MAAAtW,EACA1B,EAAAC,OAAAA,KAAAyB,EAAA6J,IlBmsGUukB,EAAY1Y,QAAO,IAErB0Y,EkB/rGR9vB,oBAAA,SAAA8wB,GlBgsGUtyB,EkB/rGVwB,mBAAAN,ClBgsGU,KkB/rGVA,GAAAA,GAAAA,EAAA2W,EAAAA,EAAAA,KAAAvR,OAAAiR,EAAAA,EAAAA,IlBgsGY/V,QAAQC,QAAQyB,EAAMwW,KAAK3M,GAAIukB,EAAYiB,iBAG/CjB,EAAY7rB,OAAS,SAAS8R,EAAMuB,GkB9rG5CtX,QAAAuwB,OAAAA,KACA7wB,QAAAmF,OAAAA,EAAA7E,aAAA+V,MAAAA,EAAAA,WAAAA,cACArW,EAAA+E,WAAAA,GAAAA,MAAAA,IlBksGY/E,EkBhsGZowB,WAAA,MlBksGepuB,EAAM6uB,OAASjZ,GAClB5X,EkBjsGZmF,cAAA7E,QAAA2X,KAAA5B,IACA/V,EAAAQ,UAAAqnB,EAAA9R,YAAA4S,GAAAD,EAAA3S,WAAAA,EAAAiX,MAAAA,OlBwsGYhtB,QAAQQ,OAAOoU,GACbiT,KAAM9R,EAAK4S,ckBnsGzBmH,MAAAa,EAAAA,WAEAjvB,KAAA6uB,EAAAS,YAEAlB,EAAA1Y,QAAAA,EAAAA,MAAAA,GlBosGY0Y,EAAY1Y,WAGhB0Y,EkB/rGRmB,QAAA,SAAAb,GACAA,EAAAA,MAAAnJ,ElBgsGUmJ,EAAUN,EAAYQ,OAAO5uB,EAAM6uB,OkB7rG7CT,EAAAoB,UlBgsGQpB,EkB9rGR7vB,OAAAyB,SAAAwW,GlB+rGc+Y,KAAa,GAAQb,EAAQe,QAC7BF,KAAa,GAAUb,EAAQe,QkB5rG7CrB,EAAAA,MAAAzX,KAAAA,IlB+rGQyX,EAAYoB,gBAAkB,WkB3rGtCpB,IAAAA,GAAAA,GAAAiB,EAAAA,EAAAA,EAAAA,KAAAjsB,OAAA+H,EAAAA,EAAAA,IACAA,QAAAiL,QAAAsY,EAAAgB,KAAAA,GAAAvkB,IlB+rGQijB,EkB3rGRuB,YAAAA,SAAAA,GAIA,MAAA1Y,GAAAA,WAAApB,IlB0rGQuY,EkBzrGRnX,eAAA2Y,SAAAA,GlB0rGUzkB,EkB1rGV6b,SAAA/P,EAAA4Y,WAAAA,EAAAA,OlB4rGQzB,EAAYO,YAAc,SAASnwB,GkB3rG3C4vB,GAAAA,GAAA1Y,EAAAA,MlB6rGcuB,EAAa,GAAIpB,MAAKA,KAAKia,IAAI5c,EAASiT,MAAQwJ,EAAMxJ,MAAQ,GAAK3nB,EAAO0U,EAAS8T,OAAS2I,EAAM3I,OAAS,GAAKxoB,EAAO,GkB1rGrI4vB,SAAAA,OAAA7qB,GAEAb,KAAAc,EAAAA,iBACAd,MAAAe,EAAAA,cAEA4Q,KAAA9K,EAAAwmB,elB2rGU3B,EkBzrGVlX,UlB2rGQkX,EAAY7qB,aAAe,SAASb,GAGlC,GAFAA,EkBzrGVwU,iBlB0rGUxU,EAAIe,kBACA8F,EAAS,CkBvrGvB6kB,GAAAA,GAAA1pB,QAAAxH,QAAAwF,EAAAA,OACAA,YAAAwU,EAAA,GAAA7N,SAAAzD,gBACApC,EAAAA,EAAAA,UAGA0T,EAAA/S,eAAA,WlB0rGQiqB,EkBvrGR1pB,WAAA,SAAAhC,GlBwrGU,GkBvrGV1C,mBAAA4F,KAAAlD,EAAAyB,WAAAzB,EAAAstB,WAAAttB,EAAAutB,OlBurGU,CAGA,GAFAvtB,EAAIc,iBACJd,EAAIe,kBACgB,KAAhBf,EAAIyB,QAQN,YkBhsGZnE,EAAA6uB,MAKAntB,EAAAA,OAAA2C,WlBwrGgB+pB,EAAYa,QAAQjvB,EAAM6uB,MAAQ,KAHpCT,EAAY3pB,MAAK,GkB3qG/BvH,GAAAgzB,UAAA/gB,GlBorGUzN,EAAY2C,WAQd,IkBhrGRnH,GAAAwO,EAAAsD,IlBirGQof,GkBhrGRhpB,KAAA,WlBirGU,MkBhrGVlI,IAAAJ,EAAAgX,WlBirGY5W,EAAQwO,KAAK,OAAQ,YkB/qGjCqI,GAAAA,IAAAA,qBAAAA,eAGAiE,IACAoW,EAAAzmB,KAAAA,OAAA,QACAzK,EAAAkU,KAAAA,WAAAU,QACA5U,EAAA0M,GAAAA,QAAAkK,QAEAkE,MAGA,IAAAC,GAAAmW,EAAA9pB,OACA8pB,GAAA9pB,QAAA,WACA8M,GAAAlU,EAAAkI,WACA6S,EAAAA,IAAAA,QAAAA,GlBgrGUD,IAEF,IkB3qGRC,GAAAnb,EAAAkE,IlB4qGQotB,GkB3qGRlxB,KAAA,YlB4qGeqM,GAAWrM,EAAQkI,KAAK,aAAelI,EAAQkI,KAAK,cACzD6S,IACAjW,EAAS,WkBzqGnBkW,EAAAkW,WACAA,EAAA3pB,SAAA6E,GAAA8G,EAAAA,aAAAA,YAAAA,EAAAA,cACAge,EAAAA,UACAA,EAAA5pB,GAAAA,UAAA+E,EAAA7E,cAEAxH,GAAAA,IlB4qGQ,IkB1qGRgb,GAAA9H,EAAAA,IAmBA,OlBwpGQge,GAAY3pB,KAAO,SAAS2L,GkBxqGpCge,EAAAA,WlB0qGUA,EAAY5pB,SAASoF,IAAIL,EAAU,aAAe,YAAa6kB,EAAY7qB,ckBtqGrF4qB,EAAAA,UACAjxB,EAAAixB,IAAAA,UAAAA,EAAAA,YAMAlpB,EAAAmL,KAKAge,ElBm+FM,GkB7sGNhd,GAAAgd,6BAAAhsB,KAAAA,EAAAA,UAAAA,WACAmH,EAAAokB,eAAA7wB,GAAA6wB,UAAA7wB,CA4OAiD,OAxOArC,GAAA2wB,OAAA8B,EAAAA,KAAA/B,EAAAA,oBAuOA9oB,EAAA5H,SAAAA,EACAywB,MlBkqGKlpB,UkB/pGLjF,gBAAAA,UAAAA,SAAAA,KAAAA,iBAAAA,cAAAA,cAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GlBgqGI,GAAIoR,GAAW,6BAA6BxL,KAAKhE,EAAQuW,UAAUC,UACnE,QACE/S,SkBhqGN/G,MlBiqGMgH,QAAS,UACTvF,KkB9pGNwF,SAAAA,EAAArI,EAAAkI,EAAApH,GlBytGQ,QkB3oGRoyB,GAAAC,GlB4oGU,MkB1oGVC,IAAAC,EAAAntB,OACAotB,EADA,KlBspGQ,QkBzoGRxyB,GAAAqa,GAEA,GAAAC,QAAAta,OAAAA,GAAA,ClByoGU,GAAIwa,GAAavM,MAAMukB,EAAWxiB,SAASyf,UAAYgD,EAAWhb,WAAa+a,EAAWxiB,SAASyf,QkBroG7GzvB,EAAA2a,MAAAC,EAAA5K,SAAA6K,UAAAA,EAAAA,WAAAA,EAAAA,SAAAA,QAEAxE,EAAAA,GAAAA,CAEArW,GAAA6a,aAAA,OAAAP,GlBqoGUta,EkBpoGVA,aAAA0a,MAAAF,GlBqoGUxa,EkBjoGV0a,aAAA,MAAAL,GlBkoGcC,IAASta,EAAW2W,WAAa8b,IAmDvC,QAASC,KACP,OAAQ1yB,EAAW2W,YAAc1I,MAAMjO,EAAW2W,WAAWc,WAAa,GAAKzC,EAAWhV,EAAW2W,WAAY7X,EAAQmwB,YkBjyGnI3uB,GAAAA,IACA0B,MAAA1B,ElBgqGQA,SAAQC,SAAU,WAAY,cAAe,aAAc,eAAgB,YAAa,YAAa,QAAS,UAAW,OAAQ,YAAa,YAAa,WAAY,aAAc,WAAY,kBAAmB,YAAa,eAAgB,YAAa,YAAa,YAAa,OAAQ,YAAa,UAAW,WAAY,YAAa,qBAAsB,KAAM,cAAe,cAAe,WAAY,YAAc,SAASI;AACxaL,QAAQ2E,UAAUmC,EAAKzG,MAAO7B,EAAQ6B,GAAOyG,EAAKzG,KAExD,IkB5pGR4G,GAAA5G,elB6pGQL,SkB5pGRA,SAAA2E,OAAAmC,YAAA,YAAA,YAAA,WAAA,YAAA,SAAAzG,GACA7B,QAAA6B,UAAAqB,EAAAuR,KAAA/L,EAAAA,KAAAA,EAAAA,MlB6pGY1I,EAAQ6B,IAAO,KkBvpG3B7B,QAAAA,SAAA0zB,eAAAxiB,SAAAA,eAAAA,UAAAA,SAAAA,GAEA,GAAAoD,GAAAA,KAAAtU,EAAAgV,OAAAA,GAAAhV,cAAAmwB,EAAAA,MAAA,EAEA9Y,SAAArX,UAAAqX,EAAAA,MAEAnB,EAAAA,GAAAhT,EAAAuR,MAAA8C,EAAApB,MAIA,IAAA+F,GAAAC,EAAAA,EAAAA,EAAAA,ElBupGQnc,GkBvpGRA,EAAAmwB,SAAA9Y,GAAAA,EAAAA,YAAAA,EAAAA,WAAAA,alBypGQ,IkBzpGR0S,GAAA/pB,EAAA0wB,KlB0pGYxa,EAAa,SAASqB,EAAMpB,GkBvpGxC,MAAArB,GAAAoB,WAAAqB,EAAApB,EAAAkB,IAEA6E,EAAAwX,GlBypGUvd,OkBxpGV3U,EAAAG,WlBypGU0V,KkBxpGV3N,ElBypGUqgB,OkBxpGV2J,EAAAlsB,clB0pGYc,GkBxpGZorB,QlBypGUxwB,EAAMsG,OAAOlB,EAAKwM,OAAQ,SAASpL,EAAUC,GACtC+pB,GAAelyB,QAAQ2E,UAAUuD,KAClClI,QAAQG,SAAS+H,KAAWA,IAAaA,EAASqL,MAAM,2BkBrpGxEtT,KAAA,EAEAD,EAAA2E,OAGAutB,EAAAxiB,UlBwpGQ1P,QAAQC,SAAU,UAAW,WAAa,SAASI,GAC7CL,QAAQ2E,UAAUmC,EAAKzG,KkBhpGrCL,EAAAA,SAAA2E,EAAAmC,SAAA6nB,GACA7nB,EAAA4I,SAAArP,GAAAqa,EAAAxS,oBAAAA,EAAAA,GACAgqB,MAAAxiB,EAAAif,SAAAzmB,KAAAA,EAAAA,QAAAA,GlBkpGcmqB,EAA0B3yB,EAAW2W,gBkB3oGnDrW,QAAA2E,UAAAmC,EAAA6nB,aAIA7nB,EAAAsM,SAAA2e,aAAAC,SAAAA,GACAE,EAAAF,SAAAA,WAAA9pB,IAIAxG,EAAA1B,OAAA2E,EAAAA,QAAA2tB,SAAAA,EAAAnqB,GACAzG,EAAAsG,OAAAsqB,EAAAA,clB4oGW,GAKCtyB,QAAQ2E,UAAUmC,EAAKwrB,gBACzB5wB,EAAMsG,OAAOlB,EAAKwrB,cAAe,SAASL,EAAgBH,GkBxoGpEG,EAAAI,EAAAF,GACAL,EAAA7a,EAAA6a,GACA5X,GACAH,EAAAA,oBAAArK,KlBupGQhQ,EkBjoGRyyB,SAAAA,QAAAA,SAAAA,GlBkoGU,GkBjoGVzyB,ElBkoGU,KkB/nGV6a,EAEA8X,MlB8nGY3yB,GAAW0a,aAAa,QAAQ,GkB9nG5CiY,IlBioGU,IkB9nGVtc,GAAA2E,EAAAG,MAAAA,EAAAsX,EAAA3zB,WlB+nGU,QkB9nGV2zB,GAAAzd,MAAAqB,EAAA6Y,elB+nGYlvB,GAAW0a,aAAa,QAAQ,IAGlCiY,EkB9nGVlb,GACAuX,WlB8nGclwB,EkB9nGdA,UACAuX,EAAAA,EAAAoB,qBAAAgb,EAAA3zB,EAAAmV,UAAA,GACAe,EAAAga,EAAAA,EAAAE,iBAAApwB,EAAAmwB,clBgoGU5Y,EAAO2E,EAAWG,qBAAqBnb,EAAW2W,WAAY7X,EAAQmV,UAAU,GkB7nG1FoC,WAAAvX,EAAA+Y,SlB+nGmBxB,EAAKoB,UkB3nGxB,SAAAzO,EAAAA,SAEAqN,EAAAA,UAAAA,IACAnN,QAAA5I,EAAAiG,SACA6U,EAAAA,cAEA/E,GAAAnN,MAAAA,OlB6nGQlJ,EkB3nGRgb,YAAAK,KAAAnS,SAAAA,GlB4nGU,GAAImN,EAiBJ,OAfEA,GkB5nGZA,QAAA9P,YAAA2C,IAAA,OAAAA,EACAkS,IACA9a,QAAA4I,OAAAA,GlB4nGmBA,EkBpnGnB,WAAApK,EAAAmV,SACAjU,EAAA2W,MAAAN,EAAAA,KAAAA,EAAAA,iBACA,SAAAvX,EAAAkwB,SACAhvB,GAAA2W,MAAAqE,IAAArE,GAEA+b,GAAAA,MAAAA,GAIA,QAAA1yB,EAAA+E,SAEA7F,EAAAwzB,WAAAA,EAGA1yB,EAAA0yB,WAAAA,EAAAA,qBAAAA,EAAAA,EAAAA,UlBmnGiBA,MAET1yB,EkB/mGRwyB,QAAAA,WACA1zB,EAAAA,IAAA4zB,MASA5vB,EAAAA,IAAA,WAAA,WAQA8H,GAAA2Y,EAAAA,UACAsP,EAAAA,KACAL,EAAAptB,YlBwmGOtC,SAAS,kBAAmB,WkBjmGnC,QAAAgwB,GAAAC,EAAAxH,GlBomGM,IkBnmGN,GAAAsH,MlBmmGaG,EAAI5tB,OAAS,GkBhmG1BtF,EAAA0D,KAAAwvB,EAAAzW,OAAA,EAAAgH,GlBmmGM,OkB/lGNvhB,GlBimGI,QkB9lGJmU,GAAAA,EAAArX,GlB+lGM,OkB9lGNkW,EAAAA,EAAAA,GAAAuW,ElBgmGIzrB,KAAK0D,MAAS,iBAAkB,cAAe,OAAQ,SAASqT,EAAgBoE,EAAa1K,GAC3F,MkB9lGNyK,UAAAA,GlB+lGQ,GkB/lGR/F,GAAAnW,EAAAmwB,OAAA9Y,EAAAA,EAAAA,SAAA0S,EAAA/pB,EAAA0wB,KlBkmGYxa,EAAa,SAASqB,EAAMpB,GkBhmGxC,MAAAge,GAAApc,WAAAmX,EAAAA,EAAA7X,IAEA+c,EAAAA,GAEAje,OAAAG,EAAA+d,WACAhd,KAAAjB,EAAAiT,OAAA/S,EAAA6T,eAAA5S,EAAAiX,EAAAA,cAAAA,GlBomGY8F,EAAiBH,EAAYtrB,MAAM7I,EAAQ+wB,WAAWwD,OAAOJ,EAAYtrB,MAAM,EAAG7I,EAAQ+wB,YkBlmGtGS,EAAAA,EAAAA,YAAAA,+BAAAA,EAAAA,KAAAA,qCAAAA,SACArb,EAAAnW,EAAAqwB,QAAAA,EAAAA,UAAAA,EAAAA,oBAAAA,YAAAA,EAAAA,WAAAA,GAAAA,OACAvkB,GACA+mB,KAAAA,EAAAA,clBomGU3I,MkBpmGVA,EAAAE,WlBqmGU7S,KAAMjB,EAAUkY,WkBnmG1BgD,IlBsmGUrb,OkBrmGV3U,EAAAQ,UlBsmGU8J,MkBtmGVud,ElBumGUwJ,OACE3I,MkBxmGZ3S,GlB0mGUvR,OkBzmGVquB,SAAAzb,EAAAA,IlB0mGiB5X,KkBzmGjB2xB,OAAAnE,GAAAA,EAAApY,gBAAAmB,EAAAiX,MAAAjX,EAAA6S,aAAAhU,EAAA8T,OAKA9T,QAAAA,OAAAmB,GACA8c,KAAA3B,EAAAA,MAAAA,clBsmGgBxI,MAAOmK,EAAO7a,MAAM4Q,WACpB7S,KAAM8c,EAAO7a,MAAMgV,YkBnmGnC6F,EAAAG,WACAC,EAAAA,YAAAD,EAAAA,MAAAzF,IAAAA,EAAAA,aACA3Y,EAAAse,KAAAL,EAAAtb,MAAAyb,UACAH,EAAAM,oBlBwmGUC,MkBpmGVC,WACA,GAAA5K,GAAAA,GAAAA,MAAAA,EAAAA,KAAAA,EAAAA,MAAAA,GACAwK,EAAA1nB,EAAAgiB,oBACA9E,EAAA/N,GAAA2S,OAAAA,EAAA6F,MAAA3b,EAAAA,EAAAoR,SAAAuK,EAAAA,UAAAtK,IACAyK,EAAA1qB,EAAAA,oBAAAoN,EAAA0S,EAAAA,qBAAAA,GAAAA,MAAAA,EAAAA,UAAAA,cAAA6K,KAAAC,IAAAtG,EAAAA,GAAAA,OAAAA,EAAAA,KAAAA,EAAAA,IlBymGY,KkBzmGZuG,GAAA3qB,GAAAO,KAAAoqB,EAAA/K,EAAAG,GAAAA,EAAAA,IlB0mGcH,EkB1mGd3Q,EAAAsZ,qBAAA3I,GAAAA,MAAAA,EAAAA,cAAAA,EAAAA,WAAAA,EAAAA,UAAAA,IlB2mGc4K,EAAK1qB,MACHoN,KAAM0S,EkB1mGtB/mB,QAAAgI,EAAAgL,iBAAAse,EACAtxB,MAAA+xB,EAAAhL,EAAAjpB,KAAAmV,QACAjT,SAAAgyB,EAAAd,OAAAA,KAAAA,WAAAA,GACAlxB,MAAAwW,EAAA5N,aAAAA,EAAAA,MACA5I,SAAAiyB,KAAAA,WAAAvC,IAGAwC,GAAAA,MAAAlf,EAAAqB,EAAAA,EAAAA,kBACArU,EAAA+xB,YAAAzb,ElB4mGYtW,EAAMgyB,OAASd,EkB1mG3BxB,EAAAA,KAAA9mB,EAAAyL,EAAAA,KAAAA,OACArU,EAAAiU,gBAAAwB,KAAAA,WAAAA,GAAAA,OAGA3X,KAAAmW,OAAAnX,GlB2mGUo1B,WkBrmGVp1B,SAAAqyB,GlBsmGY,MkBrmGZgC,GAAAtnB,OAAA/M,EAAAA,gBAAAqyB,EAAA/rB,MAAAyG,eAAAwK,EAAA6S,aAAAiK,EAAA7a,MAAA4Q,YAAA7S,EAAAiX,YAAA6F,EAAA7a,MAAAgV,WlBumGUoE,WkBrmGV,SAAArb,GlBsmGY,GAAIJ,GAAOI,EAAKoB,SAChB,IAAIxB,EAAOnX,EAAQ2wB,SAAWxZ,EAAOnX,EAAQ4wB,QAAS,OAAO,CAC7D,IAA0D,KAAtD5wB,EAAQgxB,mBAAmBxT,QAAQjG,EAAK8d,UAAkB,OAAO,CkBnmGjF,IAAAr1B,EAAAqyB,mBlBqmGc,IAAK,GAAItlB,GAAI,EAAGA,EAAI/M,EAAQqyB,mBAAmB/rB,OAAQyG,IkBnmGrEqmB,GAAAA,GAAApzB,EAAA4F,mBAAAA,GAAAA,OAAAA,GAAAA,EAAAA,mBAAAA,GAAAA,IACAyuB,OAAA7a,CAIA,QAAAU,GlBsmGUkZ,UkB/lGVpyB,SAAA4xB,GlBgmGY,GAAKyB,EAAO7a,MAAZ,CkB5lGZrD,GACArK,GADAqK,EAAAma,EAAAA,MAAAA,SAEAuC,MAAAA,EAAAA,QAAAA,EAAAA,GAAAA,MAAAA,EAAAA,OAAAA,KAAAA,EAAAA,QAAAA,EAAAA,GAAAA,MAAAA,EAAAA,QAAAA,KAAAA,EAAAA,QAAAA,EAAAA,GAAAA,MAAAA,EAAAA,OAAAA,KAAAA,EAAAA,UAAAA,EAAAA,GAAAA,MAAAA,EAAAA,SAAAxJ,KAAAuJ,WAAA1Y,IAAAma,EAAA5uB,OAAAyU,GAAA,OlBmmGUyD,KkBjmGV,QlBkmGUxH,OkBjmGV3U,EAAAQ,YlBkmGU8J,MkBlmGVud,ElBmmGUwJ,OACExJ,KkBpmGZ9R,GlBsmGUvR,OkBrmGVquB,SAAAzb,EAAAA,GlBsmGiB5X,KkBrmGjB2xB,OAAAvI,EAAAA,gBAAAF,EAAAb,KlB4mGuB9R,EAAK6S,aAAehU,EAAS8T,QkBvmGpD0K,QAAA5yB,OAAAoU,GAEAkf,MAAAA,EAAAA,MAAAA,WACApL,KAAAA,EAAAA,MAAAA,YAEAA,EAAAA,oBATA1oB,QAAAQ,OAAAoU,GAAA8T,KAAAA,EAAAmK,MAAA7a,cAAAjC,MAAA8c,EAAA7a,MAAAgV,WlBwmGgBjX,KAAM8c,EAAO7a,MAAMgV,YAErB6F,EAAOzb,WASXgc,MkBzmGVhqB,WlB4mGY,IAAK,GkB5mGjB0O,GAAAjP,KlB4mGqB0C,EAAI,EAAO,GAAJA,EAAQA,IACtBmd,EAAQ,GAAInR,MAAK3C,EAASiT,KAAMtc,EAAG,GkB3mGjD7J,EAAAgI,MACAhI,KAAA+xB,EACA/xB,MAAAwW,EAAA4b,EAAAt0B,KAAA8K,QACA9K,SAAAqzB,EAAAxa,YAAAqQ,GlB6mGgB5Q,SAAUtY,KAAK4xB,WAAW1I,IAG9BhnB,GAAMgI,MAAQgL,EAAWgU,EAAOlqB,EAAQywB,iBkB3mGpDmC,EAAAA,YAAArb,EACArU,EAAAqyB,KAAAA,EAAAD,EAAA/d,KAAA4S,OACAnpB,KAAA2xB,OAAA4C,GAEAnC,WAAA,SAAAxtB,GACA,MAAAyuB,GAAA7a,OAAAjC,EAAA4S,gBAAAkK,EAAA7a,MAAA2Q,eAAA5S,EAAA6S,aAAAiK,EAAA7a,MAAA4Q,YlB8mGUwI,WAAY,SAASrb,GkB3mG/B,GAAAie,IAAAA,GAAAnB,MAAA7a,EAAAA,cAAA4Q,EAAAA,WAAAA,EAAAA,EACA,OAAAlQ,GAAAnB,EAAAsb,SAAA7a,EAAAA,UAAAA,EAAAA,SlB8mGU4Z,UkBvmGVpyB,SAAA4xB,GlBwmGY,GAAKyB,EAAO7a,MAAZ,CkBpmGZrD,GAAAA,GAAAoa,EAAAA,MAAAA,WACAzkB,EAAA,GAAAiN,MAAAsb,EAAA7a,MACAqZ,MAAAA,EAAAA,QAAAA,EAAAA,SAAAA,EAAAA,GAAAA,KAAAA,EAAAA,QAAAA,EAAAA,SAAAA,EAAAA,GAAAA,KAAAA,EAAAA,QAAAA,EAAAA,SAAAA,EAAAA,GAAAA,KAAAA,EAAAA,SAAAA,EAAAA,SAAAA,EAAAA,GAAAxJ,KAAAuJ,WAAA1Y,IAAAma,EAAA5uB,OAAAyU,GAAA,OlB2mGUyD,KkBzmGV,OlB0mGUxH,OkBzmGV3U,EAAAQ,WlB0mGU8J,MkB1mGVud,ElB2mGUwJ,OACExJ,KkB5mGZ9R,IlB8mGUvR,OkB7mGVquB,SAAAzb,EAAAA,IlB8mGiB5X,KkB7mGjB2xB,OAAAxI,GAAAA,SAAA/T,EAAAA,cAAA,GAAA,MAAA9G,SAAA8G,EAAAiT,KAAA,GAAA,KACA7nB,QAAAQ,OAAAoU,GAAAiT,KAAAgL,EAAA7a,MAAA2Q,cAAAD,MAAAmK,EAAA7a,MAAA4Q,WAAA7S,KAAA8c,EAAA7a,MAAAgV,YACA6F,EAAA3B,UlBknGuBnb,EAAK4S,gBAAkB/T,EAASiT,OACzC7nB,QAAQQ,OAAOoU,GkBhnG7Bwe,KAAAP,EAAA7a,MAAA2Q,cACAsL,MAAAA,EAAArf,MAAAA,WACAsf,KAAAA,EAAAA,MAAAA,YAEArB,EAAAtnB,oBlBonGU6nB,MkBlnGVrd,WlBsnGY,IAAK,GkBtnGjB+B,GAAA1O,EAAAsL,EAAAmT,KAAAroB,EAAAmV,MAAAA,EAAAA,KAAAA,OAAA9L,KlBsnGqB0C,EAAI,EAAO,GAAJA,EAAQA,IACtBsc,EAAO,GAAItQ,MAAK0c,EAAY1oB,EAAG,EAAG,GkBrnGhD7J,EAAAgI,MACAhI,KAAA+xB,EACA/xB,MAAAwW,EAAAgc,EAAA10B,KAAA8K,QACA9K,SAAAqzB,EAAAxa,YAAAwP,GlBunGgB/P,SAAUtY,KAAK4xB,WAAWvJ,IAG9BnmB,GAAMgI,MAAQwqB,EAAM,GAAG9qB,MAAQ,IAAM8qB,EAAMA,EAAMpvB,OAAS,GAAGsE,MkBrnGzEgoB,EAAAA,YAAArb,EACArU,EAAAqyB,KAAAA,EAAAG,EAAAne,KAAA4S,OACAnpB,KAAA2xB,OAAA4C,GAEAnC,WAAA,SAAAxtB,GACA,MAAAyuB,GAAA7a,OAAAjC,EAAA4S,gBAAAkK,EAAA7a,MAAA2Q,elBwnGUyI,WAAY,SAASrb,GkBrnG/B,GAAAoe,IAAAA,GAAAtB,MAAA7a,EAAA2Q,cAAAA,EAAAA,EAAAA,EACA,OAAAjQ,GAAAnB,EAAAsb,SAAA7a,EAAAA,UAAAA,EAAAA,SlBwnGU4Z,UkBjnGVpyB,SAAA4xB,GlBknGY,GAAKyB,EAAO7a,MAAZ,CkB7mGZgY,GAAAA,GAAAV,EAAA8E,MAAAnM,cACArT,EAAAA,GAAAA,MAAAA,EAAAA,MlBinGgC,MAAhBxQ,EAAIyB,QAAgB6S,EAAQ2b,QAAQF,EAAa,GAA6B,KAAhB/vB,EAAIyB,QAAgB6S,EAAQ2b,QAAQF,EAAa,GAA6B,KAAhB/vB,EAAIyB,QAAgB6S,EAAQ2b,QAAQF,EAAa,GAA6B,KAAhB/vB,EAAIyB,SAAgB6S,EAAQ2b,QAAQF,EAAa,GAC1O30B,KAAK4xB,WAAW1Y,IAAUma,EAAO5uB,OAAOyU,GAAS,MmBhzHlE1Y,QAIAZ,MAAAA,EAAAA,QAAAA,MAAAA,UAAAA,MAAAA,KAAAA,EAAAA,EAAAA,SAAAA,EACAC,SAAAuV,QnBqzHE5U,QAAQf,OAAO,8BAA+BuD,SAAS,YAAa,WmB9yHtE,GAAA9C,GAAAA,KAAAF,UACAH,UAAAG,cAGA+b,gBAAAvb,EACAA,YAAAC,KnB8yHMq0B,gBmB7yHN3vB,EnB8yHM4vB,eAAe,GmBzyHrBv0B,EAAAC,KAAAP,WAAA,SAAAoE,EAAAoC,EAAAkV,GnBk2HM,QmBrxHNoZ,GAAAC,GnBuxHQ,IAAK,GADDD,GAAgBjZ,EAAKkZ,SAAS7Y,QACzBrQ,EAAI,EAAGA,EAAIipB,EAAc1vB,OAAQyG,IACpCrH,EAAQswB,EAAcjpB,KmBnxHpCipB,EAAAt0B,GAAAA,EAAAA,GAAAA,GAEAs0B,EAAAxY,KAAA9b,EAAAA,SAAA4E,SnBqxHY0vB,EAAcjpB,GAAKgQ,EAAKkZ,SAAS3vB,OAAS,GAIhD,QmBnxHN2vB,GAAA7Y,GnBoxHQ,GAAI8Y,GAAcnZ,EAAKkZ,SAAS7Y,OAChC,OAAsC,KAA/B8Y,EAAY1Y,QAAQ9b,GAE7B,QmBlxHNqb,GAAAgZ,GnBmxHQ,GmBjxHRhZ,GAAAkZ,EAAA7Y,SAAAK,QAAAD,QAAA9b,EnBkxHsB,MAAVgE,GmB/wHZqX,EAAAA,SAAAkZ,QAAA7Y,OAAAI,EAAA9b,GnBmxHM,QAASy0B,GAAaz0B,GACfqb,EAAK7L,SAAS6kB,emB7wH3BrxB,EAAAA,SAAA0Y,QAAAK,OAAA,EAAA,GAEA7c,KAAAw1B,EAAAx1B,SAAAA,QAAAA,QAAAA,IACAw1B,EAAAA,SAAAl1B,QAAAA,KAAAA,GnB8rHM,GmB3yHN6b,GAAAvb,InB4yHMub,GmB3yHNA,SAAA7L,QAAArP,KAAAjB,GnB4yHMY,QAAQC,SAAU,YAAa,iBAAkB,cAAe,iBAAkB,iBAAmB,SAASI,GACxGL,QAAQ2E,UAAUyW,EAAO/a,MAAOkb,EAAK7L,SAASrP,GAAO+a,EAAO/a,KmBxyHxEkb,IAAAA,GAAAkZ,eAEAlZ,SAAAsZ,SAAAA,iBAAAA,iBAAAA,iBAAAA,SAAAA,GAEAC,QAAAA,UAAA1Z,EAAA/a,KAAAzB,EAAAA,KAAAA,EAAAA,MACA2c,EAAAwZ,SAAApsB,IAAA/J,KnB2yHM2c,EmBxyHNA,YnByyHMA,EAAKkZ,YmBtyHXlZ,EAAAyZ,wBnBwyHMzZ,EmBvyHNuZ,gBAAAC,SAAA/Y,GAEAT,EAAAwZ,SAAA9Y,KAAAA,IAEAV,EAAA0Z,gBAAAA,SAAAr2B,GACA2c,EAAArX,SAAAqX,KAAAkZ,InBwyHMlZ,EmBnyHNyZ,kBAAAT,SAAAA,GnBoyHQ,GmBlyHRW,GAAAA,EAAAt2B,SAAAA,QAAAA,EnBmyHQ2c,GAAKwZ,SAAS9Y,OAAO/X,EAAO,IAE9BqX,EmB/xHNA,kBAAAsZ,SAAA50B,GnBgyHQ,GmB/xHRmc,GAAAA,EAAAA,SAAAA,QAAAA,EnBgyHQb,GAAKkZ,SAASxY,OAAO/X,EAAO,GACxBqX,EAAK7L,SAAS6kB,emB5xH1BhZ,EAAAK,GAEAuZ,EAAAj1B,GnB8xHQqb,EmB7xHRA,qBAAArb,QAAAA,SAAAA,GnB8xHUkc,OAGJb,EmB7xHNoZ,SAAAA,QAAAz0B,EAAAA,SAAAA,mBAAAA,GnB8xHMqb,EAAKW,WAAapY,EAAOoY,WAAa,SAAShc,GmB3xHrDqb,QAAAsZ,QAAAA,GACAzY,EAAAA,SAAAA,QAAAA,GnB6xHoBb,EAAK7L,SAAS0lB,gBAAkBC,EAASn1B,GACnDg1B,EAAeh1B,GmBzxHzBy0B,EAAAjlB,GnB6xHQ6L,EAAKsZ,qBAAqB50B,QAAQ,SAASmc,GmB1xHnDA,OnB8xHMb,EmBxxHN+Z,eAAA/Z,WACA,MAAAA,GAAAhQ,SAAAA,cACArH,EAAAswB,SAAAA,QnB0xHgD,IAAjCjZ,EAAKkZ,SAAS7Y,QAAQ9W,OAAeyW,EAAKkZ,SAAS7Y,QAAQ,GAAK,ImB1uH/Epc,MAAA0D,KAAA,WACA8D,GAAAA,KnB6wHM,OmB5wHNtH,GAAAA,SAAAN,EACAqC,EAAA/B,WAAAmH,EAEA+V,KnB2wHKjW,UmBxwHLiW,cAAA,UAAA,WAAA,YAAA,SAAAtZ,EAAAoO,EAAAkjB,GnBywHI,OACE5tB,SmBtwHN4V,WAAA/X,cnBuwHMnF,YAAc,SAAU,WAAY,SAAUk1B,EAAUl1B,YACxD+B,KmBpwHNmb,SAAAlU,EAAAC,EAAAsU,EAAArU,GnBqwHQ,GmBnwHRgU,GAAAgC,EAAAhW,GnBowHY2sB,EmBjwHZrZ,EAAAtT,EnBkwHYgU,KACF2Y,EmBjwHVf,qBAAAe,KAAAD,WnBkwHY1Y,EmBhwHZ5c,cAAAw0B,EAAAc,oBnBkwHU1Y,EmB9vHV2Y,YAAArZ,KAAAA,SAAAtT,GnB+vHY,GAAI5I,QAAQ4e,QAAQhW,GAClB2sB,EmB9vHdf,WAAAA,OACAe,CnB+vHc,GAAIf,GAAgBe,EAAeD,gBAC/Bt1B,SAAQ4e,QAAQ4V,GmB7vHlC5rB,KAAAA,EAAAA,QAAAA,EAAAA,InB+vHkB2sB,EAAerZ,WAAwB,EAAbtT,GAEnB4rB,IAA+B,EAAb5rB,GAC3B2sB,EAAerZ,WAAwB,EAAbtT,GmBrvH1C5B,MAAA4B,WnB6vHOjC,UmBhvHP2C,mBAAA,WnBivHI,OACEtC,SAAW,YAAa,eACxBvF,KmB/uHN+zB,SAAAA,EAAA52B,EAAAqe,EAAAD,GnBgvHQ,GmB/uHRuY,GAAAzd,EAAA,EnBgvHQlZ,GmB/uHRsF,KAAAA,cAAAuxB,YnBgvHQF,EmB/uHRA,gBAAArxB,GnBgvHQxC,EmB/uHRA,IAAAid,WAAAA,WnBgvHU4W,EAAeP,kBAAkBp2B,ImB5uH3CA,IAAAA,GAAA42B,WACA52B,IAAAA,EAAAkZ,SAAA,CACA,GAAA0M,GAAAA,EAAAiR,kBAAA,uBAAAxY,EAAAwY,iBAAAxY,EAAAwY,iBAAAF,EAAAR,SAAA/Y,QAAApd,EACA42B,GAAAA,WAAAA,EAAAA,GACAjZ,EAAArX,UnBivHQtG,GAAQoM,GAAG,QAASwqB,GACpB52B,EAAQ82B,KAAK,mBAAoB,SAASnZ,GACxB,KAAZA,EAAEiI,OACJgR,ImB1uHZ7uB,EAAAA,kBAEA,KAAA4V,EAAAiI,OAAA,IAAAjI,EAAAiI,OACAxd,EAAAA,uBnB+uHKL,UmBnuHL/H,oBAAA22B,WAAA7lB,SAAArQ,GnBouHI,OACE2H,SmBjuHNuuB,YAAAI,enBkuHMl0B,KmB/tHNC,SAAAA,EAAA9C,EAAAqe,EAAAD,GnByuHQ,QAASM,KACP,GAAIpZ,GmB9tHdA,EAAAmB,SAAA2W,QAAApd,GACAg3B,EAAAL,EAAAD,iBnB+tHcM,EAAS,amB5tHvBlkB,SAAAkkB,QAAAh3B,GnB8tH0C,KAA1ByG,EAAO2W,QAAQ9X,KmB3tH/BqxB,EAAAV,YnB8tHqB3wB,IAAUmB,ImB3tH/BiY,EAAAA,YnB8tHU5L,EAASkkB,GAAQh3B,EAAS22B,EAAe7lB,SAASyL,aApBpD,GmB/tHRoa,GAAAN,EAAAA,EnBguHQr2B,GAAQyS,SAAS,YmB7tHzBkkB,EAAAjY,SAAAA,WACA1e,EAAAsF,SAAAqxB,EAAAd,SAAAzY,WnBguHQuZ,EmB9tHRI,gBAAA/2B,GnB+tHQ8C,EmB9tHR1B,IAAAA,WAAAqF,WnB+tHUkwB,EmB9tHVvZ,kBAAApd,KCnQAoB,EAAA60B,qBAAAlsB,KAEAnG,WAEApD,MAEAy2B,SpBi/HE71B,QoB7+HFZ,OAAAA,4BAAAA,SAAAA,UAAAA,WpB8+HI,GAAIA,GAAWI,KAAKJ,UAClB+b,YAAa,SoB1+HnBxU,YAAA,QpB6+HInH,MoB1+HJuH,KAAA,WACAC,OACAvH,SAAAL,MpB6+HKuH,UoB1+HL5E,kBAAA8Q,WpB2+HI,OACE9L,SoB1+HNgb,IpB2+HM/a,QoB1+HN+a,UpB2+HMtiB,QoB1+HNsiB,SAAAnjB,EAAAqJ,GpB2+HQrJ,EAAQkI,KAAK,cAAe,WAC5BlI,EAAQuC,WAAW,WACnB,IAAIY,GAAWnD,EAAQ,GAAGiU,iBAAiB,yBoBr+HnDlM,SAAA1G,QAAA8B,EAAA,SAAAigB,GAEA5iB,GAAAA,GAAA02B,QAAA12B,QAAAA,EACA22B,GAAAA,KAAAA,cAAA,IAEAhU,EAAAjb,KAAA,WAAAA,EAAAmB,QAAA,IAAA8Z,EAAAjb,KAAA,gBpBw+HKH,UoBn+HLnI,cAAAY,UAAAA,QAAAA,SAAAA,EAAAA,GpBo+HI,GoBj+HJA,GAAA42B,EAAAp3B,SACAm3B,EAAAC,oBpBk+HI,QACEjvB,SoBh+HNgvB,IpBi+HM/uB,QoBh+HNivB,UpBi+HMx0B,KAAM,SAAkBC,EAAO9C,EAASkI,EAAMpH,GoB/9HpD,GAAAw2B,GAAAA,EACAH,EAAAG,UAAAH,EAAAA,GAAAzuB,SACA4uB,EAAAx0B,EAAAoF,EAAAovB,SAAAA,EpBi+HYD,EAAYj2B,QAAQ2E,UAAUmC,EAAKmvB,WAAanvB,EAAKmvB,WAAY,CoB79H7EE,GAAAA,KAAAF,EAAAA,aACAA,EAAAE,EAAAA,MAAArvB,EAAAmvB,WpBg+HQ,IoB79HRC,GAAA3b,QAAA0b,UAAAC,EAAAA,YAAAA,EAAAA,YAAAA,CpB89HYH,GAAoBzuB,KAAKR,EAAKovB,coB39H1Cx2B,EAAAgJ,EAAAA,MAAAC,EAAAutB,YpB89HQ,IAAIC,GAAuC,iBAAdF,IAAiD,iBAAfC,EAC3DC,KoBx9HZz2B,EAAA+E,SAAAkE,KAAA,SAAA4R,GAEA,MAAA8a,GAAA31B,EAAA6I,IpB09HU7I,EoBx9HVs2B,YAAArtB,KAAAytB,SAAAf,GACAjW,MAAAA,SAAAiX,OAAAA,EAAAlb,MAKAvc,EAAA82B,QAAAG,WACAn0B,GAAAA,KAAAhC,EAAA6I,UpBu9HU9E,GoBr9HV,WACA/D,IAAAmF,EAAAA,GAAAA,QAAAua,GpBs9HYA,EAAciX,YAAY73B,EAAQ2c,YAAaka,MAGnDz2B,EAAQ82B,KAAKl3B,EAAQq3B,YAAa,WAChCn0B,EAAMid,OAAO,WACNqX,GoB/8HjBrvB,EAAA9B,eAAAua,EAAA+O,SAAA,WAGApnB,EAAAtC,mBpBo9HOkC,UoB/8HP5E,eAAA,WpBg9HI,OACEgF,SoB/8HN/G,IpBg9HMgH,QoB/8HNhH,UpBg9HMP,QAAS,SAAkBb,EAASkI,GAClClI,EAAQkI,KAAK,cAAe,WAC5BlI,EAAQuC,WAAW,WoB18H3BwF,IAAAA,GAAA/H,EAAA,GAAAiU,iBAAA,sBAEAzT,SAAAA,QAAA02B,EAAA12B,SAAAA,GACA22B,QAAAA,QAAAA,GAAAjvB,KAAA,WAAA,IAEA9G,QAAApB,QAAAojB,GAAAlb,KAAA,WAAAA,EAAAmB,epB68HKtB,UoBx8HLnI,WAAAY,UAAAA,QAAAA,SAAAA,EAAAA,GpBy8HI,GoBt8HJA,GAAA42B,EAAAp3B,SACAm3B,EAAAC,oBpBu8HI,QACEjvB,SoBr8HNqM,IpBs8HMpM,QoBr8HN,UpBs8HMvF,KoBr8HNvB,SAAA+S,EAAAqjB,EAAAA,EAAAA,GpBs8HQ,GoBl8HR52B,GpBk8HYlB,EoBr8HZY,EACAc,EAAAo2B,UAAAA,EAAAA,GAAAA,SpBs8HYlX,EAAgB4W,EAAUp3B,EAAQoS,SAAWpS,CAEjDkI,GAAKsM,SAAS,QAAS,SAASkjB,GoBh8HxCp2B,EAFAuE,iBAAAA,IAAAsxB,EAAAzuB,KAAAgvB,GAEAjB,EAAAr1B,MAAAA,GAEAg2B,EpBo8HUt2B,EAAW+E,YoB97HrB7F,EAAA82B,QAAAG,WACAn0B,GAAAA,GAAA1B,QAAAgF,OAAAtF,EAAA6I,WAAArI,EpBi8HUuD,GoB/7HV/D,WACAA,IAAA+E,EAAAA,GAAAA,QAAAA,GpBg8HY2a,EAAciX,YAAY73B,EAAQ2c,YAAaka,MAGnDz2B,EAAQ82B,KAAKl3B,EAAQq3B,YAAa,WAChCn0B,EAAMid,OAAO,WqBrmIvB1f,EAAA4F,cAAA3E,GAIAd,EAAAI,mBrBymIEQ,QqBnmIFgB,OAAAA,wBAAA,yBAAAwB,SAAA,SAAA,WrBomII,GqBnmIJC,GAAAjD,KAAAJ,UACAR,UAAA,0BACAokB,YAAA,QACAtgB,YAAA,QACAtB,UAAA,QACA4E,YAAA,uBrBomIMhF,iBAAiB,EqBjmIvBxB,WAAA0D,EAEAtE,QAAA23B,KrBkmIMvT,UqBhmINwT,ErBimIM9zB,UqB9lINlE,ErB+lIM4C,MqB7lINo1B,ErB8lIMxwB,MqB5lIN,ErB8lIIxG,MqB1lIJ0D,MAAAqzB,SAAAA,SAAAA,GrB2lIM,QAASA,GAAa3yB,GqBrlI5B+C,GAAAA,MAEAnI,EAAAwB,QAAAQ,UAAApB,EAAAwE,EAEAlC,OADAqF,GAAAyc,EAAAhlB,GrBwlIM,MqBplINA,OrBslIKmI,UqBtlIL/H,WAAAA,UAAAA,OAAAA,SAAAA,SAAAA,EAAAA,EAAAA,GrBulII,OACEmI,SAAU,MACVrF,OqBxlIN1B,ErBylIMyB,KqBxlIN,SAAAkD,EAAAtE,EAAA7B,EAAA6B,GrBylIQ,GAAI7B,IqBrlIZkD,MAAAuF,EACAjH,QAAAC,EACA+F,MAAAhG,EAIAA,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAA,kBAAAI,YAAAA,WAAAA,WAAAA,OAAAA,YAAAA,aAAAA,SAAAA,GACA6G,QAAAvC,UAAAtE,EAAA8G,MAAAC,EAAAA,GAAA/G,EAAAgH,KrBslIQ,IqBplIR7I,GAAAkD,erBqlIQ1B,SAAQC,SAAU,WAAY,WAAY,OAAQ,aAAe,SAASI,GACpEL,QAAQ2E,UAAUmC,EAAKzG,KAAS4G,EAAiBK,KAAKR,EAAKzG,MAAO7B,EAAQ6B,IAAO,KAEvFL,QqBllIR8G,SAAA,eAAA,SAAA,eAAA,UAAA,SAAAzG,GrBmlIU,GqBllIVyG,GAAAsM,KAAA/S,EAAA8G,OAAAe,GAAAA,cAAAC,EAAAA,MAAAA,EACAzG,SAAArB,UAAA6P,EAAAA,MrBmlIY1R,EAAQ6B,GAAOqB,EAAMuR,MAAMnM,EAAKI,OqB7kI5ClH,QAAA8G,SAAA,QAAA,WAAA,SAAAzG,GACAqB,EAAAsG,IACAlB,EAAA9G,SAAAkC,EAAAA,SAAAgG,EAAAC,GACAnI,EAAAA,GAAAQ,EAAAkB,YAAAwG,OrBolIYpB,EqBhlIZ2vB,SrBilIU/0B,EAAMsG,OAAOlB,EAAK2vB,QAAS,SAASvuB,EAAUC,GqB7kIxDuuB,QAAAF,SAAAh4B,GAGAI,QAAAkI,OAAAvE,EAAA2F,GAIAwuB,EAAAA,QAAArtB,IAEAqtB,ErB4kIQ,IAAIA,GAAQF,EAAOh4B,EACnBI,GAAQoM,GAAGlE,EAAKvE,SAAW,QAASm0B,EAAMxrB,QAC1CxJ,EAAM4H,IAAI,WAAY,WsB5qI9BrK,GAAAy3B,EAAArtB,UAIAjK,EAAAI,KACAH,EAAA,YtB+qIEW,QsB1qIFyC,OAAA,wBAAA,yBAAAD,SAAA,SAAA,WtB2qII,GsB1qIJ5D,GAAAY,KAAAJ,UACA4jB,UAAA,UACAtgB,YAAA,QACAsD,YAAA,QAEA2wB,UAAA,KACAhtB,YAAA,uBACAitB,WAAAA,EtB0qIMh4B,QAAS,KsBvqIfY,UAAA0D,EAEAR,UAAAm0B,EtBwqIM7wB,MsBtqIN8wB,EtBuqIMH,UsBpqINn4B,EtBqqIMmL,MsBnqINmtB,EtBoqIMF,asBjqIN9yB,EtBmqIItE,MAAK0D,MsBjqITY,SAAA6F,WAAAA,SAAAA,EAAAA,GtBkqIM,QAASktB,GAAajzB,GsB9pI5B,GAAAoC,MACAxH,EAAAm4B,QAAAn2B,UAAApB,EAAAwE,EtBgqIQkzB,GsB/pIR9wB,EAAAxH,GtBgqIQs4B,EsB/pIR9wB,OAAAA,cAAAA,EAAAA,YACAtC,EAAAA,OtBgqIUozB,EsB/pIVA,OAAA3wB,KAAAA,EAAAA,KtBiqIQ,IAAIH,GAAO8wB,EAAO9wB,IsB9oI1BtE,OtB+oIYlD,GAAQm4B,WsB7pIpBG,EAAAA,KAAAA,WtB+pIY9wB,IsB3pIZtC,EAAAmzB,WtB6pIcC,EAAO3wB,QsBvpIrB,IAAA3H,EAAAm4B,YAIAG,EtBypIM,MsBrpINt4B,OtBupIKmI,UsBvpIL/H,WAAAA,UAAAA,OAAAA,SAAAA,SAAAA,EAAAA,EAAAA,GtBwpII,OACEmI,SAAU,MACVrF,OsBzpIN1B,EtB0pIMyB,KsBzpIN,SAAAkD,EAAAtE,EAAA7B,EAAA6B,GtB0pIQ,GAAI7B,IsBtpIZkD,MAAAuF,EACAjH,QAAAC,EACA+F,MAAAhG,EAIAA,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAA,YAAAI,WAAAA,OAAAA,YAAAA,YAAAA,WAAAA,eAAAA,SAAAA,GACA6G,QAAAvC,UAAAtE,EAAA8G,MAAAC,EAAAA,GAAA/G,EAAAgH,KtBupIQ,IsBrpIR7I,GAAAkD,etBspIQ1B,SAAQC,SAAU,WAAY,OAAQ,YAAa,eAAiB,SAASI,GACvEL,QAAQ2E,UAAUmC,EAAKzG,KAAS4G,EAAiBK,KAAKR,EAAKzG,MAAO7B,EAAQ6B,IAAO,KAEvFL,QsBlpIR0J,SAAA,eAAA,SAAA,eAAA,UAAA,SAAArJ,GtBmpIU,GAAI6G,GAAQ,KAAO7G,EAAI8G,OAAO,GAAGC,cAAgB/G,EAAIgH,MAAM,EsB/oIrErH,SAAAC,UAAA6G,EAAAI,MACA1I,EAAA6B,GAAAqB,EAAAuR,MAAAnM,EAAAI,OtBmpIaxF,EAAMyR,eAAe,WACxBzR,EAAMgI,MAAQ,IsB5oIxB1J,QAAA8G,SAAA,QAAA,UAAA,QAAA,SAAAzG,GACAqB,EAAAsG,IACAlB,EAAA9G,SAAAkC,EAAAA,SAAAgG,EAAAC,GACAnI,EAAAA,GAAAQ,EAAAkB,YAAAwG,OtBkpIYpB,EsB9oIZiwB,StB+oIUr1B,EAAMsG,OAAOlB,EAAKiwB,QAAS,SAAS7uB,EAAUC,GsB3oIxD6uB,QAAAF,SAAAt4B,GAGAI,QAAAkI,OAAAvE,EAAA2F,GAIA8uB,EAAAA,QAAA3tB,IAEA2tB,EtB0oIQ,IAAIA,GAAQF,EAAOt4B,EACnBI,GAAQoM,GAAGlE,EAAKvE,SAAW,QAASy0B,EAAM9rB,QAC1CxJ,EAAM4H,IAAI,WAAY,WuBxwI9BrK,GAAA+3B,EAAA3tB,UAIAjK,EAAAI,KACA8F,EAAA,YvB2wIEtF,QuBpwIF+f,OAAAA,wBAAA9S,oCAAAE,oCAAAA,SAAAA,SAAAA,WvBqwII,GuBpwIJ/N,GAAAygB,KAAA7f,UAEAsF,UAAA2xB,OvBowIMC,cuBlwINC,EvBmwIMC,UuBhwIN54B,EvBkwIIgB,MuB9vIJ0D,MAAAm0B,UAAA,WAAA,aAAA,SAAA/zB,EAAAwc,EAAAnT,GvBiwIM,QuB9vIN2qB,GAAAA,EAAA1zB,GvBs3IQ,QuBltIR2zB,GAAAC,EAAAjqB,EAAAd,GvBmtIU,GuBltIVhH,GAAAgyB,IvBmtIcC,EAAeC,GuBjtI7B,OAAAryB,IAAAG,EvBmtImB,MuBhtInBgyB,OAAAA,EACA7e,EAAA4e,GAAAl0B,EAAAA,IAAAs0B,SAAAhf,SvBktIsC,OAAjBif,GAAyBtqB,EAASd,IAAMqrB,EAAgBC,GAAmBL,EAAeG,EuB/sI/GF,SvBktIiB,SuB7sIjB,QAAAR,KvBgtIU,MAAOve,GAAS,KAAOtV,EAAUA,EAAQs0B,YAAchf,EAAS,GAAGnT,UAErE,QAASkyB,KuBxsIjBhxB,MAAAiS,GAAA,KAAAtV,EAAAA,EAAA2J,SAAAE,KAAAuqB,aAAAp0B,EAAAI,GAAAA,aA5LA,GAAA4B,MACAuyB,EAAAA,QAAAr3B,UAAApB,EAAAwE,GACAo0B,EAAAx5B,EAAA+K,OACA0uB,EAAA,+BAEAjnB,GAAApS,EAEAJ,EAAAunB,EACAuR,EAAAvR,EACAzgB,EAAAiG,EvB6vIYssB,EuB5vIZ7mB,EvB6vIYgnB,EAAU,KACVC,EuB5vIZ,KACAjnB,EAAAhR,EAAApB,QvB6vIQ,IAAIJ,EAAQunB,aACV,GAAIvnB,EAAQunB,aAAaxS,MAAM,SuB1vIzC4jB,IAAAzmB,GAAAA,GAAA,EAAAnF,EAAA,EAAA/M,EAAAunB,aAAA,EAAAxa,IAEA/L,EAAA04B,EAAAA,aAKAtf,GAAA5N,QAAApM,QAAAsiB,EAAAA,aAwKAla,OvBmlIQmwB,GuBrvIRjW,KAAAA,WACA1hB,KAAAwhB,gBvBsvIUsW,EAAmB3qB,EAAWC,OAAOhO,EAAQ,IAAI6N,IAAMsrB,EuBlvIjEZ,EAAA9tB,EAAA+tB,WAAAx4B,EAAA,GAAA4nB,MAAAja,MAGAqM,EAAAtN,GAAAA,SAAA9L,KAAAA,eACAoZ,EAAAtN,GAAAA,QAAA9L,KAAAA,4BACAqgB,EAAAvU,GAAAA,SAAA9L,KAAAA,oBvBkvIUA,KAAK0hB,gBuB9uIfiW,KAAAnW,8BvBivIQmW,EAAO9tB,QAAU,WuBzuIzB8tB,EAAAjW,IAAAA,SAAA1hB,KAAA0hB,eAGAtI,EAAAnT,IAAAA,QAAAgyB,KAAAA,4BACA5X,EAAAtS,IAAAA,SAAAZ,KAAAC,qBvB0uIQuqB,EuBtuIRgB,2BAAAF,WAGA5W,WAAA2W,EAAAG,cAAA,IvBsuIQhB,EuBnuIRgB,cAAA,WvBouIU,GuBnuIVF,GAAAR,IACAlqB,EAAA6pB,EAAAxqB,OAAAhO,EAAA,IACAA,EAAA+N,EAAAH,OAAA5N,EAAA,IvBouIcu5B,EAAQZ,EAAsBU,EAAO1qB,EAAUuqB,EuBluI7DE,KAAAd,IvBouIUc,EuBnuIVp5B,EACAoP,QAAApP,GvBouIYq5B,EAAQ,KACJb,GuBluIhBx4B,EAAAJ,IAAA45B,QAAAA,IvBquIgB55B,EuBnuIhB04B,eAGAe,EAAA1qB,IAAAA,WAAA9H,EAAAA,aAAAA,GAAAA,YvBkuIc7G,EAAQoP,IAAI,MAAO,MuB/tIjC,WAAApP,GAEAq5B,EvBguIgBz5B,EAAQ45B,cuBhuIxB,EAAAlB,EAAAA,aAEAlpB,EAAAvB,IAAAjO,EvBmuIgB44B,GuBhuIhBa,EAAAjqB,IAAA,QAAA,IAEApP,EAAAoP,evBkuIcpP,EAAQoP,IAAI,WAAYxP,EAAQunB,aAAe,GAAK,YuBhuIlEnnB,EAAAJ,IAAA04B,MAAAA,EAAAnR,aAAA,GAAAhG,EAAA,GAAA3R,aAAAypB,EAAAC,EAAAR,EAAA,SvBouIYW,EAAQ,KACJb,GuB9tIhBx4B,EAAA4T,IAAAA,QAAA6kB,EAAAhmB,GAAA9C,YAAA4pB,MAIAE,EAAAA,eACAlB,EAAAe,IAAAA,WAAAA,SACAf,EAAAjW,IAAAA,MAAAA,EAAAA,QAIAiW,EAAAe,YAAAA,GAAA7mB,SAAA,SAAA,WAAA8mB,EAAA,IAAAA,EAAA,OvB8tIQhB,EuB5tIRmB,UAAA15B,WAEAu4B,EAAA34B,gBvB4tIU24B,EuB3tIVv4B,iBvB6tIQu4B,EAAOoB,mBAAqBzY,EAASqX,EAAOkB,UAAW,IACvDlB,EuB1tIR34B,cAAA8G,WvB2tIU,GuB1tIVkzB,GAAAlzB,EAAA,GAAAkhB,MAAAjZ,SACA/O,EAAA8G,EAAA,GAAAkhB,MAAA/Z,GvB2tIcjO,GAAQ04B,euBztItBt4B,EAAAJ,IAAA8G,WAAAiO,EAAAwS,aAAA,GAAA,YvB2tIYnnB,EuB1tIZm5B,IAAAA,MAAAA,KvB4tIcv5B,EuB1tId8G,YACA,SvB0tIgB9G,EuB1tIhB8G,YvB2tIc9G,EuB1tId8G,UAAAqH,MvB4tIgBnO,EuB1tIhB8G,UAAAiO,MAAA,cACAjO,EAAA,GAAA9G,EAAA8G,UvB4tIgBA,EADE9G,EAAQunB,aACEpZ,EAAWC,OAAOoE,EAAO,IAAIvE,IAA0B,EAApBjO,EAAQ8G,UuBvtIvEygB,EAAAA,OAAAvnB,EAAAq5B,IAAAA,IAAAtkB,EAAAvF,IAAApP,EAAA,GAAA,aAAA,GAAA,EAAAJ,EAAA8G,WAIAuyB,EAAAA,EAAAA,EAAAr5B,WAKAA,EAAA04B,eAEAt4B,EADAA,EAAAmnB,cAAAyS,EAAAA,aAAAA,MAAAA,aACAb,KAAAW,EAAAA,OAAAA,EAAAA,IAAAA,IAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,EAAAA,aAAAA,EvBwtIoD,EAAvB95B,EAAQq5B,cuBhtIrCH,EAAAA,eAEA94B,EAAA6G,IAAAA,WAAAH,GACA1G,EAAAoP,IAAA,MAAAsqB,KA+BAvxB,EAAAA,OACAowB,EvB2jIM,GuB9vINpX,GAAAqX,QAAAx4B,QAAA0E,EAAA2J,SAAAE,MACA0S,EAAAkY,QAAAA,QAAAz0B,EvB44IM,OuBvsIN9E,OvBysIKmI,UuBzsIL4C,WAAAkvB,SAAAA,UAAAvyB,WAAAlG,SAAApB,EAAA0E,EAAAA,GvB0sII,OACEyD,SuB1sIN9G,MvB2sIM+G,QuB1sINhH,kBvB2sIMyB,KuB1sIN,SAAApB,EAAAA,EAAAA,EAAAA,GvB2sIQ,GuB1sIR7B,IvB2sIUkD,MuB1sIVA,EvB2sIU6H,OuB1sIV/K,EAAAk6B,EAAAA,SAAAA,QAAAA,QAAAA,GvB4sIQ14B,SAAQC,SAAU,YAAa,eAAgB,eAAgB,cAAe,eAAgB,YAAc,SAASI,GuBxsI7H,GAAA83B,QAAAA,UAAAA,EAAAA,IAAAA,CACAz0B,GAAAA,GAAAoD,EAAAzG,EAAA83B,SAAAhB,KAAAv4B,KAAAJ,GAAAA,GvB2sIgB,SAAS8I,KAAKoxB,KAASA,GAAS,GuB1sIhDh3B,EAAArB,GAAAq4B,IvB8sIQ,IuB3sIRP,EvB4sIQz0B,GAAS,WACPy0B,EAAQhB,EAAOv4B,EAASJ,KuBrsIlCmI,EAAAA,IAAA,WAAA,WACAwxB,GAAAA,EAAA9uB,UACA3J,EAAA,KACAF,EAAA0G,YCzPAlG,UAAA,gBAAA,WxBimMGmmB,OA3pDGzmB,YAAc,WAAY,SAASwG,GACjC1G,KAAK0G,SAAWA,OAItBlG,QAAQf,OAAO,kBAAoB,uBAAwB,uBAAwB,uBAAwB,wBAAyB,wBAAyB,4BAA6B,4BAA6B,wBAAyB,yBAA0B,yBAA0B,0BAA2B,2BAA4B,2BAA4B,uBAAwB,qBAAsB,6BACpaknB,OAAQlZ","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: typeahead/typeahead.js\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tooltip/tooltip.js\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) {\n              tipElement.css({visibility: 'visible'});\n\n              // Bind events\n              if (options.keyboard) {\n                if (options.trigger !== 'focus') {\n                  $tooltip.focus();\n                }\n                bindKeyboardEvents();\n              }\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (tipElement !== null) {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          if (tipElement && tipElement[0]) {\n            tipElement[0].focus();\n          }\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: timepicker/timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tab/tab.js\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n    var _tabsHash = {};\n\n    var _addTabControl = function (key, control) {\n      if (!_tabsHash[key]) _tabsHash[key] = control;\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n      self.$onKeyPress = $scope.$onKeyPress = function (e, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n          self.$setActive(index);\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      $tab.addTabControl = _addTabControl;\n      $tab.tabsHash = _tabsHash;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\n        // tabs are available in the tab component\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\n        }\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: select/select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: scrollspy/scrollspy.js\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n\n// Source: popover/popover.js\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: navbar/navbar.js\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: modal/modal.js\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: helpers/raf.js\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n\n// Source: helpers/parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n\n// Source: helpers/dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n\n// Source: helpers/debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n// Source: helpers/date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n\n// Source: helpers/date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n\n// Source: helpers/compiler.js\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = options.resolve || {};\n    var locals = options.locals || {};\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n\n// Source: dropdown/dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (/(9)/.test(evt.keyCode)) {\n            $dropdown.hide();\n            return;\n          }\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {\n            scope: scope\n          };\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n\n// Source: datepicker/datepicker.js\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n\n// Source: collapse/collapse.js\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        };\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function (e) {\n          if (e.which === 13) {\n            actionEventHandler();\n            e.preventDefault();\n          } else if (e.which !== 16 && e.which !== 9) {\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: button/button.js\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: aside/aside.js\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: alert/alert.js\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: affix/affix.js\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = options.resolve || {};\n    var locals = options.locals || {};\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (/(9)/.test(evt.keyCode)) {\n            $dropdown.hide();\n            return;\n          }\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {\n            scope: scope\n          };\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) {\n              tipElement.css({visibility: 'visible'});\n\n              // Bind events\n              if (options.keyboard) {\n                if (options.trigger !== 'focus') {\n                  $tooltip.focus();\n                }\n                bindKeyboardEvents();\n              }\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (tipElement !== null) {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          if (tipElement && tipElement[0]) {\n            tipElement[0].focus();\n          }\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n    var _tabsHash = {};\n\n    var _addTabControl = function (key, control) {\n      if (!_tabsHash[key]) _tabsHash[key] = control;\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n      self.$onKeyPress = $scope.$onKeyPress = function (e, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n          self.$setActive(index);\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      $tab.addTabControl = _addTabControl;\n      $tab.tabsHash = _tabsHash;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\n        // tabs are available in the tab component\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\n        }\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        };\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function (e) {\n          if (e.which === 13) {\n            actionEventHandler();\n            e.preventDefault();\n          } else if (e.which !== 16 && e.which !== 9) {\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n"],"sourceRoot":"/source/"}