{"version":3,"sources":["scripts/docs.js","scripts/app.js","scripts/services/indent.js","scripts/services/angular-plunkr.js","scripts/directives/highlight-block.js","scripts/directives/code.js","scripts/directives/append-source.js","scripts/controllers/main.js"],"names":["contentHtmlUrlPrefix","undefined","angular","module","constant","version","full","config","$plunkrProvider","defaults","$locationProvider","$sceProvider","enabled","$compileProvider","debugInfoEnabled","$rootScope","$window","FastClick","body","element","bodyElement","on","target","run","hash","attr","$location","$anchorScroll","ngVersion","length","evt","which","document","substr","el","setTimeout","prefix","minIndent","value","text","spaces","i","lines","line","indent","match","pop","push","join","templateHtml","substring","replace","$templateCache","templateCss","put","templateJs","provider","this","$form","forEach","fields","$get","form","append","input","plunkrTags","bodyEl","submit","remove","name","preload","plunkrTitle","contentHtml","contentHtmlUrl","contentCss","contentCssUrl","contentJs","contentJsUrl","PlunkrFactory","$plunkr","options","scope","$isReady","$promise","deferred","promise","postData","description","index","$q","defer","private","load","tag","key","resolve","results","when","template","$http","get","result","isString","isArray","isObject","data","then","open","post","moduleName","init","debounce","restrict","compile","directive","postLink","transclusion","isDefined","tAttr","$set","plunkr","onClickHandler","plunkerIsReady","$apply","$on","previousTitle","title","off","destroy","html","hljs","highlightBlock","terminal","placement","hlElement","codeElement","elementHtml","hlClass","children","$scrollTo","controller","$scope","window","createPlunkr"],"mappings":"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","file":"docs.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: scripts/app.js\nangular.module('mgcrea.ngStrapDocs', ['mgcrea.ngStrap', 'mgcrea.ngPlunkr', 'ngRoute', 'ngAnimate'])\n\n.constant('version', 'v2.3.12')\n.constant('ngVersion', angular.version.full)\n\n.config(function($plunkrProvider, version) {\n\n  angular.extend($plunkrProvider.defaults, {\n    plunkrTitle: 'AngularStrap Example Plunkr',\n    plunkrTags: ['angular', 'angular-strap'],\n    plunkrPrivate: false,\n    contentHtmlUrlPrefix: 'https://rawgit.com/mgcrea/angular-strap/' + version + '/src/',\n    contentJsUrlPrefix: 'https://rawgit.com/mgcrea/angular-strap/' + version + '/src/'\n  });\n\n})\n\n.config(function($routeProvider, $compileProvider, $locationProvider, $sceProvider) {\n\n  // Configure html5 to get links working on jsfiddle\n  $locationProvider.html5Mode(false);\n\n  // Disable strict context\n  $sceProvider.enabled(false);\n\n  // Disable scope debug data\n  $compileProvider.debugInfoEnabled(false);\n\n})\n\n.run(function($window, $rootScope, $location, $anchorScroll, version, ngVersion) {\n\n  $rootScope.version = version;\n  $rootScope.ngVersion = ngVersion;\n\n  // FastClick\n  $window.FastClick.attach($window.document.body);\n\n  // Support simple anchor id scrolling\n  var bodyElement = angular.element($window.document.body);\n  bodyElement.on('click', function(evt) {\n    var el = angular.element(evt.target);\n    var hash = el.attr('href');\n    if(!hash || hash[0] !== '#') return;\n    if(hash.length > 1 && hash[1] === '/') return;\n    if(evt.which !== 1) return;\n    $location.hash(hash.substr(1));\n    $anchorScroll();\n  });\n\n  // Initial $anchorScroll()\n  setTimeout(function() {\n    $anchorScroll();\n  }, 0);\n\n});\n\n// Source: scripts/services/indent.js\nangular.module('mgcrea.ngStrapDocs')\n\n.value('indent', function(text, spaces) {\n\n  if(!text) return text;\n  var lines = text.split(/\\r?\\n/);\n  var prefix = '      '.substr(0, spaces || 0);\n  var i;\n\n  // Remove any leading blank lines\n  while(lines.length && lines[0].match(/^\\s*$/)) lines.shift();\n  // Remove any trailing blank lines\n  while(lines.length && lines[lines.length - 1].match(/^\\s*$/)) lines.pop();\n  // Calculate proper indent\n  var minIndent = 999;\n  for(i = 0; i < lines.length; i++) {\n    var line = lines[0];\n    var indent = line.match(/^\\s*/)[0];\n    if(indent !== line && indent.length < minIndent) {\n      minIndent = indent.length;\n    }\n  }\n\n  for(i = 0; i < lines.length; i++) {\n    lines[i] = prefix + lines[i].substring(minIndent).replace(/=\"\"/g, '');\n  }\n  lines.push('');\n  return lines.join('\\n');\n\n});\n\n// Source: scripts/services/angular-plunkr.js\nangular.module('mgcrea.ngPlunkr', ['mgcrea.ngStrap.helpers.debounce'])\n\n.run(function($templateCache, version) {\n\n  var ngVersion = '1.5.5';\n\n  var templateHtml = '' +\n    '<!DOCTYPE html>\\n' +\n    '<html ng-app=\"{{ moduleName }}\">\\n' +\n    '\\n' +\n    '  <head>\\n' +\n    '    <meta charset=\"utf-8\" />\\n' +\n    '    <title>AngularJS Plunker</title>\\n' +\n    '    <script>document.write(\\'<base href=\"\\' + document.location + \\'\" />\\');</script>\\n' +\n\n    // styles\n    '    <link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/fontawesome/4.5.0/css/font-awesome.css\">\\n' +\n    '    <link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/bootstrap/3.3.6/css/bootstrap.min.css\">\\n' +\n    '    <link rel=\"stylesheet\" href=\"//mgcrea.github.io/angular-strap/styles/libs.min.css\">\\n' +\n    '    <link rel=\"stylesheet\" href=\"//mgcrea.github.io/angular-strap/styles/docs.min.css\">\\n' +\n    '    <link rel=\"stylesheet\" href=\"style.css\" />\\n' +\n\n    // scripts\n    '    <script src=\"//cdn.jsdelivr.net/angularjs/' + ngVersion + '/angular.min.js\" data-semver=\"' + ngVersion + '\"></script>\\n' +\n    '    <script src=\"//cdn.jsdelivr.net/angularjs/' + ngVersion + '/angular-animate.min.js\" data-semver=\"' + ngVersion + '\"></script>\\n' +\n    '    <script src=\"//cdn.jsdelivr.net/angularjs/' + ngVersion + '/angular-sanitize.min.js\" data-semver=\"' + ngVersion + '\"></script>\\n' +\n    '    <script src=\"//mgcrea.github.io/angular-strap/dist/angular-strap.js\" data-semver=\"' + version + '\"></script>\\n' +\n    '    <script src=\"//mgcrea.github.io/angular-strap/dist/angular-strap.tpl.js\" data-semver=\"' + version + '\"></script>\\n' +\n    '    <script src=\"//mgcrea.github.io/angular-strap/docs/angular-strap.docs.tpl.js\" data-semver=\"' + version + '\"></script>\\n' +\n    '    <script src=\"app.js\"></script>\\n' +\n\n    '  </head>\\n' +\n    '\\n' +\n    '  <body ng-controller=\"MainCtrl\">\\n' +\n    '\\n{{ contentHtml }}\\n' +\n    '  </body>\\n' +\n    '\\n' +\n    '</html>\\n';\n\n  $templateCache.put('$plunkr-html', templateHtml);\n\n  var templateCss = '' +\n    '/* Put your css in here */\\n' +\n    '\\n{{ contentCss }}\\n';\n\n  $templateCache.put('$plunkr-css', templateCss);\n\n  var templateJs = '' +\n    'var app = angular.module(\\'{{ moduleName }}\\', [\\'ngAnimate\\', \\'ngSanitize\\', \\'mgcrea.ngStrap\\']);\\n' +\n    '\\n' +\n    'app.controller(\\'MainCtrl\\', function($scope) {\\n' +\n    '});\\n' +\n    '\\n{{ contentJs }}\\n';\n\n  $templateCache.put('$plunkr-js', templateJs);\n\n})\n\n.provider('$form', function() {\n\n  var defaults = {};\n\n  this.$get = function($window) {\n\n    var bodyEl = angular.element($window.document.body);\n\n    var $form = {};\n\n    $form.post = function(url, fields) {\n      var form = angular.element('<form style=\"display: none;\" method=\"post\" action=\"' + url + '\" target=\"_blank\"></form>');\n      angular.forEach(fields, function(value, name) {\n        var input = angular.element('<input type=\"hidden\" name=\"' +  name + '\">');\n        input.attr('value', value);\n        form.append(input);\n      });\n      bodyEl.append(form);\n      form[0].submit();\n      form.remove();\n    };\n\n    return $form;\n\n  };\n\n})\n\n.provider('$plunkr', function() {\n\n  var defaults = this.defaults = {\n    preload: false,\n    plunkrTitle: 'AngularJS Example Plunkr',\n    plunkrPrivate: true,\n    plunkrTags: ['angular'],\n    moduleName: 'plunker',\n    templateHtml: '$plunkr-html',\n    contentHtml: '    <p>Hello {{name}}!</p>\\n',\n    contentHtmlUrl: '',\n    templateCss: '$plunkr-css',\n    contentCss: 'body {\\n  padding: 40px !important;\\n}\\n',\n    contentCssUrl: '',\n    templateJs: '$plunkr-js',\n    contentJs: '  $scope.name = \\'World\\';\\n',\n    contentJsUrl: ''\n  };\n\n  this.$get = function($rootScope, $compile, $templateCache, $q, $http, $form) {\n\n    function PlunkrFactory(config) {\n\n      var $plunkr = {};\n\n      // Common vars\n      var options = angular.extend({}, defaults, config);\n      var scope = $plunkr.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n      $plunkr.$isReady = false;\n\n      // Private vars\n\n      var deferred = $q.defer();\n      $plunkr.$promise = deferred.promise;\n      var postData = {};\n\n      $plunkr.init = function() {\n\n        postData.description = options.plunkrTitle;\n        angular.forEach(options.plunkrTags, function(tag, index) {\n          postData['tags[' + index + ']'] = tag;\n        });\n        postData.private = options.plunkrPrivate;\n        if(options.preload) {\n          $plunkr.load();\n        }\n\n      };\n\n      $plunkr.load = function() {\n        deferred.resolve($q.all(['templateHtml', 'contentHtmlUrl', 'templateCss', 'contentCssUrl', 'templateJs', 'contentJsUrl'].map(function(key) {\n          var template = options[key + 'Prefix'] ? options[key + 'Prefix'] + options[key] : options[key];\n          return options[key] && $q.when($templateCache.get(template) || $http.get(template));\n        })).then(function(results) {\n          return results.map(function(result) {\n            if(angular.isString(result)) return result;\n            else if(angular.isArray(result)) return result[1];\n            else if(angular.isObject(result)) return result.data;\n            else return result;\n          });\n        }).then(function(results) {\n          postData['files[index.html]'] = results[0].replace(/{{ contentHtml }}/i, results[1] || options.contentHtml).replace(/{{ moduleName }}/i, options.moduleName);\n          postData['files[style.css]'] = results[2].replace(/{{ contentCss }}/i, results[3] || options.contentCss).replace(/{{ moduleName }}/i, options.moduleName);\n          postData['files[app.js]'] = results[4].replace(/{{ contentJs }}/i, results[5] || options.contentJs).replace(/{{ moduleName }}/i, options.moduleName);\n          $plunkr.$isReady = true;\n        }));\n        return $plunkr.$promise;\n      };\n\n      $plunkr.open = function(load) {\n        if(!$plunkr.$isReady) $plunkr.load();\n        else $form.post('http://plnkr.co/edit/?p=preview', postData);\n      };\n\n      $plunkr.init();\n      return $plunkr;\n\n    }\n\n    return PlunkrFactory;\n\n  };\n\n})\n\n.directive('ngPlunkr', function($plunkr, debounce) {\n\n  return {\n    restrict: 'EAC',\n    scope: true,\n    // priority: 10000,\n    template: '<i class=\"fa fa-edit\"></i><small>plunker</small>',\n    compile: function(tElement, tAttr) {\n\n      // tElement.attr('data-title', 'edit in plunker');\n      // tElement.attr('data-placement', 'right');\n      // tElement.attr('bs-tooltip', '');\n\n      tAttr.$set('title', 'edit in plunker');\n\n      return function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['moduleName', 'templateHtml', 'templateJs', 'templateCss', 'contentHtmlUrl', 'contentJsUrl', 'contentCssUrl'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Initialize plnkr\n        var plunkr = $plunkr(options);\n\n        var previousTitle = attr.title;\n        function onClickHandler() {\n          if(!plunkr.$isReady) {\n            attr.$set('title', '<i class=\"fa fa-spinner fa-spin\"></i>&nbsp;preparing plunker...');\n            plunkr.load();\n          } else {\n            plunkr.open();\n          }\n        }\n\n        function plunkerIsReady() {\n          scope.$apply(function() {\n            attr.$set('title', '<i class=\"fa fa-check\"></i>&nbsp;punker ready, click again!');\n          });\n        }\n\n        plunkr.$promise.then(debounce(plunkerIsReady, 400));\n\n        // Trigger\n        element.on('click', onClickHandler);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          attr.$set('title', previousTitle);\n          element.off('click', onClickHandler);\n          plunkr.destroy();\n          options = null;\n          plunkr = null;\n        });\n\n      };\n    }\n  };\n});\n\n\n/*\nfunction(templateMerge, formPostData, prepareEditorAssetTags, prepareDefaultAppModule) {\n  return function(content) {\n    var hasRouting = false;\n    angular.forEach(content.deps, function(file) {\n      hasRouting = hasRouting || file.name == 'angular-route.js';\n    });\n    var indexHtmlContent = '<!doctype html>\\n' +\n                           '<html ng-app=\"{{module}}\">\\n' +\n                           '  <head>\\n' +\n                           '{{scriptDeps}}';\n\n    if(hasRouting) {\n        indexHtmlContent += '<script type=\"text/javascript\">\\n' +\n                            '//this is here to make plunkr work with AngularJS routing\\n' +\n                            'angular.element(document.getElementsByTagName(\\'head\\')).append(' +\n                              'angular.element(\\'<base href=\"\\' + window.location.pathname + \\'\" />\\')' +\n                            ');\\n' +\n                            '</script>\\n';\n    }\n\n    indexHtmlContent += '</head>\\n' +\n                        '  <body>\\n\\n' +\n                        '{{indexContents}}\\n\\n' +\n                        '  </body>\\n' +\n                        '</html>\\n';\n\n    indexProp = {\n      module: content.module,\n      scriptDeps: prepareEditorAssetTags(content, { includeLocalFiles : true }),\n      indexContents: content.html[0].content\n    };\n\n    var allFiles = [].concat(content.js, content.css, content.html, content.json);\n\n    if(!content.module) {\n      var moduleData = prepareDefaultAppModule(content);\n      indexProp.module = moduleData.module;\n\n      var found = false;\n      angular.forEach(content.js, function(file) {\n        if(file.name == 'script.js') {\n          file.content = moduleData.script + file.content;\n          found = true;\n        }\n      });\n      if(!found) {\n        indexProp.scriptDeps += '<script type=\"text/javascript\" src=\"script.js\"></script>\\n';\n        allFiles.push({\n          name : 'script.js',\n          content : moduleData.script\n        });\n      }\n    };\n\n    var postData = {};\n\n    angular.forEach(allFiles, function(file, index) {\n      if (file.content && file.name != 'index.html') {\n        postData['files[' + file.name + ']'] = file.content;\n      }\n    });\n\n    postData['files[index.html]'] = templateMerge(indexHtmlContent, indexProp);\n    postData['tags[]'] = \"angularjs\";\n\n    postData.private = true;\n    postData.description = 'AngularJS Example Plunkr';\n\n    formPostData('http://plnkr.co/edit/?p=preview', postData);\n  };\n};*/\n\n// Source: scripts/directives/highlight-block.js\nangular.module('mgcrea.ngStrapDocs')\n\n  .directive('highlightBlock', function($window, indent) {\n\n    return {\n      compile: function(element, attr) {\n        element.html(indent(element.html()));\n        return function postLink(scope, element, attr) {\n          $window.hljs.highlightBlock(element[0]);\n        };\n      }\n    };\n\n  });\n\n// Source: scripts/directives/code.js\nangular.module('mgcrea.ngStrapDocs')\n\n  .directive('code', function() {\n\n    return {\n      restrict: 'E',\n      terminal: true\n    };\n\n  });\n\n// Source: scripts/directives/append-source.js\nangular.module('mgcrea.ngStrapDocs')\n\n  .directive('appendSource', function($window, $compile, indent) {\n\n    return {\n      compile: function(element, attr) {\n\n        // Directive options\n        var options = {placement: 'after'};\n        angular.forEach(['placement', 'hlClass'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var hlElement = angular.element('<div class=\"highlight\" ng-non-bindable><pre><code class=\"html\" style=\"margin:0\"></code></pre></div>');\n        var codeElement = hlElement.children('pre').children('code');\n        var elementHtml = indent(element.html());\n        codeElement.text(elementHtml);\n        if(options.hlClass) codeElement.addClass(options.hlClass);\n        element[options.placement](hlElement);\n        $window.hljs.highlightBlock(codeElement[0]);\n\n      }\n    };\n\n  });\n\n// Source: scripts/controllers/main.js\nangular.module('mgcrea.ngStrapDocs')\n\n.controller('MainCtrl', function ($scope, $rootScope, $location, $anchorScroll, $plunkr) {\n\n  $scope.$scrollTo = function(hash) {\n    $location.hash(hash);\n    $anchorScroll();\n  };\n\n  $scope.createPlunkr = function() {\n    var myPlunkr = $plunkr();\n  };\n\n})\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrapDocs', ['mgcrea.ngStrap', 'mgcrea.ngPlunkr', 'ngRoute', 'ngAnimate'])\n\n.constant('version', 'v2.3.12')\n.constant('ngVersion', angular.version.full)\n\n.config(function($plunkrProvider, version) {\n\n  angular.extend($plunkrProvider.defaults, {\n    plunkrTitle: 'AngularStrap Example Plunkr',\n    plunkrTags: ['angular', 'angular-strap'],\n    plunkrPrivate: false,\n    contentHtmlUrlPrefix: 'https://rawgit.com/mgcrea/angular-strap/' + version + '/src/',\n    contentJsUrlPrefix: 'https://rawgit.com/mgcrea/angular-strap/' + version + '/src/'\n  });\n\n})\n\n.config(function($routeProvider, $compileProvider, $locationProvider, $sceProvider) {\n\n  // Configure html5 to get links working on jsfiddle\n  $locationProvider.html5Mode(false);\n\n  // Disable strict context\n  $sceProvider.enabled(false);\n\n  // Disable scope debug data\n  $compileProvider.debugInfoEnabled(false);\n\n})\n\n.run(function($window, $rootScope, $location, $anchorScroll, version, ngVersion) {\n\n  $rootScope.version = version;\n  $rootScope.ngVersion = ngVersion;\n\n  // FastClick\n  $window.FastClick.attach($window.document.body);\n\n  // Support simple anchor id scrolling\n  var bodyElement = angular.element($window.document.body);\n  bodyElement.on('click', function(evt) {\n    var el = angular.element(evt.target);\n    var hash = el.attr('href');\n    if(!hash || hash[0] !== '#') return;\n    if(hash.length > 1 && hash[1] === '/') return;\n    if(evt.which !== 1) return;\n    $location.hash(hash.substr(1));\n    $anchorScroll();\n  });\n\n  // Initial $anchorScroll()\n  setTimeout(function() {\n    $anchorScroll();\n  }, 0);\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrapDocs')\n\n.value('indent', function(text, spaces) {\n\n  if(!text) return text;\n  var lines = text.split(/\\r?\\n/);\n  var prefix = '      '.substr(0, spaces || 0);\n  var i;\n\n  // Remove any leading blank lines\n  while(lines.length && lines[0].match(/^\\s*$/)) lines.shift();\n  // Remove any trailing blank lines\n  while(lines.length && lines[lines.length - 1].match(/^\\s*$/)) lines.pop();\n  // Calculate proper indent\n  var minIndent = 999;\n  for(i = 0; i < lines.length; i++) {\n    var line = lines[0];\n    var indent = line.match(/^\\s*/)[0];\n    if(indent !== line && indent.length < minIndent) {\n      minIndent = indent.length;\n    }\n  }\n\n  for(i = 0; i < lines.length; i++) {\n    lines[i] = prefix + lines[i].substring(minIndent).replace(/=\"\"/g, '');\n  }\n  lines.push('');\n  return lines.join('\\n');\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngPlunkr', ['mgcrea.ngStrap.helpers.debounce'])\n\n.run(function($templateCache, version) {\n\n  var ngVersion = '1.5.5';\n\n  var templateHtml = '' +\n    '<!DOCTYPE html>\\n' +\n    '<html ng-app=\"{{ moduleName }}\">\\n' +\n    '\\n' +\n    '  <head>\\n' +\n    '    <meta charset=\"utf-8\" />\\n' +\n    '    <title>AngularJS Plunker</title>\\n' +\n    '    <script>document.write(\\'<base href=\"\\' + document.location + \\'\" />\\');</script>\\n' +\n\n    // styles\n    '    <link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/fontawesome/4.5.0/css/font-awesome.css\">\\n' +\n    '    <link rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/bootstrap/3.3.6/css/bootstrap.min.css\">\\n' +\n    '    <link rel=\"stylesheet\" href=\"//mgcrea.github.io/angular-strap/styles/libs.min.css\">\\n' +\n    '    <link rel=\"stylesheet\" href=\"//mgcrea.github.io/angular-strap/styles/docs.min.css\">\\n' +\n    '    <link rel=\"stylesheet\" href=\"style.css\" />\\n' +\n\n    // scripts\n    '    <script src=\"//cdn.jsdelivr.net/angularjs/' + ngVersion + '/angular.min.js\" data-semver=\"' + ngVersion + '\"></script>\\n' +\n    '    <script src=\"//cdn.jsdelivr.net/angularjs/' + ngVersion + '/angular-animate.min.js\" data-semver=\"' + ngVersion + '\"></script>\\n' +\n    '    <script src=\"//cdn.jsdelivr.net/angularjs/' + ngVersion + '/angular-sanitize.min.js\" data-semver=\"' + ngVersion + '\"></script>\\n' +\n    '    <script src=\"//mgcrea.github.io/angular-strap/dist/angular-strap.js\" data-semver=\"' + version + '\"></script>\\n' +\n    '    <script src=\"//mgcrea.github.io/angular-strap/dist/angular-strap.tpl.js\" data-semver=\"' + version + '\"></script>\\n' +\n    '    <script src=\"//mgcrea.github.io/angular-strap/docs/angular-strap.docs.tpl.js\" data-semver=\"' + version + '\"></script>\\n' +\n    '    <script src=\"app.js\"></script>\\n' +\n\n    '  </head>\\n' +\n    '\\n' +\n    '  <body ng-controller=\"MainCtrl\">\\n' +\n    '\\n{{ contentHtml }}\\n' +\n    '  </body>\\n' +\n    '\\n' +\n    '</html>\\n';\n\n  $templateCache.put('$plunkr-html', templateHtml);\n\n  var templateCss = '' +\n    '/* Put your css in here */\\n' +\n    '\\n{{ contentCss }}\\n';\n\n  $templateCache.put('$plunkr-css', templateCss);\n\n  var templateJs = '' +\n    'var app = angular.module(\\'{{ moduleName }}\\', [\\'ngAnimate\\', \\'ngSanitize\\', \\'mgcrea.ngStrap\\']);\\n' +\n    '\\n' +\n    'app.controller(\\'MainCtrl\\', function($scope) {\\n' +\n    '});\\n' +\n    '\\n{{ contentJs }}\\n';\n\n  $templateCache.put('$plunkr-js', templateJs);\n\n})\n\n.provider('$form', function() {\n\n  var defaults = {};\n\n  this.$get = function($window) {\n\n    var bodyEl = angular.element($window.document.body);\n\n    var $form = {};\n\n    $form.post = function(url, fields) {\n      var form = angular.element('<form style=\"display: none;\" method=\"post\" action=\"' + url + '\" target=\"_blank\"></form>');\n      angular.forEach(fields, function(value, name) {\n        var input = angular.element('<input type=\"hidden\" name=\"' +  name + '\">');\n        input.attr('value', value);\n        form.append(input);\n      });\n      bodyEl.append(form);\n      form[0].submit();\n      form.remove();\n    };\n\n    return $form;\n\n  };\n\n})\n\n.provider('$plunkr', function() {\n\n  var defaults = this.defaults = {\n    preload: false,\n    plunkrTitle: 'AngularJS Example Plunkr',\n    plunkrPrivate: true,\n    plunkrTags: ['angular'],\n    moduleName: 'plunker',\n    templateHtml: '$plunkr-html',\n    contentHtml: '    <p>Hello {{name}}!</p>\\n',\n    contentHtmlUrl: '',\n    templateCss: '$plunkr-css',\n    contentCss: 'body {\\n  padding: 40px !important;\\n}\\n',\n    contentCssUrl: '',\n    templateJs: '$plunkr-js',\n    contentJs: '  $scope.name = \\'World\\';\\n',\n    contentJsUrl: ''\n  };\n\n  this.$get = function($rootScope, $compile, $templateCache, $q, $http, $form) {\n\n    function PlunkrFactory(config) {\n\n      var $plunkr = {};\n\n      // Common vars\n      var options = angular.extend({}, defaults, config);\n      var scope = $plunkr.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n      $plunkr.$isReady = false;\n\n      // Private vars\n\n      var deferred = $q.defer();\n      $plunkr.$promise = deferred.promise;\n      var postData = {};\n\n      $plunkr.init = function() {\n\n        postData.description = options.plunkrTitle;\n        angular.forEach(options.plunkrTags, function(tag, index) {\n          postData['tags[' + index + ']'] = tag;\n        });\n        postData.private = options.plunkrPrivate;\n        if(options.preload) {\n          $plunkr.load();\n        }\n\n      };\n\n      $plunkr.load = function() {\n        deferred.resolve($q.all(['templateHtml', 'contentHtmlUrl', 'templateCss', 'contentCssUrl', 'templateJs', 'contentJsUrl'].map(function(key) {\n          var template = options[key + 'Prefix'] ? options[key + 'Prefix'] + options[key] : options[key];\n          return options[key] && $q.when($templateCache.get(template) || $http.get(template));\n        })).then(function(results) {\n          return results.map(function(result) {\n            if(angular.isString(result)) return result;\n            else if(angular.isArray(result)) return result[1];\n            else if(angular.isObject(result)) return result.data;\n            else return result;\n          });\n        }).then(function(results) {\n          postData['files[index.html]'] = results[0].replace(/{{ contentHtml }}/i, results[1] || options.contentHtml).replace(/{{ moduleName }}/i, options.moduleName);\n          postData['files[style.css]'] = results[2].replace(/{{ contentCss }}/i, results[3] || options.contentCss).replace(/{{ moduleName }}/i, options.moduleName);\n          postData['files[app.js]'] = results[4].replace(/{{ contentJs }}/i, results[5] || options.contentJs).replace(/{{ moduleName }}/i, options.moduleName);\n          $plunkr.$isReady = true;\n        }));\n        return $plunkr.$promise;\n      };\n\n      $plunkr.open = function(load) {\n        if(!$plunkr.$isReady) $plunkr.load();\n        else $form.post('http://plnkr.co/edit/?p=preview', postData);\n      };\n\n      $plunkr.init();\n      return $plunkr;\n\n    }\n\n    return PlunkrFactory;\n\n  };\n\n})\n\n.directive('ngPlunkr', function($plunkr, debounce) {\n\n  return {\n    restrict: 'EAC',\n    scope: true,\n    // priority: 10000,\n    template: '<i class=\"fa fa-edit\"></i><small>plunker</small>',\n    compile: function(tElement, tAttr) {\n\n      // tElement.attr('data-title', 'edit in plunker');\n      // tElement.attr('data-placement', 'right');\n      // tElement.attr('bs-tooltip', '');\n\n      tAttr.$set('title', 'edit in plunker');\n\n      return function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['moduleName', 'templateHtml', 'templateJs', 'templateCss', 'contentHtmlUrl', 'contentJsUrl', 'contentCssUrl'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Initialize plnkr\n        var plunkr = $plunkr(options);\n\n        var previousTitle = attr.title;\n        function onClickHandler() {\n          if(!plunkr.$isReady) {\n            attr.$set('title', '<i class=\"fa fa-spinner fa-spin\"></i>&nbsp;preparing plunker...');\n            plunkr.load();\n          } else {\n            plunkr.open();\n          }\n        }\n\n        function plunkerIsReady() {\n          scope.$apply(function() {\n            attr.$set('title', '<i class=\"fa fa-check\"></i>&nbsp;punker ready, click again!');\n          });\n        }\n\n        plunkr.$promise.then(debounce(plunkerIsReady, 400));\n\n        // Trigger\n        element.on('click', onClickHandler);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          attr.$set('title', previousTitle);\n          element.off('click', onClickHandler);\n          plunkr.destroy();\n          options = null;\n          plunkr = null;\n        });\n\n      };\n    }\n  };\n});\n\n\n/*\nfunction(templateMerge, formPostData, prepareEditorAssetTags, prepareDefaultAppModule) {\n  return function(content) {\n    var hasRouting = false;\n    angular.forEach(content.deps, function(file) {\n      hasRouting = hasRouting || file.name == 'angular-route.js';\n    });\n    var indexHtmlContent = '<!doctype html>\\n' +\n                           '<html ng-app=\"{{module}}\">\\n' +\n                           '  <head>\\n' +\n                           '{{scriptDeps}}';\n\n    if(hasRouting) {\n        indexHtmlContent += '<script type=\"text/javascript\">\\n' +\n                            '//this is here to make plunkr work with AngularJS routing\\n' +\n                            'angular.element(document.getElementsByTagName(\\'head\\')).append(' +\n                              'angular.element(\\'<base href=\"\\' + window.location.pathname + \\'\" />\\')' +\n                            ');\\n' +\n                            '</script>\\n';\n    }\n\n    indexHtmlContent += '</head>\\n' +\n                        '  <body>\\n\\n' +\n                        '{{indexContents}}\\n\\n' +\n                        '  </body>\\n' +\n                        '</html>\\n';\n\n    indexProp = {\n      module: content.module,\n      scriptDeps: prepareEditorAssetTags(content, { includeLocalFiles : true }),\n      indexContents: content.html[0].content\n    };\n\n    var allFiles = [].concat(content.js, content.css, content.html, content.json);\n\n    if(!content.module) {\n      var moduleData = prepareDefaultAppModule(content);\n      indexProp.module = moduleData.module;\n\n      var found = false;\n      angular.forEach(content.js, function(file) {\n        if(file.name == 'script.js') {\n          file.content = moduleData.script + file.content;\n          found = true;\n        }\n      });\n      if(!found) {\n        indexProp.scriptDeps += '<script type=\"text/javascript\" src=\"script.js\"></script>\\n';\n        allFiles.push({\n          name : 'script.js',\n          content : moduleData.script\n        });\n      }\n    };\n\n    var postData = {};\n\n    angular.forEach(allFiles, function(file, index) {\n      if (file.content && file.name != 'index.html') {\n        postData['files[' + file.name + ']'] = file.content;\n      }\n    });\n\n    postData['files[index.html]'] = templateMerge(indexHtmlContent, indexProp);\n    postData['tags[]'] = \"angularjs\";\n\n    postData.private = true;\n    postData.description = 'AngularJS Example Plunkr';\n\n    formPostData('http://plnkr.co/edit/?p=preview', postData);\n  };\n};*/\n","'use strict';\n\nangular.module('mgcrea.ngStrapDocs')\n\n  .directive('highlightBlock', function($window, indent) {\n\n    return {\n      compile: function(element, attr) {\n        element.html(indent(element.html()));\n        return function postLink(scope, element, attr) {\n          $window.hljs.highlightBlock(element[0]);\n        };\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrapDocs')\n\n  .directive('code', function() {\n\n    return {\n      restrict: 'E',\n      terminal: true\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrapDocs')\n\n  .directive('appendSource', function($window, $compile, indent) {\n\n    return {\n      compile: function(element, attr) {\n\n        // Directive options\n        var options = {placement: 'after'};\n        angular.forEach(['placement', 'hlClass'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var hlElement = angular.element('<div class=\"highlight\" ng-non-bindable><pre><code class=\"html\" style=\"margin:0\"></code></pre></div>');\n        var codeElement = hlElement.children('pre').children('code');\n        var elementHtml = indent(element.html());\n        codeElement.text(elementHtml);\n        if(options.hlClass) codeElement.addClass(options.hlClass);\n        element[options.placement](hlElement);\n        $window.hljs.highlightBlock(codeElement[0]);\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrapDocs')\n\n.controller('MainCtrl', function ($scope, $rootScope, $location, $anchorScroll, $plunkr) {\n\n  $scope.$scrollTo = function(hash) {\n    $location.hash(hash);\n    $anchorScroll();\n  };\n\n  $scope.createPlunkr = function() {\n    var myPlunkr = $plunkr();\n  };\n\n})\n"]}